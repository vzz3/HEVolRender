#include "../include/catch2/catch.hpp"
#include "../src/math/UArbBigInt.hpp"
#include "../src/math/UFixBigInt.hpp"

#define LONG_TESTS 0

using ppvr::math::UArbBigInt;
using ppvr::math::UFixBigInt;

TEST_CASE( "unsigned infinit big integer to unsigned int 64 (UArbBigInt from Word constructor)", "[UABigint]" ) {
	REQUIRE( UArbBigInt::ZERO.toUint64() == 0ull );
	REQUIRE( UArbBigInt(0).toUint64() == 0ull );

	REQUIRE( UArbBigInt::ONE.toUint64() == 1ull );
	REQUIRE( UArbBigInt(1).toUint64() == 1ull );

	REQUIRE( UArbBigInt::TWO.toUint64() == 2ull );
	REQUIRE( UArbBigInt(2).toUint64() == 2ull );

	REQUIRE( UArbBigInt::TEN.toUint64() == 10ull );
	REQUIRE( UArbBigInt(10).toUint64() == 10ull );

	REQUIRE( UArbBigInt(5).toUint64() == 5ull );
	REQUIRE( UArbBigInt(55).toUint64() == 55ull );
	REQUIRE( UArbBigInt(127).toUint64() == 127ull );
	REQUIRE( UArbBigInt(255).toUint64() == 255ull );
}

TEST_CASE( "unsigned infinit big integer to unsigned int 64 (UArbBigInt fromUint64())", "[UABigint]" ) {
	//uint64_t int_2e63_test = 0x8000000000000000; // 2^63 => bin: 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
	//uint64_t test_128 = int_2e63_test >> (8 * 7);
	//uint64_t test_0 = int_2e63_test >> (8 * 8);

	REQUIRE( UArbBigInt::fromUint64(0xFF).toUint64() == 255ull );
	REQUIRE( UArbBigInt::fromUint64(0x0100).toUint64() == 256ull );
	REQUIRE( UArbBigInt::fromUint64(1234).toUint64() == 1234ull );

	uint64_t int_2e16_m1 = std::pow(2ull, 16) - 1ull;
	REQUIRE( UArbBigInt::fromUint64(0xFFFF).toUint64() == int_2e16_m1 );

	uint64_t int_2e16 = std::pow(2ull, 16);
	REQUIRE( UArbBigInt::fromUint64(0x010000).toUint64() == int_2e16 );

	uint64_t int_2e23 = std::pow(2ull, 23);
	REQUIRE( UArbBigInt::fromUint64(0x800000).toUint64() == int_2e23 );

	uint64_t int_2e24_m1 = std::pow(2ull, 24) - 1ull;
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFF).toUint64() == int_2e24_m1 );

	uint64_t int_2e24 = std::pow(2ull, 24);
	REQUIRE( UArbBigInt::fromUint64(0x01000000).toUint64() == int_2e24 );

	uint64_t int_2e24_p1 = std::pow(2ull, 24) + 1ull;
	REQUIRE( UArbBigInt::fromUint64(0x01000001).toUint64() == int_2e24_p1 );

	uint64_t int_2e32_m1 = std::pow(2ull, 32) - 1ull;
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFF).toUint64() == int_2e32_m1 );

	uint64_t int_2e32 = std::pow(2ull, 32);
	REQUIRE( UArbBigInt::fromUint64(0x0100000000).toUint64() == int_2e32 );

	uint64_t int_2e32_p1 = std::pow(2ull, 32) + 1ull;
	REQUIRE( UArbBigInt::fromUint64(0x0100000001).toUint64() == int_2e32_p1 );

	uint64_t int_2e63_m1 = 0x7FFFFFFFFFFFFFFF; // 2^63 - 1
	REQUIRE( UArbBigInt::fromUint64(0x7FFFFFFFFFFFFFFF).toUint64() == int_2e63_m1 );

	uint64_t int_2e63 = 0x8000000000000000; // 2^63
	REQUIRE( UArbBigInt::fromUint64(0x8000000000000000).toUint64() == int_2e63 );

	uint64_t int_2e63_m1_mul2 = 0xFFFFFFFFFFFFFFFE; // (2^63 - 1) * 2
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFE).toUint64() == int_2e63_m1_mul2 );

	uint64_t int_2e63_m1_mul2_p1 = 0xFFFFFFFFFFFFFFFF; // (2^63 - 1) * 2 + 1
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF).toUint64() == int_2e63_m1_mul2_p1 );
}

TEST_CASE( "unsigned infinit big integer check word definitions for 64bit", "[UABigint]" ) {
	if (typeid(BIG_INT_WORD_TYPE) == typeid(uint8_t)) {
		REQUIRE( sizeof(BIG_INT_WORD_TYPE) == 1 );

		REQUIRE( BIG_INT_WORD_LOW_BIT_MASK == 0x0Full );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_LOW_BIT_MASK) == UArbBigInt::fromString("0F", 16) );

		REQUIRE( BIG_INT_WORD_HIGH_BIT_MASK == 0xF0ull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGH_BIT_MASK) == UArbBigInt::fromString("F0", 16) );

		REQUIRE( BIG_INT_WORD_MAX_VALUE == 0xFFull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_MAX_VALUE) == UArbBigInt::fromString("FF", 16) );

		REQUIRE( BIG_INT_BITS_PER_WORD == sizeof(BIG_INT_WORD_TYPE) * 8 );
		REQUIRE( BIG_INT_BITS_PER_WORD == 8 );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_BITS_PER_WORD) == UArbBigInt::fromString("8", 10) );

		REQUIRE( BIG_INT_WORD_HIGHEST_BIT == 0x80ull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == UArbBigInt::fromString("10000000", 2) );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == UArbBigInt::fromString("1", 2) << 7);
	} else if (typeid(BIG_INT_WORD_TYPE) == typeid(uint16_t)) {
		REQUIRE( sizeof(BIG_INT_WORD_TYPE) == 2 );

		REQUIRE( BIG_INT_WORD_LOW_BIT_MASK == 0x00FFull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_LOW_BIT_MASK) == UArbBigInt::fromString("00 FF", 16) );

		REQUIRE( BIG_INT_WORD_HIGH_BIT_MASK == 0xFF00ull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGH_BIT_MASK) == UArbBigInt::fromString("FF 00", 16) );

		REQUIRE( BIG_INT_WORD_MAX_VALUE == 0xFFFFull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_MAX_VALUE) == UArbBigInt::fromString("FF FF", 16) );

		REQUIRE( BIG_INT_BITS_PER_WORD == sizeof(BIG_INT_WORD_TYPE) * 8 );
		REQUIRE( BIG_INT_BITS_PER_WORD == 16 );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_BITS_PER_WORD) == UArbBigInt::fromString("16", 10) );

		REQUIRE( BIG_INT_WORD_HIGHEST_BIT == 0x8000ull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == UArbBigInt::fromString("10000000 00000000", 2) );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == UArbBigInt::fromString("1", 2) << 15);
	} else if (typeid(BIG_INT_WORD_TYPE) == typeid(uint32_t)) {
		REQUIRE( sizeof(BIG_INT_WORD_TYPE) == 4 );

		REQUIRE( BIG_INT_WORD_LOW_BIT_MASK == 0x0000FFFFull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_LOW_BIT_MASK) == UArbBigInt::fromString("00 00 FF FF", 16) );

		REQUIRE( BIG_INT_WORD_HIGH_BIT_MASK == 0xFFFF0000ull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGH_BIT_MASK) == UArbBigInt::fromString("FF FF 00 00", 16) );

		REQUIRE( BIG_INT_WORD_MAX_VALUE == 0xFFFFFFFF );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_MAX_VALUE) == UArbBigInt::fromString("FF FF FF FF", 16) );

		REQUIRE( BIG_INT_BITS_PER_WORD == sizeof(BIG_INT_WORD_TYPE) * 8 );
		REQUIRE( BIG_INT_BITS_PER_WORD == 32 );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_BITS_PER_WORD) == UArbBigInt::fromString("32", 10) );

		REQUIRE( BIG_INT_WORD_HIGHEST_BIT == 0x80000000 );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == UArbBigInt::fromString("10000000 00000000 00000000 00000000", 2) );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == UArbBigInt::fromString("1", 2) << 31);
	} else if (typeid(BIG_INT_WORD_TYPE) == typeid(uint64_t)) {
		REQUIRE( sizeof(BIG_INT_WORD_TYPE) == 8 );

		REQUIRE( BIG_INT_WORD_LOW_BIT_MASK == 0x00000000FFFFFFFFull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_LOW_BIT_MASK) == UArbBigInt::fromString("FF FF FF FF", 16) );

		REQUIRE( BIG_INT_WORD_HIGH_BIT_MASK == 0xFFFFFFFF00000000ull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGH_BIT_MASK) == UArbBigInt::fromString("FF FF FF FF 00 00 00 00", 16) );

		REQUIRE( BIG_INT_WORD_MAX_VALUE == 0xFFFFFFFFFFFFFFFFull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_MAX_VALUE) == UArbBigInt::fromString("FF FF FF FF FF FF FF FF", 16) );

		REQUIRE( BIG_INT_BITS_PER_WORD == sizeof(BIG_INT_WORD_TYPE) * 8 );
		REQUIRE( BIG_INT_BITS_PER_WORD == 64 );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_BITS_PER_WORD) == UArbBigInt::fromString("64", 10) );

		REQUIRE( BIG_INT_WORD_HIGHEST_BIT == 0x8000000000000000ull );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == UArbBigInt::fromString("10000000 00000000 00000000 00000000  00000000 00000000 00000000 00000000", 2) );
		REQUIRE( UArbBigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == UArbBigInt::fromString("1", 2) << 63);
	} else {
		REQUIRE(  std::string("") == std::string("unknowen BigInt word type BIG_INT_WORD_TYPE"));
	}
}

TEST_CASE( "unsigned infinit big integer to std:string hex", "[UABigint]" ) {
	// --- single byte big int creation ---

	REQUIRE( UArbBigInt(0).toStringHex() == std::string("0") );
	REQUIRE( UArbBigInt(1).toStringHex() == std::string("1") );
	REQUIRE( UArbBigInt(2).toStringHex() == std::string("2") );
	REQUIRE( UArbBigInt(3).toStringHex() == std::string("3") );
	REQUIRE( UArbBigInt(4).toStringHex() == std::string("4") );
	REQUIRE( UArbBigInt(5).toStringHex() == std::string("5") );
	REQUIRE( UArbBigInt(6).toStringHex() == std::string("6") );
	REQUIRE( UArbBigInt(7).toStringHex() == std::string("7") );
	REQUIRE( UArbBigInt(8).toStringHex() == std::string("8") );
	REQUIRE( UArbBigInt(9).toStringHex() == std::string("9") );
	REQUIRE( UArbBigInt(10).toStringHex() == std::string("A") );
	REQUIRE( UArbBigInt(11).toStringHex() == std::string("B") );
	REQUIRE( UArbBigInt(12).toStringHex() == std::string("C") );
	REQUIRE( UArbBigInt(13).toStringHex() == std::string("D") );
	REQUIRE( UArbBigInt(14).toStringHex() == std::string("E") );
	REQUIRE( UArbBigInt(15).toStringHex() == std::string("F") );
	REQUIRE( UArbBigInt(16).toStringHex() == std::string("10") );

	REQUIRE( UArbBigInt(66).toStringHex() == std::string("42") );
	REQUIRE( UArbBigInt(127).toStringHex() == std::string("7F") );
	REQUIRE( UArbBigInt(128).toStringHex() == std::string("80") );
	REQUIRE( UArbBigInt(255).toStringHex() == std::string("FF") );

	// --- use 64 bit conversion for big int creation ---

	REQUIRE( UArbBigInt::fromUint64(256).toStringHex() == std::string("100") );

	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFF).toStringHex() == std::string("FFFFFFFF") ); // 2^32 - 1
	REQUIRE( UArbBigInt::fromUint64(0x0100000000).toStringHex() == std::string("100000000") ); // 2^32
	REQUIRE( UArbBigInt::fromUint64(0x0100000001).toStringHex() == std::string("100000001") ); // 2^32 + 1

	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF).toStringHex() == std::string("FFFFFFFFFFFFFFFF") ); // 2^64 - 1
	REQUIRE( UArbBigInt::fromUint64(0xFEDCBA9876543210).toStringHex() == std::string("FEDCBA9876543210") );
	REQUIRE( UArbBigInt::fromUint64( 0xFEDCBA987654321).toStringHex() == std::string( "FEDCBA987654321") );
	REQUIRE( UArbBigInt::fromUint64(  0xFEDCBA98765432).toStringHex() == std::string(  "FEDCBA98765432") );
	REQUIRE( UArbBigInt::fromUint64(   0xFEDCBA9876543).toStringHex() == std::string(   "FEDCBA9876543") );
	REQUIRE( UArbBigInt::fromUint64(    0xFEDCBA987654).toStringHex() == std::string(    "FEDCBA987654") );
	REQUIRE( UArbBigInt::fromUint64(     0xFEDCBA98765).toStringHex() == std::string(     "FEDCBA98765") );
	REQUIRE( UArbBigInt::fromUint64(      0xFEDCBA9876).toStringHex() == std::string(      "FEDCBA9876") );
	REQUIRE( UArbBigInt::fromUint64(       0xFEDCBA987).toStringHex() == std::string(       "FEDCBA987") );
	REQUIRE( UArbBigInt::fromUint64(        0xFEDCBA98).toStringHex() == std::string(        "FEDCBA98") );
	REQUIRE( UArbBigInt::fromUint64(         0xFEDCBA9).toStringHex() == std::string(         "FEDCBA9") );
	REQUIRE( UArbBigInt::fromUint64(          0xFEDCBA).toStringHex() == std::string(          "FEDCBA") );
	REQUIRE( UArbBigInt::fromUint64(           0xFEDCB).toStringHex() == std::string(           "FEDCB") );
	REQUIRE( UArbBigInt::fromUint64(            0xFEDC).toStringHex() == std::string(            "FEDC") );
	REQUIRE( UArbBigInt::fromUint64(             0xFED).toStringHex() == std::string(             "FED") );
	REQUIRE( UArbBigInt::fromUint64(              0xFE).toStringHex() == std::string(              "FE") );
	REQUIRE( UArbBigInt::fromUint64(               0xF).toStringHex() == std::string(               "F") );
	REQUIRE( UArbBigInt::fromUint64(               0x0).toStringHex() == std::string(               "0") );

	// 128 bit test!
	REQUIRE( UArbBigInt::fromUint64(                    18446744073709551615ull).toStringHex()   == std::string(                 "FFFFFFFFFFFFFFFF") ); // 2^64 - 1
	REQUIRE((UArbBigInt::fromUint64(                    18446744073709551615ull) + UArbBigInt::ONE).toStringHex() == std::string(   "10000000000000000") ); // 2^64
	REQUIRE( UArbBigInt::fromString(                   "18446744073709551615", 10).toStringHex() == std::string(                 "FFFFFFFFFFFFFFFF") ); // 2^64 - 1
	REQUIRE( UArbBigInt::fromString(                   "18446744073709551616", 10).toStringHex() == std::string(                "10000000000000000") ); // 2^64
	REQUIRE( UArbBigInt::fromString(                 "4722366482869645213696", 10).toStringHex() == std::string(              "1000000000000000000") ); // 2^72
	REQUIRE( UArbBigInt::fromString(              "1208925819614629174706176", 10).toStringHex() == std::string(            "100000000000000000000") ); // 2^80
	REQUIRE( UArbBigInt::fromString(            "309485009821345068724781056", 10).toStringHex() == std::string(          "10000000000000000000000") ); // 2^88
	REQUIRE( UArbBigInt::fromString(          "79228162514264337593543950336", 10).toStringHex() == std::string(        "1000000000000000000000000") ); // 2^96
	REQUIRE( UArbBigInt::fromString(       "20282409603651670423947251286016", 10).toStringHex() == std::string(      "100000000000000000000000000") ); // 2^104
	REQUIRE( UArbBigInt::fromString(     "5192296858534827628530496329220096", 10).toStringHex() == std::string(    "10000000000000000000000000000") ); // 2^112
	REQUIRE( UArbBigInt::fromString(  "1329227995784915872903807060280344576", 10).toStringHex() == std::string(  "1000000000000000000000000000000") ); // 2^120
	REQUIRE( UArbBigInt::fromString(  "1329227995784915872903807060280344577", 10).toStringHex() == std::string(  "1000000000000000000000000000001") ); // 2^120 + 1
	REQUIRE( UArbBigInt::fromString(  "1329227995784915872903807060280344591", 10).toStringHex() == std::string(  "100000000000000000000000000000F") ); // 2^120 + 15
	REQUIRE( UArbBigInt::fromString("340282366920938463463374607431768211456", 10).toStringHex() == std::string("100000000000000000000000000000000") ); // 2^128
	REQUIRE( UArbBigInt::fromString("340282366920938463463374607431768211457", 10).toStringHex() == std::string("100000000000000000000000000000001") ); // 2^128 + 1
	REQUIRE( UArbBigInt::fromString("340282366920938463463374607431768211471", 10).toStringHex() == std::string("10000000000000000000000000000000F") ); // 2^128 + 15


	REQUIRE( UArbBigInt::fromUint64(0x121fa00ad77d7422ull).toStringHex() 					== std::string( "121FA00AD77D7422") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422", 16).toStringHex() 					== std::string( "121FA00AD77D7422") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d74222", 16).toStringHex() 				== std::string( "121FA00AD77D74222") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d742223", 16).toStringHex() 				== std::string( "121FA00AD77D742223") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236", 16).toStringHex() 				== std::string( "121FA00AD77D7422236") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d", 16).toStringHex() 				== std::string( "121FA00AD77D7422236D") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d8", 16).toStringHex() 			== std::string( "121FA00AD77D7422236D8") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88", 16).toStringHex() 			== std::string( "121FA00AD77D7422236D88") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88f", 16).toStringHex() 			== std::string( "121FA00AD77D7422236D88F") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe", 16).toStringHex() 			== std::string( "121FA00AD77D7422236D88FE") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5", 16).toStringHex() 		== std::string( "121FA00AD77D7422236D88FE5") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe56", 16).toStringHex() 		== std::string( "121FA00AD77D7422236D88FE56") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe561", 16).toStringHex() 		== std::string( "121FA00AD77D7422236D88FE561") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618", 16).toStringHex() 		== std::string( "121FA00AD77D7422236D88FE5618") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618c", 16).toStringHex() 	== std::string( "121FA00AD77D7422236D88FE5618C") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618cf", 16).toStringHex() 	== std::string( "121FA00AD77D7422236D88FE5618CF") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618cf0", 16).toStringHex() 	== std::string( "121FA00AD77D7422236D88FE5618CF0") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618cf00", 16).toStringHex() 	== std::string( "121FA00AD77D7422236D88FE5618CF00") );

	REQUIRE( UArbBigInt::fromUint64(                     1305938385386173474ull).toStringHex()   == std::string( "121FA00AD77D7422") );
	REQUIRE( UArbBigInt::fromString(                    "1305938385386173474", 10).toStringHex() == std::string( "121FA00AD77D7422") );
	REQUIRE( UArbBigInt::fromString(                   "20895014166178775586", 10).toStringHex() == std::string( "121FA00AD77D74222") );
	REQUIRE( UArbBigInt::fromString(                  "334320226658860409379", 10).toStringHex() == std::string( "121FA00AD77D742223") );
	REQUIRE( UArbBigInt::fromString(                 "5349123626541766550070", 10).toStringHex() == std::string( "121FA00AD77D7422236") );
	REQUIRE( UArbBigInt::fromString(                "85585978024668264801133", 10).toStringHex() == std::string( "121FA00AD77D7422236D") );
	REQUIRE( UArbBigInt::fromString(              "1369375648394692236818136", 10).toStringHex() == std::string( "121FA00AD77D7422236D8") );
	REQUIRE( UArbBigInt::fromString(             "21910010374315075789090184", 10).toStringHex() == std::string( "121FA00AD77D7422236D88") );
	REQUIRE( UArbBigInt::fromString(            "350560165989041212625442959", 10).toStringHex() == std::string( "121FA00AD77D7422236D88F") );
	REQUIRE( UArbBigInt::fromString(           "5608962655824659402007087358", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE") );
	REQUIRE( UArbBigInt::fromString(          "89743402493194550432113397733", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5") );
	REQUIRE( UArbBigInt::fromString(        "1435894439891112806913814363734", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE56") );
	REQUIRE( UArbBigInt::fromString(       "22974311038257804910621029819745", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE561") );
	REQUIRE( UArbBigInt::fromString(      "367588976612124878569936477115928", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618") );
	REQUIRE( UArbBigInt::fromString(     "5881423625793998057118983633854860", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618C") );
	REQUIRE( UArbBigInt::fromString(    "94102778012703968913903738141677775", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618CF") );
	REQUIRE( UArbBigInt::fromString(  "1505644448203263502622459810266844400", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618CF0") );
	REQUIRE( UArbBigInt::fromString( "24090311171252216041959356964269510400", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618CF00") );

	// --------
	REQUIRE( UArbBigInt::fromString("1e02bc1e8aa1d63b5b9ccf516f9d67d27b3c80b500001cbe991a08", 16).toStringHex()            == std::string("1E02BC1E8AA1D63B5B9CCF516F9D67D27B3C80B500001CBE991A08") );
	REQUIRE( UArbBigInt::fromString("12345678900000000000000000000000000000000000000000000123456789000", 10).toStringHex() == std::string("1E02BC1E8AA1D63B5B9CCF516F9D67D27B3C80B500001CBE991A08") );

	REQUIRE( UArbBigInt::fromString("123456789ABCDEF00000000000000000000000000000000000000000000123456789ABCDEF000", 16).toStringHex()                == std::string("123456789ABCDEF00000000000000000000000000000000000000000000123456789ABCDEF000") ); // 39 Bytes => 312 bit
	REQUIRE( UArbBigInt::fromString("37083108262515799557102920138478281554203075264980329467169710128521593951634998575520215040", 10).toStringHex() == std::string("123456789ABCDEF00000000000000000000000000000000000000000000123456789ABCDEF000") );
}

TEST_CASE( "unsigned infinit big integer to std:string dec", "[UABigint]" ) {
	// --- single byte big int creation ---

	REQUIRE( UArbBigInt(0).toStringDec() == std::string("0") );
	REQUIRE( UArbBigInt(1).toStringDec() == std::string("1") );
	REQUIRE( UArbBigInt(2).toStringDec() == std::string("2") );
	REQUIRE( UArbBigInt(3).toStringDec() == std::string("3") );
	REQUIRE( UArbBigInt(4).toStringDec() == std::string("4") );
	REQUIRE( UArbBigInt(5).toStringDec() == std::string("5") );
	REQUIRE( UArbBigInt(6).toStringDec() == std::string("6") );
	REQUIRE( UArbBigInt(7).toStringDec() == std::string("7") );
	REQUIRE( UArbBigInt(8).toStringDec() == std::string("8") );
	REQUIRE( UArbBigInt(9).toStringDec() == std::string("9") );
	REQUIRE( UArbBigInt(10).toStringDec() == std::string("10") );

	REQUIRE( UArbBigInt(0x42).toStringDec() == std::string("66") );
	REQUIRE( UArbBigInt(0x7F).toStringDec() == std::string("127") );
	REQUIRE( UArbBigInt(0x80).toStringDec() == std::string("128") );
	REQUIRE( UArbBigInt(0xFF).toStringDec() == std::string("255") );

	// --- use 64 bit conversion for big int creation ---

	REQUIRE( UArbBigInt::fromUint64(256).toStringDec() == std::string("256") );

	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFF).toStringDec() == std::string("4294967295") ); // 2^32 - 1
	REQUIRE( UArbBigInt::fromUint64(0x0100000000).toStringDec() == std::string("4294967296") ); // 2^32
	REQUIRE( UArbBigInt::fromUint64(0x0100000001).toStringDec() == std::string("4294967297") ); // 2^32 + 1

	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF).toStringDec() == std::string("18446744073709551615") ); // 2^64 - 1

	// 128 bit test!
	REQUIRE( UArbBigInt::fromUint64(                0xFFFFFFFFFFFFFFFF).toStringDec()      == std::string(                   "18446744073709551615") ); // 2^64 - 1
	REQUIRE( (UArbBigInt::fromUint64(               0xFFFFFFFFFFFFFFFF) + UArbBigInt::ONE).toStringDec() == std::string(         "18446744073709551616") ); // 2^64
	REQUIRE( UArbBigInt::fromString(                 "FFFFFFFFFFFFFFFF", 16).toStringDec() == std::string(                   "18446744073709551615") ); // 2^64 - 1
	REQUIRE( UArbBigInt::fromString(                "10000000000000000", 16).toStringDec() == std::string(                   "18446744073709551616") ); // 2^64
	REQUIRE( UArbBigInt::fromString(              "1000000000000000000", 16).toStringDec() == std::string(                 "4722366482869645213696") ); // 2^72
	REQUIRE( UArbBigInt::fromString(            "100000000000000000000", 16).toStringDec() == std::string(              "1208925819614629174706176") ); // 2^80
	REQUIRE( UArbBigInt::fromString(          "10000000000000000000000", 16).toStringDec() == std::string(            "309485009821345068724781056") ); // 2^88
	REQUIRE( UArbBigInt::fromString(        "1000000000000000000000000", 16).toStringDec() == std::string(          "79228162514264337593543950336") ); // 2^96
	REQUIRE( UArbBigInt::fromString(      "100000000000000000000000000", 16).toStringDec() == std::string(       "20282409603651670423947251286016") ); // 2^104
	REQUIRE( UArbBigInt::fromString(    "10000000000000000000000000000", 16).toStringDec() == std::string(     "5192296858534827628530496329220096") ); // 2^112
	REQUIRE( UArbBigInt::fromString(  "1000000000000000000000000000000", 16).toStringDec() == std::string(  "1329227995784915872903807060280344576") ); // 2^120
	REQUIRE( UArbBigInt::fromString(  "1000000000000000000000000000001", 16).toStringDec() == std::string(  "1329227995784915872903807060280344577") ); // 2^120 + 1
	REQUIRE( UArbBigInt::fromString(  "100000000000000000000000000000F", 16).toStringDec() == std::string(  "1329227995784915872903807060280344591") ); // 2^120 + 15
	REQUIRE( UArbBigInt::fromString("100000000000000000000000000000000", 16).toStringDec() == std::string("340282366920938463463374607431768211456") ); // 2^128
	REQUIRE( UArbBigInt::fromString("100000000000000000000000000000001", 16).toStringDec() == std::string("340282366920938463463374607431768211457") ); // 2^128 + 1
	REQUIRE( UArbBigInt::fromString("10000000000000000000000000000000F", 16).toStringDec() == std::string("340282366920938463463374607431768211471") ); // 2^128 + 15

	//REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618cf", 16).toStringDec() == std::string( "94102778012703968913903738141677775") );
	//REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618cf00", 16).toStringDec() == std::string( "24090311171252216041959356964269510400") );

	//REQUIRE( UArbBigInt::fromString( "94102778012703968913903738141677775", 10).toStringDec() == std::string( "94102778012703968913903738141677775") );
	//REQUIRE( UArbBigInt::fromString( "24090311171252216041959356964269510400", 10).toStringDec() == std::string( "24090311171252216041959356964269510400") );

	// --------
	REQUIRE( UArbBigInt::fromUint64(0x121fa00ad77d7422ull).toStringDec()                         == std::string(                    "1305938385386173474") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422", 16).toStringDec()                       == std::string(                    "1305938385386173474") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d74222", 16).toStringDec()                      == std::string(                   "20895014166178775586") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d742223", 16).toStringDec()                     == std::string(                  "334320226658860409379") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236", 16).toStringDec()                    == std::string(                 "5349123626541766550070") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d", 16).toStringDec()                   == std::string(                "85585978024668264801133") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d8", 16).toStringDec()                  == std::string(              "1369375648394692236818136") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88", 16).toStringDec()                 == std::string(             "21910010374315075789090184") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88f", 16).toStringDec()                == std::string(            "350560165989041212625442959") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe", 16).toStringDec()               == std::string(           "5608962655824659402007087358") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5", 16).toStringDec()              == std::string(          "89743402493194550432113397733") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe56", 16).toStringDec()             == std::string(        "1435894439891112806913814363734") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe561", 16).toStringDec()            == std::string(       "22974311038257804910621029819745") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618", 16).toStringDec()           == std::string(      "367588976612124878569936477115928") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618c", 16).toStringDec()          == std::string(     "5881423625793998057118983633854860") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618cf", 16).toStringDec()         == std::string(    "94102778012703968913903738141677775") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618cf0", 16).toStringDec()        == std::string(  "1505644448203263502622459810266844400") );
	REQUIRE( UArbBigInt::fromString( "121fa00ad77d7422236d88fe5618cf00", 16).toStringDec()       == std::string( "24090311171252216041959356964269510400") );

	REQUIRE( UArbBigInt::fromUint64(                     1305938385386173474ull  ).toStringDec() == std::string(                    "1305938385386173474") );
	REQUIRE( UArbBigInt::fromString(                    "1305938385386173474", 10).toStringDec() == std::string(                    "1305938385386173474") );
	REQUIRE( UArbBigInt::fromString(                   "20895014166178775586", 10).toStringDec() == std::string(                   "20895014166178775586") );
	REQUIRE( UArbBigInt::fromString(                  "334320226658860409379", 10).toStringDec() == std::string(                  "334320226658860409379") );
	REQUIRE( UArbBigInt::fromString(                 "5349123626541766550070", 10).toStringDec() == std::string(                 "5349123626541766550070") );
	REQUIRE( UArbBigInt::fromString(                "85585978024668264801133", 10).toStringDec() == std::string(                "85585978024668264801133") );
	REQUIRE( UArbBigInt::fromString(              "1369375648394692236818136", 10).toStringDec() == std::string(              "1369375648394692236818136") );
	REQUIRE( UArbBigInt::fromString(             "21910010374315075789090184", 10).toStringDec() == std::string(             "21910010374315075789090184") );
	REQUIRE( UArbBigInt::fromString(            "350560165989041212625442959", 10).toStringDec() == std::string(            "350560165989041212625442959") );
	REQUIRE( UArbBigInt::fromString(           "5608962655824659402007087358", 10).toStringDec() == std::string(           "5608962655824659402007087358") );
	REQUIRE( UArbBigInt::fromString(          "89743402493194550432113397733", 10).toStringDec() == std::string(          "89743402493194550432113397733") );
	REQUIRE( UArbBigInt::fromString(        "1435894439891112806913814363734", 10).toStringDec() == std::string(        "1435894439891112806913814363734") );
	REQUIRE( UArbBigInt::fromString(       "22974311038257804910621029819745", 10).toStringDec() == std::string(       "22974311038257804910621029819745") );
	REQUIRE( UArbBigInt::fromString(      "367588976612124878569936477115928", 10).toStringDec() == std::string(      "367588976612124878569936477115928") );
	REQUIRE( UArbBigInt::fromString(     "5881423625793998057118983633854860", 10).toStringDec() == std::string(     "5881423625793998057118983633854860") );
	REQUIRE( UArbBigInt::fromString(    "94102778012703968913903738141677775", 10).toStringDec() == std::string(    "94102778012703968913903738141677775") );
	REQUIRE( UArbBigInt::fromString(  "1505644448203263502622459810266844400", 10).toStringDec() == std::string(  "1505644448203263502622459810266844400") );
	REQUIRE( UArbBigInt::fromString( "24090311171252216041959356964269510400", 10).toStringDec() == std::string( "24090311171252216041959356964269510400") );

	// --------
	REQUIRE( UArbBigInt::fromString("1e02bc1e8aa1d63b5b9ccf516f9d67d27b3c80b500001cbe991a08", 16).toStringDec()            == std::string("12345678900000000000000000000000000000000000000000000123456789000") );
	REQUIRE( UArbBigInt::fromString("12345678900000000000000000000000000000000000000000000123456789000", 10).toStringDec() == std::string("12345678900000000000000000000000000000000000000000000123456789000") );

	REQUIRE( UArbBigInt::fromString("123456789ABCDEF00000000000000000000000000000000000000000000123456789ABCDEF000", 16).toStringDec()                == std::string("37083108262515799557102920138478281554203075264980329467169710128521593951634998575520215040") ); // 39 Bytes => 312 bit
	REQUIRE( UArbBigInt::fromString("37083108262515799557102920138478281554203075264980329467169710128521593951634998575520215040", 10).toStringDec() == std::string("37083108262515799557102920138478281554203075264980329467169710128521593951634998575520215040") );
}

TEST_CASE( "unsigned infinit big integer from std:string", "[UABigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( UArbBigInt::fromString( "0", 10).toUint64() 	==   0 );
	REQUIRE( UArbBigInt::fromString( "1", 10).toUint64() 	==   1 );
	REQUIRE( UArbBigInt::fromString( "2", 10).toUint64() 	==   2 );
	REQUIRE( UArbBigInt::fromString( "3", 10).toUint64() 	==   3 );
	REQUIRE( UArbBigInt::fromString( "4", 10).toUint64() 	==   4 );
	REQUIRE( UArbBigInt::fromString( "5", 10).toUint64() 	==   5 );
	REQUIRE( UArbBigInt::fromString( "6", 10).toUint64() 	==   6 );
	REQUIRE( UArbBigInt::fromString( "7", 10).toUint64() 	==   7 );
	REQUIRE( UArbBigInt::fromString( "8", 10).toUint64() 	==   8 );
	REQUIRE( UArbBigInt::fromString( "9", 10).toUint64() 	==   9 );
	REQUIRE( UArbBigInt::fromString("10", 10).toUint64() 	==  10 );
	REQUIRE( UArbBigInt::fromString("77", 10).toUint64() 	==  77 );
	REQUIRE( UArbBigInt::fromString("127", 10).toUint64() 	== 127 );
	REQUIRE( UArbBigInt::fromString("128", 10).toUint64() 	== 128 );
	REQUIRE( UArbBigInt::fromString("255", 10).toUint64() 	== 255 );


	REQUIRE( UArbBigInt::fromString("0", 16).toUint64() 	==  0 );
	REQUIRE( UArbBigInt::fromString("1", 16).toUint64() 	==  1 );
	REQUIRE( UArbBigInt::fromString("2", 16).toUint64() 	==  2 );
	REQUIRE( UArbBigInt::fromString("3", 16).toUint64() 	==  3 );
	REQUIRE( UArbBigInt::fromString("4", 16).toUint64() 	==  4 );
	REQUIRE( UArbBigInt::fromString("5", 16).toUint64() 	==  5 );
	REQUIRE( UArbBigInt::fromString("6", 16).toUint64() 	==  6 );
	REQUIRE( UArbBigInt::fromString("7", 16).toUint64() 	==  7 );
	REQUIRE( UArbBigInt::fromString("8", 16).toUint64() 	==  8 );
	REQUIRE( UArbBigInt::fromString("9", 16).toUint64() 	==  9 );

	REQUIRE( UArbBigInt::fromString("a", 16).toUint64() 	== 10 );
	REQUIRE( UArbBigInt::fromString("b", 16).toUint64() 	== 11 );
	REQUIRE( UArbBigInt::fromString("c", 16).toUint64() 	== 12 );
	REQUIRE( UArbBigInt::fromString("d", 16).toUint64() 	== 13 );
	REQUIRE( UArbBigInt::fromString("e", 16).toUint64() 	== 14 );
	REQUIRE( UArbBigInt::fromString("f", 16).toUint64() 	== 15 );

	REQUIRE( UArbBigInt::fromString("A", 16).toUint64() 	== 10 );
	REQUIRE( UArbBigInt::fromString("B", 16).toUint64() 	== 11 );
	REQUIRE( UArbBigInt::fromString("C", 16).toUint64() 	== 12 );
	REQUIRE( UArbBigInt::fromString("D", 16).toUint64() 	== 13 );
	REQUIRE( UArbBigInt::fromString("E", 16).toUint64() 	== 14 );
	REQUIRE( UArbBigInt::fromString("F", 16).toUint64() 	== 15 );

	REQUIRE( UArbBigInt::fromString("7F", 16).toUint64()	== 127 );
	REQUIRE( UArbBigInt::fromString("80", 16).toUint64()	== 128 );
	REQUIRE( UArbBigInt::fromString("FF", 16).toUint64()	== 255 );

	// leading zeros
	REQUIRE( UArbBigInt::fromString(  "01", 10).toUint64() 	==   1 );
	REQUIRE( UArbBigInt::fromString( "001", 10).toUint64() 	==   1 );
	REQUIRE( UArbBigInt::fromString("0256", 10).toUint64() 	==   256 );

	REQUIRE( UArbBigInt::fromString(  "00", 16).toUint64() 	==   0 );
	REQUIRE( UArbBigInt::fromString(  "01", 16).toUint64() 	==   1 );
	REQUIRE( UArbBigInt::fromString(  "0f", 16).toUint64() 	==   15 );
	REQUIRE( UArbBigInt::fromString("000A", 16).toUint64() 	==   10 );
	REQUIRE( UArbBigInt::fromString("00ff", 16).toUint64() 	==   255 );
	
	REQUIRE( UArbBigInt::fromString("00 00 00 00   00 00 00 00   00 00 00 00   00 00 00 00   00 00 00 09", 16).toUint64() 	==   9 ); // 160 bits ful of zeros:  that is is even for 64 bit words an interesting leading zero test

	// 2 Bytes (16 bit)
	REQUIRE( UArbBigInt::fromString("256", 10).toUint64() == 256 ); // 2^16
	REQUIRE( UArbBigInt::fromString("0100", 16).toUint64() == 256 );

	// 4 Bytes (32 bit)
	REQUIRE( UArbBigInt::fromString("4294967295", 10).toUint64() == 0xFFFFFFFFull ); // 2^32 - 1
	REQUIRE( UArbBigInt::fromString("FFFFFFFF", 16).toUint64() == 0xFFFFFFFFull );
	REQUIRE( UArbBigInt::fromString("01234567", 16).toUint64() == 0x01234567ull );

	// 8 Bytes (64 bit)
	REQUIRE( UArbBigInt::fromString("4294967296", 10).toUint64() == 0x0100000000ull ); // 2^32
	REQUIRE( UArbBigInt::fromString("0100000000", 16).toUint64() == 0x0100000000ull );
	REQUIRE( UArbBigInt::fromString("4294967297", 10).toUint64() == 0x0100000001ull ); // 2^32 + 1
	REQUIRE( UArbBigInt::fromString("0100000001", 16).toUint64() == 0x0100000001ull );
	REQUIRE( UArbBigInt::fromString("0123456789ABCDEF", 16).toUint64() == 0x0123456789ABCDEFull );
	REQUIRE( UArbBigInt::fromString("fedcba9876543210", 16).toUint64() == 0xFEDCBA9876543210ull );


	REQUIRE( UArbBigInt::fromString("18446744073709551615", 10).toUint64() 	== 0xFFFFFFFFFFFFFFFFull ); // 2^64 - 1
	REQUIRE( UArbBigInt::fromString("FFFFFFFFFFFFFFFF", 16).toUint64() 		== 0xFFFFFFFFFFFFFFFFull );

	// --- use 65 bit conversion for big int reference creation ---
	// this uses also the BIG int == operator, therefore a failed test could als be a problem of the == operator implementation
	REQUIRE( UArbBigInt::fromString("18446744073709551616", 10) == (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE) ); // 2^64
	REQUIRE( UArbBigInt::fromString("010000000000000000", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE) ); // 2^64
	REQUIRE( UArbBigInt::fromString("010000000000000001", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x01)) );
	REQUIRE( UArbBigInt::fromString("010000000000000002", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x02)) );
	REQUIRE( UArbBigInt::fromString("010000000000000003", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x03)) );
	REQUIRE( UArbBigInt::fromString("010000000000000004", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x04)) );
	REQUIRE( UArbBigInt::fromString("010000000000000005", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x05)) );
	REQUIRE( UArbBigInt::fromString("010000000000000006", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x06)) );
	REQUIRE( UArbBigInt::fromString("010000000000000007", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x07)) );
	REQUIRE( UArbBigInt::fromString("010000000000000008", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x08)) );
	REQUIRE( UArbBigInt::fromString("010000000000000009", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x09)) );
	REQUIRE( UArbBigInt::fromString("01000000000000000A", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x0A)) );
	REQUIRE( UArbBigInt::fromString("01000000000000000B", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x0B)) );
	REQUIRE( UArbBigInt::fromString("01000000000000000C", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x0C)) );
	REQUIRE( UArbBigInt::fromString("01000000000000000D", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x0D)) );
	REQUIRE( UArbBigInt::fromString("01000000000000000E", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x0E)) );
	REQUIRE( UArbBigInt::fromString("01000000000000000F", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0x0F)) );
	REQUIRE( UArbBigInt::fromString("0100000000000000Fe", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0xFE)) );
	REQUIRE( UArbBigInt::fromString("0100000000000000Ff", 16) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE + UArbBigInt(0xFF)) );


	// ---- ignore blank
	REQUIRE( UArbBigInt::fromString(" 1 ", 10) 	== UArbBigInt::fromUint64(1ull) );
	REQUIRE( UArbBigInt::fromString(" 1 1 ", 10) 	== UArbBigInt::fromUint64(11ull) );
	REQUIRE( UArbBigInt::fromString(" 222 111 000 ", 10) 	== UArbBigInt::fromUint64(222111000ull) );
	REQUIRE( UArbBigInt::fromString(" 000 111 222  ", 10) 	== UArbBigInt::fromUint64(111222ull) );
	REQUIRE( UArbBigInt::fromString("        1 2 3 4 5 6 7 8 9 0      ", 10) 	== UArbBigInt::fromUint64(1234567890ull) );
	
	REQUIRE( UArbBigInt::fromString("01 F3 86 9C 69 BB 1C 01", 16) 	== UArbBigInt::fromUint64(0x01F3869C69BB1C01ull) );
	REQUIRE( UArbBigInt::fromString("140 604 019 725 507 585", 10) 	== UArbBigInt::fromUint64(0x01F3869C69BB1C01ull) );
	REQUIRE( UArbBigInt::fromString("123 456 789 000 000 321", 10) 	== UArbBigInt::fromUint64(123456789000000321ull) );
}

TEST_CASE( "unsigned infinit big integer comparisons", "[UABigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( UArbBigInt(1) != UArbBigInt::ZERO );
	REQUIRE( UArbBigInt(0) != UArbBigInt::ONE );

	REQUIRE( UArbBigInt(0) == UArbBigInt::ZERO );
	REQUIRE( UArbBigInt(0) <= UArbBigInt::ZERO );
	REQUIRE( UArbBigInt(0) >= UArbBigInt::ZERO );

	REQUIRE( UArbBigInt(0) < UArbBigInt::ONE );
	REQUIRE( UArbBigInt(1) > UArbBigInt::ZERO );

	REQUIRE( UArbBigInt(10) >  UArbBigInt(9) );
	REQUIRE( UArbBigInt(10) >= UArbBigInt(9) );
	REQUIRE( UArbBigInt(9) 	<  UArbBigInt::TEN );
	REQUIRE( UArbBigInt(9) 	<= UArbBigInt::TEN );
	REQUIRE( UArbBigInt(10) <= UArbBigInt::TEN );
	REQUIRE( UArbBigInt(10) >= UArbBigInt::TEN );

	REQUIRE( UArbBigInt(255) == UArbBigInt::fromUint64(0xFF) );
	REQUIRE( UArbBigInt(255) <= UArbBigInt::fromUint64(0xFF) );
	REQUIRE( UArbBigInt(255) >= UArbBigInt::fromUint64(0xFF) );

	REQUIRE( UArbBigInt(0) 		<  UArbBigInt(255) );
	REQUIRE( UArbBigInt(0) 		<= UArbBigInt(255) );
	REQUIRE( UArbBigInt(255) 	>  UArbBigInt(0) );
	REQUIRE( UArbBigInt(255) 	>= UArbBigInt(0) );

	REQUIRE( UArbBigInt(1) 		<  UArbBigInt(255) );
	REQUIRE( UArbBigInt(1) 		<= UArbBigInt(255) );
	REQUIRE( UArbBigInt(255) 	>  UArbBigInt(1) );
	REQUIRE( UArbBigInt(255) 	>= UArbBigInt(1) );

	REQUIRE( UArbBigInt(245) 	<  UArbBigInt(255) );
	REQUIRE( UArbBigInt(245) 	<= UArbBigInt(255) );
	REQUIRE( UArbBigInt(255) 	>  UArbBigInt(245) );
	REQUIRE( UArbBigInt(255) 	>= UArbBigInt(245) );

	// 2 Bytes (16 bit)
	REQUIRE( UArbBigInt(255) 				<  UArbBigInt::fromUint64(0x0100) );
	REQUIRE( UArbBigInt(255) 				<= UArbBigInt::fromUint64(0x0100) );
	REQUIRE( UArbBigInt::fromUint64(0x0100) >  UArbBigInt(255) );
	REQUIRE( UArbBigInt::fromUint64(0x0100) >= UArbBigInt(255) );

	REQUIRE( UArbBigInt::fromUint64(0x0100) == UArbBigInt::fromUint64(0x0100) );
	REQUIRE( UArbBigInt::fromUint64(0x0100) <= UArbBigInt::fromUint64(0x0100) );
	REQUIRE( UArbBigInt::fromUint64(0x0100) >= UArbBigInt::fromUint64(0x0100) );

	REQUIRE( UArbBigInt::fromUint64(0x0101) >  UArbBigInt::fromUint64(0x0100) );
	REQUIRE( UArbBigInt::fromUint64(0x0101) >= UArbBigInt::fromUint64(0x0100) );
	REQUIRE( UArbBigInt::fromUint64(0x0101) <  UArbBigInt::fromUint64(0x0102) );
	REQUIRE( UArbBigInt::fromUint64(0x0101) <= UArbBigInt::fromUint64(0x0102) );

	// 8 Bytes (64bit)
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFE) != UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( UArbBigInt::fromUint64(0xEFFFFFFFFFFFFFFF) != UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) == UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) <= UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) >= UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFE) <  UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) >  UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFE) );

	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF00) >  UArbBigInt(1) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF00) >= UArbBigInt::ONE );
	REQUIRE( UArbBigInt::ONE 							<  UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF00) );
	REQUIRE( UArbBigInt(1) 								<= UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF00) );

	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) != UArbBigInt::fromUint64(0x01) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) >  UArbBigInt::fromUint64(0x01) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) >= UArbBigInt::fromUint64(0x01) );
	REQUIRE( UArbBigInt::fromUint64(0x01) 				<  UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) );
	REQUIRE( UArbBigInt::fromUint64(0x01) 				<= UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) );

	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) != UArbBigInt::fromUint64(0xFF01) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) >  UArbBigInt::fromUint64(0xFF01) );
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) >= UArbBigInt::fromUint64(0xFF01) );
	REQUIRE( UArbBigInt::fromUint64(0xFF01) 			<  UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) );
	REQUIRE( UArbBigInt::fromUint64(0xFF01) 			<= UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) );

	//REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) != UArbBigInt::fromUint64(0xFFFFFFFFFFFFFF01) );

	// 9 Bytes (65bit)
	REQUIRE(  UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 						!= (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(1)) );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt::ONE) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(1)) );
	REQUIRE(  UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 						<  (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(1)) );
	REQUIRE(  UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 						<= (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(1)) );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(1)) 		>   UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(1)) 		>=  UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );

	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt::TEN) 	!= (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(11)) );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt::TEN) 	== (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(10)) );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt::TEN)		<  (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(11)) );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt::TEN)		<= (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(11)) );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(11)) 		>  (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(10)) );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(11)) 		>= (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(10)) );

	//REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(11)) 	!=  (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt(11)) );
}

TEST_CASE( "unsigned infinit big integer shift left", "[UABigint]" ) {

	// 1 Byte (8bit)
	REQUIRE( UArbBigInt::fromString("1", 2) <<  0 == UArbBigInt::fromString("1", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) <<  1 == UArbBigInt::fromString("10", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) <<  2 == UArbBigInt::fromString("100", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) <<  3 == UArbBigInt::fromString("1000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) <<  4 == UArbBigInt::fromString("10000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) <<  5 == UArbBigInt::fromString("100000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) <<  6 == UArbBigInt::fromString("1000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) <<  7 == UArbBigInt::fromString("10000000", 2) );

	// 2 Byte (16bit)
	REQUIRE( UArbBigInt::fromString("1", 2) <<  8 == UArbBigInt::fromString("10000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) <<  9 == UArbBigInt::fromString("10000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 10 == UArbBigInt::fromString("10000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 11 == UArbBigInt::fromString("10000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 12 == UArbBigInt::fromString("10000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 13 == UArbBigInt::fromString("10000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 14 == UArbBigInt::fromString("10000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 15 == UArbBigInt::fromString("10000000 00000000", 2) );

	REQUIRE( UArbBigInt::fromString("10000000", 2) <<  0 == UArbBigInt::fromString("10000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) <<  1 == UArbBigInt::fromString("10000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) <<  2 == UArbBigInt::fromString("10000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) <<  3 == UArbBigInt::fromString("10000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) <<  4 == UArbBigInt::fromString("10000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) <<  5 == UArbBigInt::fromString("10000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) <<  6 == UArbBigInt::fromString("10000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) <<  7 == UArbBigInt::fromString("10000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) <<  8 == UArbBigInt::fromString("10000000 00000000", 2) );

	// 3 Byte (24bit)
	REQUIRE( UArbBigInt::fromString("1", 2) << 16 == UArbBigInt::fromString("10000000 00000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 17 == UArbBigInt::fromString("10000000 00000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 18 == UArbBigInt::fromString("10000000 00000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 19 == UArbBigInt::fromString("10000000 00000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 20 == UArbBigInt::fromString("10000000 00000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 21 == UArbBigInt::fromString("10000000 00000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 22 == UArbBigInt::fromString("10000000 00000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 23 == UArbBigInt::fromString("10000000 00000000 00000000", 2) );

	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2) <<  0 == UArbBigInt::fromString("10000000 00000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2) <<  1 == UArbBigInt::fromString("10000000 00000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2) <<  2 == UArbBigInt::fromString("10000000 00000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2) <<  3 == UArbBigInt::fromString("10000000 00000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2) <<  4 == UArbBigInt::fromString("10000000 00000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2) <<  5 == UArbBigInt::fromString("10000000 00000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2) <<  6 == UArbBigInt::fromString("10000000 00000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2) <<  7 == UArbBigInt::fromString("10000000 00000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2) <<  8 == UArbBigInt::fromString("10000000 00000000 00000000", 2) );

	// 4 Byte (32bit)
	REQUIRE( UArbBigInt::fromString("1", 2) << 24 == UArbBigInt::fromString("10000000 00000000 00000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 25 == UArbBigInt::fromString("10000000 00000000 00000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 26 == UArbBigInt::fromString("10000000 00000000 00000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 27 == UArbBigInt::fromString("10000000 00000000 00000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 28 == UArbBigInt::fromString("10000000 00000000 00000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 29 == UArbBigInt::fromString("10000000 00000000 00000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 30 == UArbBigInt::fromString("10000000 00000000 00000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 31 == UArbBigInt::fromString("10000000 00000000 00000000 00000000", 2) );

	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2) <<  0 == UArbBigInt::fromString("10000000 00000000 00000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2) <<  1 == UArbBigInt::fromString("10000000 00000000 00000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2) <<  2 == UArbBigInt::fromString("10000000 00000000 00000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2) <<  3 == UArbBigInt::fromString("10000000 00000000 00000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2) <<  4 == UArbBigInt::fromString("10000000 00000000 00000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2) <<  5 == UArbBigInt::fromString("10000000 00000000 00000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2) <<  6 == UArbBigInt::fromString("10000000 00000000 00000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2) <<  7 == UArbBigInt::fromString("10000000 00000000 00000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2) <<  8 == UArbBigInt::fromString("10000000 00000000 00000000 00000000", 2) );

	// 5 Byte (40bit)
	REQUIRE( UArbBigInt::fromString("1", 2) << 32 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 33 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 34 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 35 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 36 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 37 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 38 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 39 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000", 2) );

	REQUIRE( UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  0 == UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  1 == UArbBigInt::fromString("10000000 00000000 10110111 00000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  2 == UArbBigInt::fromString("10000000 00000000 10110111 00000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  3 == UArbBigInt::fromString("10000000 00000000 10110111 00000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  4 == UArbBigInt::fromString("10000000 00000000 10110111 00000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  5 == UArbBigInt::fromString("10000000 00000000 10110111 00000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  6 == UArbBigInt::fromString("10000000 00000000 10110111 00000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  7 == UArbBigInt::fromString("10000000 00000000 10110111 00000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  8 == UArbBigInt::fromString("10000000 00000000 10110111 00000000 00000000", 2) );

	// 8 Byte (64bit)
	REQUIRE( UArbBigInt::fromString("1", 2) << 56 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 57 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 58 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 59 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 60 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 61 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 62 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 63 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) );

	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  0 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  1 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  2 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  3 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  4 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  5 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  6 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  7 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  8 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 00000000", 2) );

	// 9 Byte (72bit)
	REQUIRE( UArbBigInt::fromString("1", 2) << 64 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 65 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 66 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 67 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 68 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 69 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 70 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("1", 2) << 71 == UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) );

	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  0 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  1 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 0", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  2 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 00", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  3 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  4 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 0000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  5 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 00000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  6 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  7 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 0000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  8 == UArbBigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 00000000", 2) );


	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   0 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                       1) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   1 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                       2) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   2 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                       4) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   3 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                       8) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   4 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                      16) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   5 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                      32) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   6 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                      64) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   7 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                     128) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   8 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                     256) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   9 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                     512) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  10 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                    1024) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  11 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                    2048) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  12 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                    4096) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  13 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                    8192) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  14 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                   16384) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  15 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                   32768) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  16 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                   65536) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  17 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                                  131072) );

	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  63 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64(                     9223372036854775808ull) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  64 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                   "18446744073709551616", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  65 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                   "36893488147419103232", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  66 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                   "73786976294838206464", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  67 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                  "147573952589676412928", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  68 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                  "295147905179352825856", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  69 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                  "590295810358705651712", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  70 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                 "1180591620717411303424", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  71 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                 "2361183241434822606848", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  72 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                 "4722366482869645213696", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  73 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString(                 "9444732965739290427392", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) << 127 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString("170141183460469231731687303715884105728", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) << 128 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString("340282366920938463463374607431768211456", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) << 129 == UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromString("680564733841876926926749214863536422912", 10) );
}

TEST_CASE( "unsigned infinit big integer shift right", "[UABigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  0 == UArbBigInt::fromString("10000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  1 == UArbBigInt::fromString( "1000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  2 == UArbBigInt::fromString(  "100000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  3 == UArbBigInt::fromString(   "10000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  4 == UArbBigInt::fromString(    "1000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  5 == UArbBigInt::fromString(     "100", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  6 == UArbBigInt::fromString(      "10", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  7 == UArbBigInt::fromString(       "1", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  8 == UArbBigInt::fromString(       "0", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >>  9 == UArbBigInt::fromString(       "0", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2) >> 16 == UArbBigInt::fromString(       "0", 2) );

	// 2 Byte (16bit)
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  0 == UArbBigInt::fromString("1000001100101101", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  1 == UArbBigInt::fromString("0100000110010110", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  2 == UArbBigInt::fromString("0010000011001011", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  3 == UArbBigInt::fromString("0001000001100101", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  4 == UArbBigInt::fromString("0000100000110010", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  5 == UArbBigInt::fromString("0000010000011001", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  6 == UArbBigInt::fromString("0000001000001100", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  7 == UArbBigInt::fromString("0000000100000110", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  8 == UArbBigInt::fromString("0000000010000011", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >>  9 == UArbBigInt::fromString("0000000001000001", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >> 10 == UArbBigInt::fromString("0000000000100000", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >> 11 == UArbBigInt::fromString("0000000000010000", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >> 12 == UArbBigInt::fromString("0000000000001000", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >> 13 == UArbBigInt::fromString("0000000000000100", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >> 14 == UArbBigInt::fromString("0000000000000010", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >> 15 == UArbBigInt::fromString("0000000000000001", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >> 16 == UArbBigInt::fromString("0000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >> 17 == UArbBigInt::fromString("0000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000011 00101101", 2) >> 32 == UArbBigInt::fromString("0000000000000000", 2) );

	// 8 Byte (64bit)
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   0 == UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   1 == UArbBigInt::fromString("0000000010000110110000000101010100101010100011000100100111000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   2 == UArbBigInt::fromString("0000000001000011011000000010101010010101010001100010010011100000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   3 == UArbBigInt::fromString("0000000000100001101100000001010101001010101000110001001001110000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   4 == UArbBigInt::fromString("0000000000010000110110000000101010100101010100011000100100111000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   5 == UArbBigInt::fromString("0000000000001000011011000000010101010010101010001100010010011100", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   6 == UArbBigInt::fromString("0000000000000100001101100000001010101001010101000110001001001110", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   7 == UArbBigInt::fromString("0000000000000010000110110000000101010100101010100011000100100111", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   8 == UArbBigInt::fromString("0000000000000001000011011000000010101010010101010001100010010011", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   9 == UArbBigInt::fromString("0000000000000000100001101100000001010101001010101000110001001001", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  10 == UArbBigInt::fromString("0000000000000000010000110110000000101010100101010100011000100100", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  11 == UArbBigInt::fromString("0000000000000000001000011011000000010101010010101010001100010010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  12 == UArbBigInt::fromString("0000000000000000000100001101100000001010101001010101000110001001", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  13 == UArbBigInt::fromString("0000000000000000000010000110110000000101010100101010100011000100", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  14 == UArbBigInt::fromString("0000000000000000000001000011011000000010101010010101010001100010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  15 == UArbBigInt::fromString("0000000000000000000000100001101100000001010101001010101000110001", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  16 == UArbBigInt::fromString("0000000000000000000000010000110110000000101010100101010100011000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  17 == UArbBigInt::fromString("0000000000000000000000001000011011000000010101010010101010001100", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  18 == UArbBigInt::fromString("0000000000000000000000000100001101100000001010101001010101000110", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  19 == UArbBigInt::fromString("0000000000000000000000000010000110110000000101010100101010100011", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  20 == UArbBigInt::fromString("0000000000000000000000000001000011011000000010101010010101010001", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  21 == UArbBigInt::fromString("0000000000000000000000000000100001101100000001010101001010101000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  22 == UArbBigInt::fromString("0000000000000000000000000000010000110110000000101010100101010100", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  23 == UArbBigInt::fromString("0000000000000000000000000000001000011011000000010101010010101010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  24 == UArbBigInt::fromString("0000000000000000000000000000000100001101100000001010101001010101", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  25 == UArbBigInt::fromString("0000000000000000000000000000000010000110110000000101010100101010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  26 == UArbBigInt::fromString("0000000000000000000000000000000001000011011000000010101010010101", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  27 == UArbBigInt::fromString("0000000000000000000000000000000000100001101100000001010101001010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  28 == UArbBigInt::fromString("0000000000000000000000000000000000010000110110000000101010100101", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  29 == UArbBigInt::fromString("0000000000000000000000000000000000001000011011000000010101010010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  30 == UArbBigInt::fromString("0000000000000000000000000000000000000100001101100000001010101001", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  31 == UArbBigInt::fromString("0000000000000000000000000000000000000010000110110000000101010100", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  32 == UArbBigInt::fromString("0000000000000000000000000000000000000001000011011000000010101010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  33 == UArbBigInt::fromString("0000000000000000000000000000000000000000100001101100000001010101", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  34 == UArbBigInt::fromString("0000000000000000000000000000000000000000010000110110000000101010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  35 == UArbBigInt::fromString("0000000000000000000000000000000000000000001000011011000000010101", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  36 == UArbBigInt::fromString("0000000000000000000000000000000000000000000100001101100000001010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  37 == UArbBigInt::fromString("0000000000000000000000000000000000000000000010000110110000000101", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  38 == UArbBigInt::fromString("0000000000000000000000000000000000000000000001000011011000000010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  39 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000100001101100000001", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  40 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000010000110110000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  41 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000001000011011000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  42 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000100001101100000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  43 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000010000110110000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  44 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000001000011011000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  45 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000100001101100", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  46 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000010000110110", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  47 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000001000011011", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  48 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000100001101", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  49 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000010000110", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  50 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000001000011", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  51 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000100001", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  52 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000010000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  53 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000001000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  54 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000100", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  55 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000010", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  56 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000001", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  57 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  58 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  59 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  60 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  61 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  62 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  63 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  64 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  65 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  66 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  67 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >> 127 == UArbBigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );


	// 9 Byte (72bit)
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   0 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                      1) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   1 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                      2) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   2 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                      4) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   3 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                      8) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   4 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                     16) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   5 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                     32) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   6 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                     64) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   7 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                    128) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   8 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                    256) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   9 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                    512) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  10 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                   1024) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  11 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                   2048) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  12 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                   4096) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  13 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                   8192) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  14 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                  16384) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  15 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                  32768) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  16 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(                  65536) );

	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  63 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromUint64(    9223372036854775808ull) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  64 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromString(  "18446744073709551616", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  65 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromString(  "36893488147419103232", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  66 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromString(  "73786976294838206464", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  67 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromString( "147573952589676412928", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  68 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromString( "295147905179352825856", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  69 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromString( "590295810358705651712", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  70 == UArbBigInt::fromString("3529260907631713815077", 10) / UArbBigInt::fromString("1180591620717411303424", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  71 == UArbBigInt::fromString("1", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  72 == UArbBigInt::fromString("0", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  73 == UArbBigInt::fromString("0", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >> 127 == UArbBigInt::fromString("0", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >> 128 == UArbBigInt::fromString("0", 10) );
	REQUIRE( UArbBigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >> 129 == UArbBigInt::fromString("0", 10) );
}

TEST_CASE( "unsigned infinit big integer XOR", "[UABigint]" ) {

	// 1 Byte (8bit)
	REQUIRE( (UArbBigInt::fromString("0", 2) ^ UArbBigInt::fromString("0", 2)) == UArbBigInt::fromString("0", 2) );
	REQUIRE( (UArbBigInt::fromString("0", 2) ^ UArbBigInt::fromString("1", 2)) == UArbBigInt::fromString("1", 2) );
	REQUIRE( (UArbBigInt::fromString("1", 2) ^ UArbBigInt::fromString("0", 2)) == UArbBigInt::fromString("1", 2) );
	REQUIRE( (UArbBigInt::fromString("1", 2) ^ UArbBigInt::fromString("1", 2)) == UArbBigInt::fromString("0", 2) );
	
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("0000 0001", 2)) == UArbBigInt::fromString("1010 1011", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("0000 0011", 2)) == UArbBigInt::fromString("1010 1001", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("0000 0111", 2)) == UArbBigInt::fromString("1010 1101", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("0000 1111", 2)) == UArbBigInt::fromString("1010 0101", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("0001 1111", 2)) == UArbBigInt::fromString("1011 0101", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("0011 1111", 2)) == UArbBigInt::fromString("1001 0101", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("0111 1111", 2)) == UArbBigInt::fromString("1101 0101", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("1111 1111", 2)) == UArbBigInt::fromString("0101 0101", 2) );
	
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("1111 1110", 2)) == UArbBigInt::fromString("0101 0100", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("1111 1010", 2)) == UArbBigInt::fromString("0101 0000", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("1110 1010", 2)) == UArbBigInt::fromString("0100 0000", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) ^ UArbBigInt::fromString("1010 1010", 2)) == UArbBigInt::fromString("0000 0000", 2) );
	

	
	// 8 Byte (64bit)
	REQUIRE( ((UArbBigInt::fromString("1", 2) << 64) ^ (UArbBigInt::fromString("1", 2) <<  0)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001", 2) );
	REQUIRE( ((UArbBigInt::fromString("1", 2) <<  0) ^ (UArbBigInt::fromString("1", 2) << 64)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001", 2) ); // increas word count
	REQUIRE( ((UArbBigInt::fromString("1", 2) << 64) ^ (UArbBigInt::fromString("1", 2) << 15)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000", 2) );
	REQUIRE( ((UArbBigInt::fromString("1", 2) << 15) ^ (UArbBigInt::fromString("1", 2) << 64)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000", 2) ); // increas word count
	
	REQUIRE( ((UArbBigInt::fromString("1", 2) << 64) ^ (UArbBigInt::fromString("1", 2) <<  64)) == UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) ); // decreas word count
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) ^ UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000", 2)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000", 2) );
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) ^ UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000", 2)) == UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000", 2) ); // decreas word count
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) ^ UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2)) == UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) ); // decreas word count
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) ^ UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2)) == UArbBigInt::fromString("0", 2) ); // decreas word count
	REQUIRE( (UArbBigInt::fromString("01 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) ^ UArbBigInt::fromString("11 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2)) == UArbBigInt::fromString("10 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) );
	
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 10101010 00000000", 2) ^ UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000", 2)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000001 10101010 00000000", 2) );
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 10101010 00000000", 2) ^ UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000001 10101010 00000000", 2)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000", 2) );
	
	
}

TEST_CASE( "unsigned infinit big integer AND", "[UABigint]" ) {

	// 1 Byte (8bit)
	REQUIRE( (UArbBigInt::fromString("0", 2) & UArbBigInt::fromString("0", 2)) == UArbBigInt::fromString("0", 2) );
	REQUIRE( (UArbBigInt::fromString("0", 2) & UArbBigInt::fromString("1", 2)) == UArbBigInt::fromString("0", 2) );
	REQUIRE( (UArbBigInt::fromString("1", 2) & UArbBigInt::fromString("0", 2)) == UArbBigInt::fromString("0", 2) );
	REQUIRE( (UArbBigInt::fromString("1", 2) & UArbBigInt::fromString("1", 2)) == UArbBigInt::fromString("1", 2) );
	
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) & UArbBigInt::fromString("0000 0001", 2)) == UArbBigInt::fromString("0000 0000", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) & UArbBigInt::fromString("0000 0011", 2)) == UArbBigInt::fromString("0000 0010", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) & UArbBigInt::fromString("0000 0111", 2)) == UArbBigInt::fromString("0000 0010", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) & UArbBigInt::fromString("0000 1111", 2)) == UArbBigInt::fromString("0000 1010", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) & UArbBigInt::fromString("0001 1111", 2)) == UArbBigInt::fromString("0000 1010", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) & UArbBigInt::fromString("0011 1111", 2)) == UArbBigInt::fromString("0010 1010", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) & UArbBigInt::fromString("0111 1111", 2)) == UArbBigInt::fromString("0010 1010", 2) );
	REQUIRE( (UArbBigInt::fromString("1010 1010", 2) & UArbBigInt::fromString("1111 1111", 2)) == UArbBigInt::fromString("1010 1010", 2) );
	

	
	// 8 Byte (64bit)
	REQUIRE( ((UArbBigInt::fromString("1", 2) << 64) & (UArbBigInt::fromString("1", 2) <<  0)) == UArbBigInt::fromString("0", 2) ); // decreas word count
	REQUIRE( ((UArbBigInt::fromString("1", 2) <<  0) & (UArbBigInt::fromString("1", 2) << 64)) == UArbBigInt::fromString("0", 2) ); // decreas word count
	REQUIRE( ((UArbBigInt::fromString("1", 2) << 64) & (UArbBigInt::fromString("1", 2) << 15)) == UArbBigInt::fromString("0", 2) ); // decreas word count
	REQUIRE( ((UArbBigInt::fromString("1", 2) << 15) & (UArbBigInt::fromString("1", 2) << 64)) == UArbBigInt::fromString("0", 2) ); // decreas word count
	REQUIRE( ((UArbBigInt::fromString("1", 2) << 15) & (UArbBigInt::fromString("1", 2) << 15)) == UArbBigInt::fromString("                                                        10000000 00000000", 2) ); // decreas word count
	REQUIRE( ((UArbBigInt::fromString("1", 2) << 64) & (UArbBigInt::fromString("1", 2) << 64)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) );
	
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) & UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000", 2)) == UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) );
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) & UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000", 2)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) );
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) & UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) );
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) & UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2)) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) );
	REQUIRE( (UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) & UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2)) == UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) );
	REQUIRE( (UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) & UArbBigInt::fromString("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2)) == UArbBigInt::fromString("0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) );
	REQUIRE( (UArbBigInt::fromString("10101010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) & UArbBigInt::fromString("111111111 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2)) == UArbBigInt::fromString("10101010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) );
	REQUIRE( (UArbBigInt::fromString("10101010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) & UArbBigInt::fromString("111111100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2)) == UArbBigInt::fromString("10101000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000", 2) );
	
	
}

TEST_CASE( "unsigned infinit big integer addition", "[UABigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( (UArbBigInt(  0) + UArbBigInt(  0)).toUint64()	==   0 );
	REQUIRE( (UArbBigInt(  1) + UArbBigInt(  0)).toUint64()	==   1 );
	REQUIRE( (UArbBigInt(  0) + UArbBigInt(  1)).toUint64()	==   1 );
	REQUIRE( (UArbBigInt(  1) + UArbBigInt(  1)).toUint64()	==   2 );
	REQUIRE( (UArbBigInt(  2) + UArbBigInt(  1)).toUint64()	==   3 );
	REQUIRE( (UArbBigInt(  1) + UArbBigInt(  2)).toUint64()	==   3 );
	REQUIRE( (UArbBigInt( 10) + UArbBigInt(  1)).toUint64()	==  11 );
	REQUIRE( (UArbBigInt(128) + UArbBigInt(127)).toUint64()	== 255 );

	// 2 Bytes (16 bit)
	REQUIRE( (UArbBigInt(128) + UArbBigInt(128)).toUint64()	== 0x0100ull );
	REQUIRE( (UArbBigInt(255) + UArbBigInt(  1)).toUint64()	== 0x0100ull );
	REQUIRE( (UArbBigInt(  1) + UArbBigInt(255)).toUint64()	== 0x0100ull );
	REQUIRE( (UArbBigInt(255) + UArbBigInt(255)).toUint64()	== 0x01FEull );

	REQUIRE( (UArbBigInt::fromUint64(0x7FFF) + UArbBigInt::fromUint64(0x7FFF) 				).toUint64() == 0xFFFEull );
	REQUIRE( (UArbBigInt::fromUint64(0x7FFF) + UArbBigInt::fromUint64(0x7FFF) + UArbBigInt(0)	).toUint64() == 0xFFFEull );
	REQUIRE( (UArbBigInt::fromUint64(0x7FFF) + UArbBigInt::fromUint64(0x7FFF) + UArbBigInt(1) 	).toUint64() == 0xFFFFull );
	REQUIRE( (UArbBigInt(1) + UArbBigInt::fromUint64(0x7FFF) + UArbBigInt::fromUint64(0x7FFF) 	).toUint64() == 0xFFFFull );

	// 4 Bytes (32bit)
	REQUIRE( (UArbBigInt::fromUint64(0x8000) + UArbBigInt::fromUint64(0x8000)).toUint64() 	== 0x010000ull );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFF) + UArbBigInt::fromUint64(  0x01)).toUint64() 	== 0x010000ull );
	REQUIRE( (UArbBigInt::fromUint64(  0x01) + UArbBigInt::fromUint64(0xFFFF)).toUint64() 	== 0x010000ull );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFF) + UArbBigInt::fromUint64(0xFFFF)).toUint64() 	== 0x01FFFEull );

	REQUIRE( (UArbBigInt::fromUint64(0x7FFFFFFF) + UArbBigInt::fromUint64(0x7FFFFFFF) 				).toUint64() == 0xFFFFFFFEull );
	REQUIRE( (UArbBigInt::fromUint64(0x7FFFFFFF) + UArbBigInt::fromUint64(0x7FFFFFFF) + UArbBigInt(0) 	).toUint64() == 0xFFFFFFFEull );
	REQUIRE( (UArbBigInt::fromUint64(0x7FFFFFFF) + UArbBigInt::fromUint64(0x7FFFFFFF) + UArbBigInt(1) 	).toUint64() == 0xFFFFFFFFull );
	REQUIRE( (UArbBigInt(1) + UArbBigInt::fromUint64(0x7FFFFFFF) + UArbBigInt::fromUint64(0x7FFFFFFF) 	).toUint64() == 0xFFFFFFFFull );

	// 8 Bytes (64bit)
	REQUIRE( (UArbBigInt::fromUint64(0x80000000) + UArbBigInt::fromUint64(0x80000000)).toUint64() 	== 0x0100000000ull );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFF) + UArbBigInt::fromUint64(      0x01)).toUint64() 	== 0x0100000000ull );
	REQUIRE( (UArbBigInt::fromUint64(      0x01) + UArbBigInt::fromUint64(0xFFFFFFFF)).toUint64() 	== 0x0100000000ull );
	REQUIRE( (UArbBigInt::fromUint64(0xFFFFFFFF) + UArbBigInt::fromUint64(0xFFFFFFFF)).toUint64() 	== 0x01FFFFFFFEull );

	REQUIRE( (UArbBigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + UArbBigInt::fromUint64(0x7FFFFFFFFFFFFFFF) 				).toUint64() == 0xFFFFFFFFFFFFFFFEull );
	REQUIRE( (UArbBigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + UArbBigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + UArbBigInt(0)	).toUint64() == 0xFFFFFFFFFFFFFFFEull );
	REQUIRE( (UArbBigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + UArbBigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + UArbBigInt(1)	).toUint64() == 0xFFFFFFFFFFFFFFFFull );
	REQUIRE( (UArbBigInt(1) + UArbBigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + UArbBigInt::fromUint64(0x7FFFFFFFFFFFFFFF)	).toUint64() == 0xFFFFFFFFFFFFFFFFull );

	// 16 Bytes (128bit)
	REQUIRE( UArbBigInt::fromString("18446744073709551616", 10) == (UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + UArbBigInt::ONE) ); // 2^64

	REQUIRE( UArbBigInt::fromUint64(0x8000000000000000) + UArbBigInt::fromUint64(0x8000000000000000) 	== UArbBigInt::fromString("18446744073709551616", 10) ); // 2^64
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt::fromUint64(              0x01) 	== UArbBigInt::fromString("010000000000000000", 16) ); // 2^64
	REQUIRE( UArbBigInt::fromUint64(              0x01) + UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 	== UArbBigInt::fromString("010000000000000000", 16) ); // 2^64
	REQUIRE( UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + UArbBigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 	== UArbBigInt::fromString("01FFFFFFFFFFFFFFFE", 16) );

	REQUIRE( UArbBigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + UArbBigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) 				== UArbBigInt::fromString("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE", 16) );
	REQUIRE( UArbBigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + UArbBigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + UArbBigInt(0)	== UArbBigInt::fromString("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE", 16) );
	REQUIRE( UArbBigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + UArbBigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + UArbBigInt(1)	== UArbBigInt::fromString("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) );
	REQUIRE( UArbBigInt(1) + UArbBigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + UArbBigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16)	== UArbBigInt::fromString("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) );


	REQUIRE( UArbBigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) + UArbBigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) == UArbBigInt::fromString("ffffffffffffffff0000000000000011111111111111100", 16) );
	REQUIRE( UArbBigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) + UArbBigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) == UArbBigInt::fromString("FFFFFFFFFFFFFFFF0000000000000011111111111111100", 16) );

	REQUIRE( UArbBigInt::fromString("123456789000000000000000000000000000001234567890", 10) + UArbBigInt::fromString("987654321000000000000000000000000000009876543210", 10) == UArbBigInt::fromString("1111111110000000000000000000000000000011111111100", 10) );
	REQUIRE( UArbBigInt::fromString("987654321000000000000000000000000000009876543210", 10) + UArbBigInt::fromString("123456789000000000000000000000000000001234567890", 10) == UArbBigInt::fromString("1111111110000000000000000000000000000011111111100", 10) );
}

TEST_CASE( "unsigned infinit big integer subtraction", "[UABigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( (UArbBigInt(  0) - UArbBigInt(  0)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(  1) - UArbBigInt(  0)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt(  1) - UArbBigInt(  1)).toUint64() ==   0 );

	REQUIRE( (UArbBigInt(  9) - UArbBigInt(  1)).toUint64() ==   8 );
	REQUIRE( (UArbBigInt(  9) - UArbBigInt(  9)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt( 10) - UArbBigInt(  9)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt(255) - UArbBigInt(  0)).toUint64() == 255 );
	REQUIRE( (UArbBigInt(255) - UArbBigInt(255)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(255) - UArbBigInt( 1)).toUint64() 	== 254 );

	// 2 Bytes (16 bit)
	REQUIRE( (UArbBigInt::fromUint64(0x0100ull) - UArbBigInt::fromUint64(0x0100ull)).toUint64() ==   0x00ull ); // 256 - 256 = 0
	REQUIRE( (UArbBigInt::fromUint64(0x0101ull) - UArbBigInt::fromUint64(0x0100ull)).toUint64() ==   0x01ull ); // 257 - 256 = 1
	REQUIRE( (UArbBigInt::fromUint64(0x0101ull) - UArbBigInt::fromUint64(  0x01ull)).toUint64() == 0x0100ull ); // 257 - 1 = 256
	REQUIRE( (UArbBigInt::fromUint64(0x0101ull) - UArbBigInt::fromUint64(  0x02ull)).toUint64() ==   0xFFull ); // 257 - 2 = 255

	// 4 Bytes (32bit)
	REQUIRE( (UArbBigInt::fromUint64(0x010000ull) - UArbBigInt::fromUint64(0x010000ull)).toUint64() ==     0x00ull ); // 2^16 - 2^16 = 0
	REQUIRE( (UArbBigInt::fromUint64(0x010001ull) - UArbBigInt::fromUint64(0x010000ull)).toUint64() ==     0x01ull ); // (2^16 + 1) - 2^16 = 1
	REQUIRE( (UArbBigInt::fromUint64(0x010001ull) - UArbBigInt::fromUint64(    0x01ull)).toUint64() == 0x010000ull ); // (2^16 + 1) - 1 = 2^16
	REQUIRE( (UArbBigInt::fromUint64(0x010001ull) - UArbBigInt::fromUint64(    0x02ull)).toUint64() == 0x00FFFFull ); // (2^16 + 1) - 2 = 2^16 - 1

	// 8 Bytes (64bit)
	REQUIRE( (UArbBigInt::fromUint64(0x0100000000ull) - UArbBigInt::fromUint64(0x0100000000ull)).toUint64() 	==         0x00ull ); // 2^32 - 2^32 = 0
	REQUIRE( (UArbBigInt::fromUint64(0x0100000001ull) - UArbBigInt::fromUint64(0x0100000000ull)).toUint64() 	==         0x01ull ); // (2^32 + 1) - 2^32 = 1
	REQUIRE( (UArbBigInt::fromUint64(0x0100000001ull) - UArbBigInt::fromUint64(        0x01ull)).toUint64() 	== 0x0100000000ull ); // (2^32 + 1) - 1 = 2^32
	REQUIRE( (UArbBigInt::fromUint64(0x0100000001ull) - UArbBigInt::fromUint64(        0x02ull)).toUint64() 	== 0x00FFFFFFFFull ); // (2^32 + 1) - 2 = 2^32 - 1

	// 16 Bytes (128bit)
	REQUIRE( UArbBigInt::fromString("010000000000000000", 16) - UArbBigInt::fromString("010000000000000000", 16) 	== 							  UArbBigInt(0x00)      ); // 2^64 - 2^64 = 0
	REQUIRE( UArbBigInt::fromString("010000000000000001", 16) - UArbBigInt::fromString("010000000000000000", 16) 	==                            UArbBigInt(0x01)      ); // (2^64 + 1) - 2^64 = 1
	REQUIRE( UArbBigInt::fromString("010000000000000001", 16) - UArbBigInt::fromUint64(               0x01ull)	 	== UArbBigInt::fromString("010000000000000000", 16) ); // (2^64 + 1) - 1 = 2^64
	REQUIRE( UArbBigInt::fromString("010000000000000001", 16) - UArbBigInt::fromUint64(               0x02ull)		== UArbBigInt::fromUint64( 0xFFFFFFFFFFFFFFFFull)   ); // (2^64 + 1) - 2 = 2^64 - 1

	REQUIRE( UArbBigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) - UArbBigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) == UArbBigInt::fromString("fdb97530eca86421000000000000000eca8641fdb975320", 16) );
	REQUIRE( UArbBigInt::fromString("987654321000000000000000000000000000009876543210", 10) - UArbBigInt::fromString("123456789000000000000000000000000000001234567890", 10) == UArbBigInt::fromString("864197532000000000000000000000000000008641975320", 10) );
}

TEST_CASE( "unsigned infinit big integer multiplication", "[UABigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( (UArbBigInt(  0) * UArbBigInt(0)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(  1) * UArbBigInt(0)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(  1) * UArbBigInt(1)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt(  2) * UArbBigInt(1)).toUint64() ==   2 );
	REQUIRE( (UArbBigInt(  1) * UArbBigInt(2)).toUint64() ==   2 );
	REQUIRE( (UArbBigInt( 10) * UArbBigInt(0)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt( 11) * UArbBigInt(2)).toUint64() ==  22 );
	REQUIRE( (UArbBigInt(127) * UArbBigInt(2)).toUint64() == 254 );

	// 2 Bytes (16 bit)
	REQUIRE( (UArbBigInt(128) * UArbBigInt(              2)).toUint64() == 0x0100ull );
	REQUIRE( (UArbBigInt(128) * UArbBigInt(              4)).toUint64() == 0x0200ull );
	REQUIRE( (UArbBigInt(123) * UArbBigInt::fromUint64(532)).toUint64() == 0xFF9Cull );
	REQUIRE( (UArbBigInt( 98) * UArbBigInt::fromUint64(571)).toUint64() == 0xDA96ull );

	REQUIRE( (UArbBigInt::fromUint64(0x0100ull) * UArbBigInt::fromUint64(0x0FFull)).toUint64() == 0xFF00ull );
	REQUIRE( (UArbBigInt::fromUint64(0x0011ull) * UArbBigInt::fromUint64(0x0FFull)).toUint64() == 0x10EFull );

	// 4 Bytes (32bit)
	REQUIRE( (UArbBigInt::fromUint64(    0x0100ull) * UArbBigInt::fromUint64( 0x0100ull)).toUint64() == 0x00010000ull );
	REQUIRE( (UArbBigInt::fromUint64(    0xFFFFull) * UArbBigInt::fromUint64( 0xFFFFull)).toUint64() == 0xFFFE0001ull );

	REQUIRE( (UArbBigInt::fromUint64(    0x0100ull) * UArbBigInt::fromUint64( 0x0100ull)).toUint64() ==   0x010000ull );
	REQUIRE( (UArbBigInt::fromUint64(    0x0100ull) * UArbBigInt::fromUint64( 0x0F00ull)).toUint64() ==   0x0F0000ull );

	REQUIRE( (UArbBigInt::fromUint64(0x55555555ull) * UArbBigInt::fromUint64(  0x003ull)).toUint64() == 0xFFFFFFFFull );
	REQUIRE( (UArbBigInt::fromUint64(    0xEFEFull) * UArbBigInt::fromUint64(   0xEFull)).toUint64() ==   0xE00021ull );
	REQUIRE( (UArbBigInt::fromUint64(    0xEFEFull) * UArbBigInt::fromUint64( 0xEFEFull)).toUint64() == 0xE0E02121ull );

	REQUIRE( (UArbBigInt::fromUint64(0xff9Cull) * UArbBigInt::fromUint64(  0x7Bull)).toUint64() == 0x7ACFF4ull ); // 65436 * 123 = 8048628

	// 8 Bytes (64bit)
	REQUIRE( (UArbBigInt::fromUint64(    0xFFFFFFFFull) * UArbBigInt::fromUint64( 0xFFFFFFFFull)).toUint64() == 0xFFFFFFFE00000001ull );
	REQUIRE( (UArbBigInt::fromUint64(    0xFFFFFFFFull) * UArbBigInt::fromUint64(       0x02ull)).toUint64() ==        0x1FFFFFFFEull );
	REQUIRE( (UArbBigInt::fromUint64(    0xFEDCBA98ull) * UArbBigInt::fromUint64( 0x12345678ull)).toUint64() == 0x121FA00A35068740ull );
	REQUIRE( (UArbBigInt::fromUint64(    0xFEDCBA98ull) * UArbBigInt::fromUint64( 0x12345678ull)).toUint64() == 0xFEDCBA98ull * 0x12345678ull);
	REQUIRE( (UArbBigInt::fromUint64(        0x8a25ull) * UArbBigInt::fromUint64(      0x800ull)).toUint64() == 0x4512800 );

	// 16 Bytes (128bit)
	REQUIRE( UArbBigInt::fromUint64(    0xFFFFFFFFFFFFFFFFull) * UArbBigInt::fromUint64( 0xFFFFFFFFFFFFFFFFull) == UArbBigInt::fromString("FFFFFFFFFFFFFFFE0000000000000001", 16) );
	REQUIRE( UArbBigInt::fromUint64(    0xFFFFFFFFFFFFFFFFull) * UArbBigInt::fromUint64(               0x02ull) == UArbBigInt::fromString(               "1FFFFFFFFFFFFFFFE", 16) );
	REQUIRE( UArbBigInt::fromUint64(    0xFEDCBA9876543210ull) * UArbBigInt::fromUint64( 0x123456789ABCDEF0ull) == UArbBigInt::fromString("24090311171252216041959356964269510400", 10) ); // 18364758544493064720 * 1311768467463790320 = 24090311171252216041959356964269510400
	REQUIRE( UArbBigInt::fromUint64(    0xFEDCBA9876543210ull) * UArbBigInt::fromUint64( 0x123456789ABCDEF0ull) == UArbBigInt::fromString("121fa00ad77d7422236d88fe5618cf00", 16) ); // 18364758544493064720 * 1311768467463790320 = 24090311171252216041959356964269510400
	REQUIRE( (UArbBigInt::fromUint64(    0xFEDCBA9876543210ull) * UArbBigInt::fromUint64( 0x123456789ABCDEF0ull)).toStringDec() == std::string("24090311171252216041959356964269510400") ); // 18364758544493064720 * 1311768467463790320 = 24090311171252216041959356964269510400
	
	REQUIRE( UArbBigInt::fromString("1 00000000 00000000", 16) *  UArbBigInt::fromString("1 00000000 00000000", 16) == UArbBigInt::fromString("1 00000000 00000000 00000000 00000000", 16) );
	
	REQUIRE( UArbBigInt::fromString(              "8a25", 16) * UArbBigInt::fromUint64( 2048) == UArbBigInt::fromString(              "4512800", 16) );
	REQUIRE( UArbBigInt::fromString(             "18a25", 16) * UArbBigInt::fromUint64( 2048) == UArbBigInt::fromString(              "c512800", 16) );
	REQUIRE( UArbBigInt::fromString(            "018a25", 16) * UArbBigInt::fromUint64( 2048) == UArbBigInt::fromString(              "c512800", 16) );
	REQUIRE( UArbBigInt::fromString(        "aa55018a25", 16) * UArbBigInt::fromUint64( 2048) == UArbBigInt::fromString(        "552a80c512800", 16) );
	REQUIRE( UArbBigInt::fromString("bf525580aa55018a25", 16) * UArbBigInt::fromUint64( 2048) == UArbBigInt::fromString("5fa92ac0552a80c512800", 16) );
	REQUIRE( UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64( 2048) == UArbBigInt::fromString("7227926338829749893277696", 10) );
	
	REQUIRE( UArbBigInt::fromString("bf525580aa55018a25", 16) * UArbBigInt::fromUint64( 2049) == UArbBigInt::fromString("5fb51fe5ad3526152b225", 16) );
	REQUIRE( UArbBigInt::fromString("3529260907631713815077", 10) * UArbBigInt::fromUint64( 2049) == UArbBigInt::fromString("7231455599737381607092773", 10) );
	

	REQUIRE( UArbBigInt::fromString("3214568", 10) * UArbBigInt::fromString("3214568", 10) == UArbBigInt::fromString("10333447426624", 10) );
	REQUIRE( UArbBigInt::fromString("3214568", 10) * UArbBigInt::fromString("10333447426624", 10) == UArbBigInt::fromString("33217569427307858432", 10) );

//	uint64_t test, ref;
//	for(uint64_t i = 0; i < 0xffff; i++) {
//		for(uint64_t j = 0; j < 0xffff; j++) {
//			test = (UArbBigInt::fromUint64(i) * UArbBigInt::fromUint64(j)).toUint64();
//			ref = i*j;
//			if( test != ref) {
//				REQUIRE( test == ref );
//			}
//		}
//	}
	
	// -------
	REQUIRE( UArbBigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) *  UArbBigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) == UArbBigInt::fromString("121fa00ad77d7422236d88fe5618cf13419a0b84f54b6445a4618e3b7a5bf121fa00ad77d7422236d88fe5618cf00", 16) );
	REQUIRE( UArbBigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) *  UArbBigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) == UArbBigInt::fromString("121fa00ad77d7422236d88fe5618cf13419a0b84f54b6445a4618e3b7a5bf121fa00ad77d7422236d88fe5618cf00", 16) );

	REQUIRE( UArbBigInt::fromString("123456789000000000000000000000000000001234567890", 10) *  UArbBigInt::fromString("987654321000000000000000000000000000009876543210", 10) == UArbBigInt::fromString("121932631112635269000000000000000000002438652622252705380000000000000000000012193263111263526900", 10) );
	REQUIRE( UArbBigInt::fromString("987654321000000000000000000000000000009876543210", 10) *  UArbBigInt::fromString("123456789000000000000000000000000000001234567890", 10) == UArbBigInt::fromString("121932631112635269000000000000000000002438652622252705380000000000000000000012193263111263526900", 10) );
	
	
	REQUIRE( UArbBigInt::fromString("141", 16) *  UArbBigInt::fromString("141", 16) == UArbBigInt::fromString("19281", 16) );
	REQUIRE( UArbBigInt::fromString("19281", 16) *  UArbBigInt::fromString("19281", 16) == UArbBigInt::fromString("278D96501", 16) );
	
	REQUIRE( UArbBigInt::fromString("a2aeb24566780652625e99853cc671dd330d593a9a54b069e5b49ad3456656546209c2", 16) *  UArbBigInt::fromString("a2aeb24566780652625e99853cc671dd330d593a9a54b069e5b49ad3456656546209c2", 16) == UArbBigInt::fromString("676190d6a82bc8782aff49697a4d625b298f8cc9e93b7b38de9152eadd018f5fafd49918dee1874f701a535e7b720b7f536f5edacc30600c1e309f4c8eb1fc09a24ac8e73704", 16) );
	
	UArbBigInt squareTest = UArbBigInt::fromString("a2aeb24566780652625e99853cc671dd330d593a9a54b069e5b49ad3456656546209c2", 16);
	REQUIRE( squareTest * squareTest == UArbBigInt::fromString("676190d6a82bc8782aff49697a4d625b298f8cc9e93b7b38de9152eadd018f5fafd49918dee1874f701a535e7b720b7f536f5edacc30600c1e309f4c8eb1fc09a24ac8e73704", 16) );
	squareTest = squareTest * squareTest;
	REQUIRE( squareTest == UArbBigInt::fromString("676190d6a82bc8782aff49697a4d625b298f8cc9e93b7b38de9152eadd018f5fafd49918dee1874f701a535e7b720b7f536f5edacc30600c1e309f4c8eb1fc09a24ac8e73704", 16) );
	
	
	// entspricht pow(63)
	REQUIRE( UArbBigInt::fromString("a2aeb24566780652625e99853cc671dd330d593a9a54b069e5b49ad3456656546209c2", 16) * UArbBigInt::fromString("ae73fc1ccb57ae80855909b4d7a4a854c6e85bbadd3f8f63bc41c06e5053bca09ded8222323e403605971f528de3adc51cd8db97945f20f8edfe36e77ef82b6b2e4cc9cc6eb4c5b7698e52e7b7169bfd19272237ae1a03abc00e16578f3586fd46f5e5301a6d7c0cdfdf2d168d7da58fe04b974d6d05bdb4c88be20fb7282d5c231ded48bb3a7bac31ceb52139cd6171a9dd3032b56381bcd698991b03562512f43476d678a9b5cb2a071e3e9e296eb10aee4e9ecc08edb96c5d2d175ade30cd49bc7b719f3ba7fd0970a79f554cd13c6ae0901d0b6069a648a23063b072ff34b7fd2146d5f1edefe83eb022c78fece321d0711bbbc795eeb2bc71dcbf104bc63cce9fb31cff14dfb83fffec7a654d9640d7c3923bda64b40cf8cb4a0db4c004181a7c1e0598d069e424e09234db9e6daa517354aeeb31b87f1357207f1221805aa4b337f261d99306807ea8709123b369a2cad71d666397cfd651d7ced646aa31fc016bedc9280f9ccc565e972d8be2e8da4477017542f7f689a02cea12e1134bde90f821d3a46745787d20bc1b4f80f5b3b4eac657178c762d8339b1ea6a6a4f8fb42b1b6b8756218e705fb99d812d5e0c3b2c0b405c8c13054179c3b343c3659e5c2ab12b1bccfa5c0270443456af05e2683bc0ec2fe8594b294092550cdfcef486dd56de9bdfeef18f2f09b77812826a452948452f26d7e1a8b18a665d712e29fec13a9fbcd25fc4107433f03796880ad90cf85d0dda7203e998a102667228ed09fa18f013c80be1f440d9d0cac9b53ed6f57a91a21aad604e79e75ab0d64f2a8dd8771d91f68e20ef7f8eeecdb117b615235d53876ac5f19a8ea20cb1a684f8f754c35d003d49e2612644ca0018a4d59f5d017227c844f19d0890ad78f5efa447effe70fd45c7aeb359812880b8674a9f21b659fb002d37023a79a732afbefbb9c55f4f6939016191d6747b65ba34e621c52b219ac508c6148ba711d6e46bb3ef0d169dcb0a6f88886bf0856d5f237ddb987a0f0451667b768959cd90656abb1d1bd2a2b3fea5c209ccb0e24c8533e6c88b1d19ea513fef33dd9ee34bcf8e2aced110a559d835e077bbb7b58552bc3dcb5e76675fc986ae189a55e6bc7373fccc82ae4f9456bd0c7a0f6b8cb96a8986e26f8275759ccce0f3b616d63d7d1b7615601830dfdd16c745011237631da4ddbc248e4bfdfa4db1e2e30d04ea1a2c58cab5a48ff69846361557ac39891f9a5349876adcd85e1456b350298e1e90e6542f6fed60cb1b935e068d55e4bf8a4b610e7f83ce1d94bfae171a92107627385f5e0e4281607c94db21a7b2ee55efbd06b8d09feb65dac68fe7728196d3738f16e77826b9d0cd62c4109962ee1dd59a6f262048ce94347c92280f2485115cdaf66275dfca37a98900d3361a91de1049dd1d54b2c14271e52e41d8c0bcd2915e7b5c162bd16ef1b7c528721d2d9956bc95a841ce9840ea8448dcebb11776f8a301a080c5ae1f976831d8a8a87a8e0947b7bb1e0f2288c547c7910e194472fe5610d654ff86ad852d9d0128f7f645eff3e2dd0ce9e8869fcf174e3d97cfefd9a69da3256027a7e5cf79822ea26d10beacbdab0a467ed6d24471a82ec9767975649291153b1bcd00bb9ff41b9786df2db59b4cbece218a4468ad255ac0a577f769601729b7e0de025ffeefc767d38d03cfb0a24d2c3e1d788bc1a9e5a30e786261b57fe3d1d434f27bfb15eb2c75900af7b3965d47fa6a74d57f02349cc8a755dbc447f4ac40db1b3b6151d1c2f02d43d7f86498ced7b99aaae0811d4983394a1da00ef7f68ab53118028a5822df3ee53242d2469c250bd19854c47d5ffbbb56004bb47d87ccee29771ea39fe2ca7435a50da79ad27b4f9a9b1892cb833e8813a216a2fc047364a6838e6756ff7ddbad60dc273ae412471ff0ed70cf1639c734fb7cd50f0c377ee941e5715ab207630a36580d1bd05533df136ab8536e4e568743f1f0e3afae3dece587e68d2b2ce063c713773dce98cc19d298f057446b36b8bc34ed97cd6bd443cde5c7c5e29046579a107535ab178fb9bfd6e04e51f269f152ae886e2afea83c8cd416ebb5d1d078e0263dd9214ec359899e8486a0e0f81703e2305bb8f57680cc5681057c39586894d50aa9388aa07b6482497eaa185efa5bac025c0b1ed9713c2e2402c95799d9a5753985fe5ca0360534557f2850b0052352dfa639540db47a4ae79190443c1b0f1abf32276806d5bcb2106fd6f6e643d577d4b9d56b6d9726674d69e70afc2edf91fe4ad85b848021f649deb22c9d39cd6d0205875e6f0a19ea56888b15c3ab38947f878e5d8c367048ad54db0c02070db72f32b67bd70e665f4f81ff5e67130f4a37a2c126a4944cd4caca9001514af4987982c2931318b816fcf89535e99699f4cb6a0169dbe5544557dd4d056b082b047d1c32722752e8615768aa80ade8487185d204e203b0bf7da34e135b2231b115a8bbad1ee5ac9cd0ff24a77f230f19f172a3ebd0f2cef61b8b4ac4cd75ff3ee2cb7ba3e806bea55318f7358a8de6e480f0416fd54e1f2834f2013ae79d29e6c041e3a7d4345623c6311629b3a0c1104bdad34c5555439af6c43382c08f1429dae558ba82859d1416c91398366656732dfcad2e53ba63a817f9cea92e5a426ea0e6e25ff1049c69b8d29f7ef1c6841c353425b80ef4ec87a927c1423dfad8fc8cc82333dc5d96063745db6ba444a72837ad44769824643bb4e7d752e16e078bdce5efbfe65c6302a292d09d2a89810302e0fef06c954be1337a29191e23301dc834841290d11fa097e1d8dbf30f1c9bf5b8cee13afd28cc541c2265fcff11f054f9396c5de2ea2bc90849bcd07e74ddcbd89710fc7b07e58a5c6209515182e69e7992ddd199adbecb55c5b5f1a512c088a42738b5b3122f18ed0e5fee6f8d337a2ae1e2c3ec937b72457a8810fcf4d2f63cbd9dc7195645026d0f88a8b80a1b7964f08a4d095911f3494c3ea7a4e0b12390e2c99a788e99b7016aebe30664b8aafb49c5c81c067fc6eb7e90 40000000 00000000", 16) == UArbBigInt::fromString("6edc71db84a2ac4c3850ec5aca70d9e412917c7dcd901a7afee3448a6901698a9bbc427e0868560470f2359b2a69023f89257b34532be428cd767f75a737c500b6553ca066c2a28047e4d637e4c9787c3855e57c3e387a5cb451236c37e3a1e744498545a38a3c200cee3f4c9fa80f79daf503de9c0adba548f26b52721d2293883afad90831dacc630d0e40e44c17eefc8215ba7b9727b70951247027e4e9067bd18c09798e72308b14813e82ea687b0a6d2114553236d745f3d6538fdda6695ee7d95fc5e8477ac31b6f00c76abcea68b284e3c8cfcb9bfac5740d7f86a3f0e9965e34c4a7adce63c208b644bc513f2956f13990f92bffe4e8ea18aea62e8ba8e9a67ea4f094d5b524aa9845c6eb241078f49b0abba27c93fed5969cb1c06a7a747f4d0299f8e267eadb75ced3b4ed25569596b7bffed8f8a0cc34d9429cad641f43068340ab2d4e962f84b592b32b78482bce59195c018a1bd4ef8544fe6f151ca99401e48b71e0989e06b802391658d7a4d39a5b7ff0ad329c253a7069fd6f5e38b8cc0f606a4d974e28c99847c54b66b5892c565b2f83d9fa6cb4a5a379df54b9627a060d46409e346de0635ef7e67cdc9991c8a380c43843e1a26053c507be8dfc4962307f722c9bc5aa1152d34cd2dae710a73d1c26d509831a5c9e8ad0c880b1663411d5370cf9768bc9278c15124afee0bc1335eba0fb1771c27a502eef225a8cee7daf78178f8cd583a19b88deba53a309309403789b72fd96831138bc3ad09f7e1c423dedc14b92721969422b82a68eaafd82814e7ed5fa2a46bb038beb07fd911eea7763cc7f7dd87c49656b6dfa551b3017961ad58b3644e9c91b96bd951e37279e0a154ba0ff308773d058a6d43e58c2bca86443a97ab59dd1ec7d8afbc23dbe1bab3d89336498751cdbc64a767f224f066dfbd783b921ee3d312a9ee4425e361ae8db11436216f2bbf34dd0d3f698f3f18b7d0e9505625c68ab94ea73c4a4307e2f7f3b5ef6532cd7783e93753bc8bba07125d8a2dd23cc42cf83916ec458a28332408036d70a33ef4c8b3c58442011d5606707d7570157fcf97b859d7f7450fe6adec452a2093d3453aa835d2f94a06f85bf884cc8395a96572430999b4912db48a6eeee6e8439313a6efc8786d75f4fbc5573ee89c85b7caa81edb7d0096e03fbda055f8b6caa857bee919f67e2be7dadab5377eaf6a0d827bdc95cbb15656d90c216e16f54c8e12baf567fa900ba37b6048b4b314f544b84d8b651b49bee2266b88d7470ca648d54f051dec0e16d0dcaff42ef5e8180175da7268210c159f42510579e4148b726d00ffdf7441db1207aac437dde7dabb339243cb45b8804a2728f3360615443df25bf70b9c466a4677c980cbc6b96d8cf0d7be89e4f12266de7d55636e93fa2e0ab346bdd5ce7b9b6de799872a1288945b6ff887be3fe0379f761e80d065f366dcd82907ccbe5acabab083aef5ef2f93c1d1495cc346ef56e04a8809976d8f89c47e1368f1cbecf509abfa16b9dd5608060dc0e4b0604033498dc97a71709bb75f1cc05e046a6e999bbc814579b277b23341bb5d95f8bbd02867ccf71ed70f8d0235cf37f105a3e963918b027a42e0c4aa724def1ade6f5ccfec69d75775d16271bb0b2d621487740be30f192662d477d1d56aeef8cb249991d3cee3ba4197a3d8421a5c4243328d700db25b88d00cd6975761680d29e8065c56da19c5dc285f12378c45bcf5896341425dceaae2253baea2d17d2bd4fe7a7a74bb69130b381db712ce1a7cf49b2a14d014b8e3db70f9c31dab535a6b14a732ded9a4c4af5bcf8fd078cc172b18afe3cd8034e6ce4cd56db70b620ac64f68dd034db25de6084aa6028b6e8348aad3f00d813ad7c76587d45ec82f8d789af3bbae0ecde1adfaa65a245a8e6eec6c24dff47751d92fd6ff280f4ab6529310b42c5775f8f5a224b0e4ce1b9fe937df64865edf9d086cb741b51d496c34d5a064a11c7983460d7d1cb28ef97a1568004aadde63bb4026adc922e7166a2667613b02b1eb7403fcdfdf1dd9749f2acddc2028f1c05a217f3d36c28b231a7b042ca1974839862c3b132297ca129560ead2ebf6798c3f7a0b583586d89872dd00fa0dfe9bde7316a7027a4aa5a5b263175b10731eb95bd60897c23fe5f0e34cf8c7f2d2647f9d3e0a58cc595ef662de18a5430450bc8f8030779f04a7b7b3ee2e136dbed4f9db5b18cb045e624b95792484a43e78ae3f6c00fca04f9d3f90a1ced61f878c8bddcd902d604bdfca00964cab5644098141e8235208342c062622fd5550db147dfa8d778b9ac79c4bee6ab71525da623b95cd71ad29ea075942c19993fc6b8f4e403c38d2cdaef50bf7666e10136f23c670cd79cb38b74ba721da5426feda00c2a4f22f09f4c10b3dbc164cc49f5c5e15c074688b5456f1d8d88ed9fc9d29b39fb76089d4cb36664f6fd198265f518c37682b7b4b6e7b1eb79cb7bc95118c42d60995ccec304402cc3520bc2bcf05ebb7b396891c82c64069b51d168a1d1c00f60118d44aebea81dc0366adc0b9bcaf91cbd4ee42bfdecddb67a45b37aea04a141e1b1f4f013abdd8ce88308b19ad006150d2acadbe2f257847382f9628a923263dd8dbf8c83ef10e9b4233b1b583c35d08543e903bfeef1950d6f6a8ebb6c06bf8a2e4d33fd30c24688c5b94a31a25bd5eadf4f89abe19e66c3b035adcbd92ac7e2d772b677e1ae567ef651c7817589a0c2340951a369d34e0963cbaf5de9a0f72685e8d83a9d517d46d07c6307f230fa96b2d6fa032d977bb744cf2b4c6f37a4295b565bf0e341da8b608d4cbcbfb859e8848640d83f7c7ed3bd5871ef3aff15fc23586b32e7425e7b7924861bb8af168a966cfa357e1bcc0d0e2d5a43036d5d8d18b2eb12fe1375140b39a3da35baaf225b71a1e9300760c4ad3542420f56cca2c98aec3658b0a28dcc56fe7d59d6b106f91de98d4824bee6a25a2e0a9c6f10ff7ef4d60faf88892cd70b6954dfbd49cf4dba25e2d56cff967b8f18374d0c63482936721c0f211965398851be1a75422da0425f34484279e9a0bc478634d214764e217b908000000000000000", 16) );
	
	// entspricht pow(16)
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10) * UArbBigInt::fromString("23577143086516633517202494207066346504446001630010610673720512894728981306250894783352944712223772710610550530324984833373563793859388846715324867176252750931051115449565299135837058276200101517687508481676171461472216155123862348821878208529919672811898178397613168853131365883163926173541498741353539475373257797249609172710492323605953286632415619227574550855185512337089269678588354895809033428078612570649355264251956781951005553332249438795633710516201701603018720933469665456377664749407817765000129994504760525074219121971955776871933397253520938797048810386205891122219502585686598568247045522917110058296047993256484321232610720482501804404477768803327266927313997542971960408270787215695462913907586774484851922546578341081510316918248354315745137830990090137415787287809452213141592418326997246089257960612772004093779109162007812770816338304118378777666277202634989601201699942642802310201818113417254201926278569720550175327701474239265559758039231693870147983181489513630918700271548688048003976419684218534906740669312224537050772460183191235198400068663100634207259718656113165114795883209166880859120859166677360293886835539250901601409493872655818190727420352481386830903101966783030995920201833174416049416836092127448779816291392836789633024", 10) == UArbBigInt::fromString("29106540588069347326555872006556754742026083363881313975588682605580888429668640098040917808959181856497719454504646807431290957633655372344460982463883040326006835676823220743446496288750358651586018231591518183809389659908862622540603273968362806316091869782059526956989039807203525151630059083223390288086324130258663300094870604323288799387150746422776390031332377314201059088298118841272080785332749022146040711084139931564615893863472859502959361144409941103403594815826630454198070478146788556727174208108597328763752018692062430472422626961400100012196719902174734430816410671465172202152246099396506673536860097898937632030741698362250470284858569198940232455516629517074284900834557834317534495679796683885572628450714705370587521902436299050621715569621076087079770113504736642667074838481511066163775249745798658609606698519500222662850480801169532577709337587184632794403063519555029352121064879759051839623575142067854035935400096572521636327302177928956171386362646659369616231336701036121801620867031909760412922527256579344918338555877773512553844556179791098325367317505015616536655724962973703712102572823935270931113651457629307742647674971760126769759498443769853816018203979731564961003264642914905079643930922274556264638197442547152778556964054770778659328155632311633780986837153805189544440432717063237198354745214959616", 10) );
	// 10 <=> 16
	REQUIRE( UArbBigInt::fromString("a2aeb24566780652625e99853cc671dd330d593a9a54b069e5b49ad3456656546209c2", 16) * UArbBigInt::fromString("48f1a730c7c11abc0e73dff424ba3c43dbc83f6620a358fbb363c3c49b2398f224334521c2f391ee8206a71e49a3ff5de0db8b8aaf4e3976cf1f76f84b2c36f21ea7b3d79cd324254c0666b60e0b67394234ba513643eb7a43d260b60933c41ff78e34e8add3931cd791ca76dda24412d27849960c55fd2cde5939812e01d3e834789754207a69f28a110b2ead7ada778cea138aa80755db5f3d917e379e869018ad943eb0e52961dd59857ca70900f73476bdbeeea76125d1326cef639c6e95db3ac1ee5d0c8516925725a3b02e336ecda598b21bae6b1e0af8413dea94b545619cd3fe41bdb241037d3026126450ccee1c16b6ed6b367e796ad14bf5864c9e82743315b9853adad345b5a056c88ecfab691de1ab4ab8f5af41a583c339d9c8a41aef9fb8e1d96133922843fe225d0a65c756df174914f2a86f885d46e1f07874de5f2f8bf3def7f514bfba0055828ca1c9f43fdc6c3e800210e722b75c0dd2d5aa3c9d938a355088dc544c4c9a09ca942cdf62c90d5a86b1479decaee5bee7be47ca4cc62963642d9e520b2e7f816fdb1c64265f869bdf6de4b6d89ff734cb59061be842f1f89290a0f23bd32731459d3a486da323345a8d46e1d11deece7669d013cf5c0ad92bcdc3d43c4d98944d75eaba7cb22ceede84ff5060c47cdfcf0819c501db4d200f5c8d37b8de211878ee4ee35fac9f013e833a9c3fbbd96de8650b0ab2d35ab56796908000",16) == UArbBigInt::fromString("2e5ab2d84e246ee63a68d92b9ab050955422eb3b6ac8c669ea4e38d10f4afcbdc2b827741bbb667e0ceb0b33cd9f49518f86d2e7083d30972a506f7928b3f1f87fe62d7498749726e0a456ce1ab0d599faea4d8a3f1f21dd1b8fa51f50f129a11605dfffacc8df44af04610b042258c39aec058e4ed4b6516b695cdb81b3aa528eaa5f7b946f88411a4f0e6b582c9d66e5d6d9599d352ec45f503257b6914bc4603a9c0801e76c584f0c6d2bc177f086cda08c2d9e248596d6c198d95a24c09bb6da1eeef42a27f5674f4f3d90475257af2eeb8e74e5ff7fda3e29a38406be64a6f1df0069786dd4b46dbfa170b13d81d67bdd3d0393c2aacbc19de2f55041d53fdd52d4649109dc32ab16091be4c5d6cf7ddcc289413527d979c872c68316229ca275225e93f5e4f8e02cad16e8cb05371e1cba6ccd1ffd74f2a47bc52d37db0d3062a2bef528aa083986fbd05ccb7a1748b8cbb92e2d2f92ecc76e9b07d91694e6df7c99732acbb40487ab0fecead2f68b285ae6f795d9c17d2d549f9e97790e2217eec4db1264d4ff8031a7bef29178f3609487378894c421842ab4eb291628389d555850f7f2bb2a646fb0cebfe661ad447698f280b644859766f34cc4643d35529a07169fa1c50eff9f2074fa7f5290a65131b3f4e6f597db89fdb7e1eaaf7f18e05e02a38b7ba65004625c05c1adeb6014fa54aacc4248e20c7004fc62c198b842eada4ed94c619e1d93ac6162fa77f45a0e51d3e7980f287390b6998e014097d33ef66e71b82a1c2e010000", 16) );
	
	// entspricht pow(21)
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10) * UArbBigInt::fromString("67606466668371483076984642398725669168298251741131168116199116299940853543108277125333925739178854079177952281004833593072257490631100812389885618578459343455903387222822634807282412776077220914449109065089312488391263616145621556080556452496489952008210341350145293251753948957211464893709978552223499355974511938186716897446356657766488451535406136175329158463176783289681376548974472212495437132279278345019205022517226589334569704531619779904481359655787426906587995279696369444534982075990569412253822111917576440502303727358016142388281989152245528030300526171025750950186145302253076367115260187423913129713994466979362283448480284656402983722014874356071920172505821137160157826967544941622105557213658765822105241333910305451596067127396412436601389019600411350217974842821804370366904919365715143954804518310389197716410897838446827446743731106589230662355511272146159940944201360838800260505378564139785944491193649018853793650209540427747789388770956654214132309615307032933707864303570885028280671236389513945838100440402505107782444426759114572126306112076590490877342803099399311824873454363251905106388803307132525373051647562037820592607069889946108879938064880643819093224015626225869314553507577410232823222590377665006397012768727145595172973083188357943058143964932534578740826008931931793764190144264772119245971948824427360593786527842291728013571905192613834388432212746488564702950940128831115229684013022951170389259799961283229251358831802293825189694887971534109179168002834577293096206722210872666635830610875113207627450550478307752437692411815108450030598079390998823519784138980789156324812621692495851458834166590301688330657844933311060873158066176",10)  == UArbBigInt::fromString("83461781560135579948439463659003230891752928065673505515215973128110737412041471657312641163968935529981245479564740731675787134058202761915789365397356688300232907123679667543113306376932952063943083232515877259535370982735560569343953408652465401213196433877596833877597707920714348026898736145976062921270190456851499018149583574454845776143541052201758328124728113836834931751996548954007016457698926187169028741707504041519158017663986242019969286806333582466913666421206220752357231531967581958311518099854239884630157028995883019950450146954525396041935866852740895705626902017374656081658170347139300525776464083470237213789111858913644565068405519407769575686549166932967261395808965196797246466250457570399065009498745727893744689767407455113148813152985581015005233731119426393793069975909372466795624807992072599417902634347853797986369883650773555040861258741681851759860554657039896384576312173268641063717847527578417697965266276126362266770100965383840823778778122481322987001403030017319294422477358043142493868651118527630903379128798517444894907528286752291473713751460643378335873687038058146081745277334940411186177261935608797529061555811407220479557223972603926598328809854213998949041475146534458457975652098649393440522463311395893897535501951529723090109313199876699203099435697977956455291260877141609544240123091584864952101014495858394671170524474985770060376001354312857500816758448241547593281392996993257333781417613515161760105786170177905615192077482399641558762576839517245691798552009939797089817090231393963909016044129554624387428592043995350439419907018556843472476531305582094666887259026358757186805307311454184611145479845831356679908689485632370100262583067587787936049492009664751259887416263614021759286404794686252253184", 10) );
	// 10 <=> 16
	REQUIRE( UArbBigInt::fromString("a2aeb24566780652625e99853cc671dd330d593a9a54b069e5b49ad3456656546209c2", 16) * UArbBigInt::fromString("78f3aaf4078d5b4bd43db080a2f82d6ca698c3f5833b6140d1d7b27ae89951ffc3a8f65e0d21777786ea16ce6cd6064a435a91e1f053464c89d0ae86e8542418efa17ae40f1a01749e8c3facd63936354ad2ba576fb48889d6a9ce3c3cae58cc4a537b4c533ad33ae34e9cf5c733037dcfd2e6c95f41b67c20c474ff5bc5a24b51578e13e16e7f8625eb9c5ab7f0d9e8ad7c64cf0669644503e8a5366213179581887f0c8a63e6a9141b2f02dbcf53ab43a859388e0d841d8fffd80129773273416a0dadc08572dad1a8731190732e0717c8bebd9637a26b273d38889704c1c206e916d3d4cc560892f74495182135643830ac052e9609306a3c99227fb13927e81b1d78e444ed24b36bad59d5dd29195d958ed4a03e105a480aefe7d0c4d9278d3032c03023d7db8026604962370b53ac63118a0a939fc66de3a05d5cf25ca7532c4efe37f9c5462c7fbb7b73e0f482d5a17764fc23b21036ef27cec4d0d1acc2ab15c9dc1b086d157262eb60525c6bd82621e6bda1f6cc369a9805701c2fecccf564cb2531439aa7e27506946abe4244365c701e1c5be7009e60821e934cb0099770a0026b2009cc21892d39aef493c0a6ee56908dfecc9df07638951a7fdf174f5d223f6da56c3e7034409fba7850a030ddb6696a256128738ccf1c5a4171ef06d80739b29439591b96ade9b87153a23abebba78a254a99f490852f111ed29a64cda48313ed8b071b320acc797634e29dff60f3cc20ade5706abaaffe3e9d2160996d3d9e75bb4748b803bd0ede22f7fae67d7ae5d15a46b5313db53da9a3da120e8a29f019282e3beaefaa56e4693b07c61ab1c1dccd3a110c956c2d3c1c179d3e7abcea56755cd3d7021923ff2747286e6b60da66c1c3ef0fde260e0d6f45281fd3d36c9d76b6de6f4c1dcfb4449867d51f0942d1da47ad44929c73905f03169999c86d4a37bbffc716fdb13ade4f07926c143dd98100000",16) == UArbBigInt::fromString("4cdcbc06d59922325c5bf10ffa6a5664f96af031768b631cd37e782ef5f330de25e0c4d595596b69fd5121387cd37a235017733b80fed3d980bc4a1eb6370ae62018945502fe567496308206e053d5f7a6dfa27c5204e937919476d51b3937a21e07a676d199c89a9c5b5c9a2ffb30242088a78628c930fb9689018a8e29ffc0cd1f20d65143c37311625b9ba2de407d1d40216ed3b6ac61595d289b90daacca725195e87095e8819def1600e7e8861a5f31d138faaed8a6002cd8b7866f5c979c0c83b2f84006404437babe918b2fcabdcf9411408d9624082544d2ee9fea752a71634668316a4bcc1e5e7114908b50fc94b67e0d264e8818a68683c9f56c06d791ee0e743e2da03e06ff93ec52e0c505571b99736b38f37a809c6aab27f43452ca28e892809731a6c02170c4b1b3875c0541186a83f5b94050b2adaba45b075314c8af7bb85a0f6d3ec72eed0bd8bae628fe896cefc694efad9652cfe16a26c28e3a5a4a6c2e1c051f06ddd07d5cbd0514c598241648cd93123d235e84b5e21e8ebbc384278beaca77fc4e25565b649bf4c5ce179db197e3d8b38ca078123991d68c60557d344be61abf94287d7c36ea39e77611095338bb34a053d95e4b0593127d3095202ee4b25d8fb4471fbfce324954af951bcee9877b7d3cd1b8a807599d4053cca62880705702a027995ee6002c1026bd8ff1089da2fb3c33cea34ea38ed44b8361c58ffd8766bfeeb1c8df4ff0689eb4381097b269169d413274761a871e718426d3c772ef5b1352476a2e8dd2b425b7daa411f9033a8bc24a2d9ff142da549466ffc57b4ebf0ec05b4c8da3913a25e94bdd30c8edfde110e1af3ee1a709a664701bc04e220a23a15bbca5d63b58af1b7471ecad31eef9f819e6eb26705a4b88877c65991e310739eea7163b9b8a1336d83f384f27ee84b59681d46b2e9a20d489bcd37bc33ac9c652de4c6c1bb4550b9229a43b43fd89255f2b839de9a71e86da756e619a969be841df36a4651b101c44ff1ae65cc200000", 16) );
	
	// entspricht pow(62)
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10) * UArbBigInt::fromString("381473284490876596166084575814719226543190872026510781085889295180097440953255397413834069565857592781423604389899540991788714466919736700116266124252111284692345467074012113324857763290913547246852318440462680480381913510379391965174403138774844708808329059965425165036135043112567643815395749585631516383837338185797481565129445817986852981873665743270359560703802684175951196244838050173839750301020118995266654251020790850515563778024837439636817150724817349665221764197027143944525667291833834392039842917892589265003736844759408525979315100758315709512517722619313372304168435335025966271795046749314318525965853302065974772587915713771996930124174368476042820484943590481658495198399534963923205529464258511084412413077461993408354683457177449681239974827499919882515587801871128156253499964582418166136857823103743828068535623638178578603045751486387970433798936854487988056194904717799830286078015871480932180397500383545314588992419943187695098012275892086698898828183482616048321947174225300720279957767019905765330862811850683526045354354260137830742449117377871854738400474678216368719287776654925080003106025749323135098408111931427905385106406288546237327788068937489566322748585427322681284370734332706924106152460228597756296035217615544042072691800829569838573970460048846438941257685519868915169506323956468757113452860273501362878145824979893736861224590386805366643416485109966267907314541354161101655882915062884979447848091007841551570461937235901300677029081922454006632130753631765670198668912350110733953459976560026552855822475619081589646230040539718423406223551924676015441791491267162740509991206582534646638727039686528022497761037617858080397556879926370626981792990248564525270494456212505372126941076427985143481674426802795418086718444449379763401610418096024672339361549397073744651679476415273486929926341279254054419685828994088501432645922908703966304437690015667317833646067876408184890823660982889684962272916522953972920735103111154227699814507221206312358385004804309051471225776846530691009319652129433998393789278847393932474763954331470287031409381057612796098758549134624183778662505239604608978974793334089002420006132062099150039786192873895247022723149424090284597247568800545869969156613181088946708829920269751521316156706478654097278642315984927701313251887699984331419345060029137672412666093612301288778758237538049450927848103113442070870375094425341772474760758483553992214592758775326430069979329307030723365623470335695337482690427104675566388777634888636823013501220883033665140758375626564161012160617350049165105271893705370470209997969426040081382123964171861761069870377930652109289170352144062542181278044034192595605459313633323796677932148992107489642476237721537108858039182086812274666831811379283316508379950221252927709904024374430924036518453752619482082178035417063006669768755196384839444868279627900997337366857392829750498170044490338783707400547178248349912657882259863686090329068621532614209489323005948309705014569487985298215934397116120747766004742489017619270150710185801143447107888113087822294320543469321177854992087964017053824774964866027059867831963116697608177587536042240374066202766893555499025250820956618344962720245076062412987644668866861630117896630665127197307281441567337910220831223553792316228034162428013970119662418954817537942144852364866595346215282920697578714042421044667498392037313839902058916505710186413787080103387420865658576722063224546642636821019787060601353738276677497873775079247000099895366108923630368897356750015236923801944348383217279395296900662436165412192688587911647071411541585328992921554958214346452034699099012240123125283848328699720017728224433497007258534997850485436479927028907156908454534040450425603420287207649423245935638366600186737427352679602418702080838684982402410809855310014758130123501191288810853702244953150007434258467269328902822541557296827515328479485699350401931615607167353535303415737441793516519745878011913132914759212517104251364812549370809521864691500300807779985364128872961957310079362835393653594266002881032784597176315486179003854745339825364580989391857959327079034338144006495003214126373320564556082658663937856109073580619406468752885266006881798598815997205773471149997173485159035415976129104328696957410712254221171585347271443843758345167691413645953408790308344038805427951237378594712180489860554922403178949997879554355449994148359726951397716425586607764147033285645295381842356094831465226670314013403909767075342002175610349077895563354238820577954604958723305051463791128803548808083480830210687157478720444549272088145819805328492945607149892030977411046946991663915176107100423675400727400224054275694243982472117087411017362219537156510536789495461396686679848333208607685807314257977644326542195709678086093873658195493428296016951516467774571659488324791591403600664756286405183534845341464944276344757092735148495178969276370161898024701070101951323201657987501135545139830885383979967122368343245338124217836853964918074696915123757370159284047583922992038794614025145001446816895570326016353311583879864826425250253085949861057614613315584", 10) == UArbBigInt::fromString("470937789093185404442880641048476339549378415158995488528348073796037139338418582942430772643804988463686442999469271319304214175093376387276861758632617799158532362763571267025808584072018180192394828400562935905729380582654484176185129288809262212955875690952227977264678375870866634090286051308738091681100218332777287803121627369969900472333269448807768563548285164242923054510344243153313839297299849196380986473052918837785858310031197471276693355340096438670267914381472291465662766659195949675832363230756711058922221022676088830883455462761946155242230890560642524541879101727046408702633822863977227897294586008720466088710526775374277585244211779363672563777454624482858147959852010490541148281300574395519060745459409408034280859050275183292297351449481206465867124993143447772260957950144391599313480453218950613677890364314987638212084772449080994247891384696941332499080263677902385714772528062943917609835008770602922223211160915790927153637873191258998187519392341011798829343517789223906423203577760980351064485549997662768384376724782148937935641654393045845120032210988696555466050658542960734844280227425853250889120083528406516724026586718180620270927576303763359682450735931674897654963651466694914763499725958440200117950630129345664836449849952006143659653581884607605749972315242692183242084388243571550721353044894490857337557820181182863832037218624232459419920610548125100522778286983998778403820131943972699826669041104921030202740697676286028244343724672746652363554816054728035143307852732068977776074311307080680196119019539459116668490429964467499075818852232061193988218378692790068485873492095069810629620566740668228511071468011088538522671827107512942629463612484977139997819558214000642395789951476658345584443129662299641466305580369618410088814618584792337073169923698981492422015322636289429108760979441648510763580226630836181261370082171655003086449167626525315427818721574612764366459122972972031583541272096772164735623895040764180966572468150028846764262210847664247789251452037532847116708268903299823978554229407378483353204883353062192212592729144637492565553452828704124235617180492384686254015868301786594091402309184324461133431466195228854745337783842873221612440241095229471792012910719495889673858981411833451021412019367600672351594152908785520566953744560461936429031748921987856044219508149081349216387653823546031993021310341786765272704441546128784674426127977159158813670038689157683202297041765309372170423369820679417939622874995809354648684226716236375202242221748287207352179533534704047166548840715557454796272135542597441939217557951282031325729710287107262240407986440437022814253997097933389238386050244048833717958248757883770215917978781515524753000073683982792320762582076574342917892206334669116135261569158209037895431441760871620444914181517763764870786669922520656283506050328095120429968241477871872632940803617838679899552665849895043091100895427147455823952315797418738949248666157424567677912752364016392055671309041757512502260776312380648830391778548017164673989132745481066940870286419732676654448114931383844717954433859606485336969127353807626547217209712466572525719538380971566277470759067008848173794704292327954162424900336414011797014393584296821185279855350318706386690362175971976731833662023844478208103874513717479230519176790204163088074947586435740665470904553791549092493164801294305999854825009564196075518980203531457946199619514821526318128562568957023714760208146922708403911223265403512750704805228195087143726667403010453525655500732164386192239939556231272589769733204869787099571652444565175605625739250901105794457568075385304605816812514508941547907901371117793949260277670240479507038650340799077842296068093012627361728489939378952666273566167567561991319338126445214869869376424977993605568608125776437953401831070424091468712521409767210705905965749756183541401648642683786907727021192720899501139306049658657437190549004731807285782042381710880858158588706931633778026737873775736387557629491379615288359697432380109614470144354583133620070751979997743764912892368418489628902547891429996463819918411521888208129723392821818380852054938950215220365820876807168993264527883916794683162226392933138299305620252667622343170120402095782446209658976052413618612930852736937265918360343852310657955225676541218196697897552194867881066907358657684417355608399742015639936194562742710228055036744061281193251340478975476997346498794965929873531181159195733307034676385927708739817378668860961967200375030375178326196014680201576901806388745187740988643293177322988927842744752787629001672189773686998031409034623784463598577344693312541993972467080835392831407495423445312461686942457553611645101854130685489243096266246023856920775248774233202096413657410284105242325206495194781550274797854226020420170626483978259654553394658348559683459966740511135069875854733505780180330435158027051823148019132959601137627084522453800969043129152164627251897467368885534730954170306030292784544341176836709275534464035281332421989762578829240442450179799379734206265492269998370319625462246901043028488294534412588860946986069115285386890253376389280768928893801521658948080988678876388749974037543449763657949858758656", 10) );
	// 10 <=> 16
	REQUIRE( UArbBigInt::fromString("a2aeb24566780652625e99853cc671dd330d593a9a54b069e5b49ad3456656546209c2", 16) * UArbBigInt::fromString("11285c3fd14ba2402ea69757499eafe6a80a0ca369e93d916f9ffcead746a32f289004ea7daf55f1edb5a44e9379c17611fe4efb810fdbedfb11c42ca823cc06c85f224b8ce51734d0c8121b8f6e427233219e6c560390024d7f1a1d7e946c6fcc219fba88d90155f62ad56eef6ee94ab143b885d54b10115a0e4bb853f27c67740545f7d6f2841d3c74400e26d9a9595f2993ce6d73d5595ffe3d1da43d7d8d2a7a426ad7c82a895c41b7684d0c360f3a1941a0d62a15278a0f45327cf4441172cc7c0d522cdb9df59616a8dd5ed96e41dc78ef25427c34b7680bff1b50419b7828a88e778c463417f065d8e25eece4d7b3db3ab4dcf8511fc0a3eca930fa4b26311305eb0061cafa90eca0a9dffdba9d07dc5896e3b9ce6a31cf5b65c4d150209c340918213e0f9a7d0827452c1994c825b1e23d3ff9b5965d1ebbaeaaa18fee75a1875ae7f138c347c90d2b17284ed6a47b73a2f8d0542de9390e6a79d36816383e1205e5d8dcb740c2b0c0fed854eeca4de76ed035c87f8639d23101bfaedd81716a9230246bd243d2e5fb6aeec8556bca580cb0b0e074b177b20464cc00aea913eccaeb1c6bd969ad8fdcf024758746e701e90967b8091df012fbfd7e570297f7aa9fab7b16abb8518cd850b8307c5746c7d0a76a18cb4f7121bec8bdaea8676cdeb67b193b954663371b40f8ece71ac1a8bf75149d701e5974f06672114f521b5701febb12cbd7622ee345076d237916583a9aaca511bdaae639394498b16ff990cc66f0eca93fcd68d9bfd0f45c7944d21ff2c899163caa2b00bfc9d10e8b0b0a343324458ffcdf884d806667b884f34596bb3bf3181cbacd024cc03358af2710efc33e4a8b5b0b09870de0e64be1ac4cddf674fb203fe1969d93da3a91db6379e7f094f982962540792d235ce7d63bc89a0501f48fbd0c27c9456d499a796ed07c1ccce3cf0507f5b07c6158482ce660d277c7b41e0e02f5e8dbe0d37870e93339215e7a332d15ee8230d772c15b6b174b417ceb08c04e8fc7af565a9ef215475b2d2910f5bd98bdbcbd5f710e4658cfd44bf56683b96fdcdceb705a27482f5eaca32dfccf4d352492c9b2dd83f9faa98f7d9071df8f576522e75874f1b8e4e995aa74bc5061c435f35333b74b778f3936921a1ac9a361b36812f2d9bb7ac458c97beb12cc10461f709228f72de7a09fce5f4bf3892edad92cdaa161333e17c71eef5b8d600a0f30a56415d1da1e37abb546e97c0f4d3910fdea0c55805edd5980b68b46b58878955858710f92afca08d2d1374998dd62d08ef3e7f56719d270033d9de30562fee15e5d9610659528bdee0ed7e56ce07af80771570f8d4d7f373897b0eb6a6c54d635e34f64b833e71285857d728f6b20e82f01a4aa37755b2dd092fadb7fdc678512790620cd848eac5165ffd7cdce3359e2a0ea79a6d21290dcb32e68112ad2fe37643364ea40b7420c57497d0883608a4abb13520ed77c28b65c736c0c08b81e88a19de5a259afe233974000354bd245ff8c7b3ede26b7ef4814b55d950b2d54f206d804a4839d51fc9c0a4e8d796536630e42567a66207bccd1e2f4cb8233b9ae05f7cb517d636db28e9d27580d04c1f7763c29eff1034559400112731e9b96b87f3bb99b2d5d6d776c63fb55573314d244f22e16ed44635b0fb260b5344615e99e90e257738f3b0b8320e874a523836bbc3f47b992a9e5d2ef86f8feea5311845c091d72a65a6252b933196ff3f379f268ffaf4f5495de49a3dfc1f6f85beebc2103be924600bbe77151a80d883446065ba516379e1db47c29c9aed397887dda24eadde693f9114abeba3ec5c1e7c963870932e0b66d30a31e0ec5dedffbd00f36a409fff5b3125542e460d20c18bb2bd338611bf1049ab4703dcc0758cfa26d1cffa730fddd28b7c2e86ed7785903ab6dc4f6af3b5e450d4e98d5b1a405f5287c5accbaef13f0764a67bdbff55364046093f208559df1522bab8b658e9894f8bb050aafee85287a5667f19c7874aba9f621d26245360e25a3961a2414b02d6782fc4aafab3ecb801dc74bca137efdb6c7499970945a6ed9c8abcd527a2cb1c9aad9b2ef7112a9b179b367a50dd447fb50834ebe1b8d7d1544a33923d7e782fae56a4d30553b6849312d59b73ac898cdc5592d718877a94583a730141248e22526fc9ae4a298d2bb54c50fd210b03c59a744ba046903a97b2c350255609c6140c3db374239ef2839aaad27dee2fb41d60131143fe196fa0cd40d2ec1369a04b3f2b2926d198716af4f8e5b9979ea7857a8fbcd229483fd3e5426ceb985ecaab7094699971d22cbe91d605525e180ccef3aa5385ab78b5d8e82308434e59bf51050e05bdf04bf72936cf9f7a24572b99162eceafe7a551d68206ac2e0c603d34b8dcedf11c0c2b019c9831087cbac0e51761b1203bffd84ec0f08c8131060348bcc441c4884c640861f0a76d506e9bec8e1fd3890dbf5e7950a578b5f619eb9d428568d46ac0a9fec348e92ed1ce89df14d9f473141e3e09199651ba38e879d2c618d07d4acfef3c1cc81bc3be559e5216eb56588f5b3bdadc38e8c3bc7ec36cd67a8b09162b208ebf0b61ab387aa2ff045dfdd791dbe9d1a7546c666feda22f145b4b8ccb93a947dc48730de1d59604fe410718869d1894dd57b2e52fb5faa11227c54c7a21f192ea087b215110946ef34bb1bba59d1c43abc251d4de4bdc7941bdb4934c16d6dbde196c80eef3c23925bba569627f7869275d8449ac6f163a993edb19f38e3d297cb619f3f105bec7261af21dd41c1054374d25bd2ca93c4c3d36556169f650852231f27e7f1b5f6c5d93c38f9f44df48e14e6ba171173e780f1cbb625bf4308ec768b63151d6f60c9c6dd8d1e06ef0ebba64441751156bb0c80725b4532e3b6f430b1e61be3c75cb7450f00ad03688e9dbcd973320ff93e2b54f0733bc5daf8301e94e5e0b9f2fa4552abdc4354c8856df02fd53c82c 20000000 00000000", 16) == UArbBigInt::fromString("ae73fc1ccb57ae80855909b4d7a4a854c6e85bbadd3f8f63bc41c06e5053bca09ded8222323e403605971f528de3adc51cd8db97945f20f8edfe36e77ef82b6b2e4cc9cc6eb4c5b7698e52e7b7169bfd19272237ae1a03abc00e16578f3586fd46f5e5301a6d7c0cdfdf2d168d7da58fe04b974d6d05bdb4c88be20fb7282d5c231ded48bb3a7bac31ceb52139cd6171a9dd3032b56381bcd698991b03562512f43476d678a9b5cb2a071e3e9e296eb10aee4e9ecc08edb96c5d2d175ade30cd49bc7b719f3ba7fd0970a79f554cd13c6ae0901d0b6069a648a23063b072ff34b7fd2146d5f1edefe83eb022c78fece321d0711bbbc795eeb2bc71dcbf104bc63cce9fb31cff14dfb83fffec7a654d9640d7c3923bda64b40cf8cb4a0db4c004181a7c1e0598d069e424e09234db9e6daa517354aeeb31b87f1357207f1221805aa4b337f261d99306807ea8709123b369a2cad71d666397cfd651d7ced646aa31fc016bedc9280f9ccc565e972d8be2e8da4477017542f7f689a02cea12e1134bde90f821d3a46745787d20bc1b4f80f5b3b4eac657178c762d8339b1ea6a6a4f8fb42b1b6b8756218e705fb99d812d5e0c3b2c0b405c8c13054179c3b343c3659e5c2ab12b1bccfa5c0270443456af05e2683bc0ec2fe8594b294092550cdfcef486dd56de9bdfeef18f2f09b77812826a452948452f26d7e1a8b18a665d712e29fec13a9fbcd25fc4107433f03796880ad90cf85d0dda7203e998a102667228ed09fa18f013c80be1f440d9d0cac9b53ed6f57a91a21aad604e79e75ab0d64f2a8dd8771d91f68e20ef7f8eeecdb117b615235d53876ac5f19a8ea20cb1a684f8f754c35d003d49e2612644ca0018a4d59f5d017227c844f19d0890ad78f5efa447effe70fd45c7aeb359812880b8674a9f21b659fb002d37023a79a732afbefbb9c55f4f6939016191d6747b65ba34e621c52b219ac508c6148ba711d6e46bb3ef0d169dcb0a6f88886bf0856d5f237ddb987a0f0451667b768959cd90656abb1d1bd2a2b3fea5c209ccb0e24c8533e6c88b1d19ea513fef33dd9ee34bcf8e2aced110a559d835e077bbb7b58552bc3dcb5e76675fc986ae189a55e6bc7373fccc82ae4f9456bd0c7a0f6b8cb96a8986e26f8275759ccce0f3b616d63d7d1b7615601830dfdd16c745011237631da4ddbc248e4bfdfa4db1e2e30d04ea1a2c58cab5a48ff69846361557ac39891f9a5349876adcd85e1456b350298e1e90e6542f6fed60cb1b935e068d55e4bf8a4b610e7f83ce1d94bfae171a92107627385f5e0e4281607c94db21a7b2ee55efbd06b8d09feb65dac68fe7728196d3738f16e77826b9d0cd62c4109962ee1dd59a6f262048ce94347c92280f2485115cdaf66275dfca37a98900d3361a91de1049dd1d54b2c14271e52e41d8c0bcd2915e7b5c162bd16ef1b7c528721d2d9956bc95a841ce9840ea8448dcebb11776f8a301a080c5ae1f976831d8a8a87a8e0947b7bb1e0f2288c547c7910e194472fe5610d654ff86ad852d9d0128f7f645eff3e2dd0ce9e8869fcf174e3d97cfefd9a69da3256027a7e5cf79822ea26d10beacbdab0a467ed6d24471a82ec9767975649291153b1bcd00bb9ff41b9786df2db59b4cbece218a4468ad255ac0a577f769601729b7e0de025ffeefc767d38d03cfb0a24d2c3e1d788bc1a9e5a30e786261b57fe3d1d434f27bfb15eb2c75900af7b3965d47fa6a74d57f02349cc8a755dbc447f4ac40db1b3b6151d1c2f02d43d7f86498ced7b99aaae0811d4983394a1da00ef7f68ab53118028a5822df3ee53242d2469c250bd19854c47d5ffbbb56004bb47d87ccee29771ea39fe2ca7435a50da79ad27b4f9a9b1892cb833e8813a216a2fc047364a6838e6756ff7ddbad60dc273ae412471ff0ed70cf1639c734fb7cd50f0c377ee941e5715ab207630a36580d1bd05533df136ab8536e4e568743f1f0e3afae3dece587e68d2b2ce063c713773dce98cc19d298f057446b36b8bc34ed97cd6bd443cde5c7c5e29046579a107535ab178fb9bfd6e04e51f269f152ae886e2afea83c8cd416ebb5d1d078e0263dd9214ec359899e8486a0e0f81703e2305bb8f57680cc5681057c39586894d50aa9388aa07b6482497eaa185efa5bac025c0b1ed9713c2e2402c95799d9a5753985fe5ca0360534557f2850b0052352dfa639540db47a4ae79190443c1b0f1abf32276806d5bcb2106fd6f6e643d577d4b9d56b6d9726674d69e70afc2edf91fe4ad85b848021f649deb22c9d39cd6d0205875e6f0a19ea56888b15c3ab38947f878e5d8c367048ad54db0c02070db72f32b67bd70e665f4f81ff5e67130f4a37a2c126a4944cd4caca9001514af4987982c2931318b816fcf89535e99699f4cb6a0169dbe5544557dd4d056b082b047d1c32722752e8615768aa80ade8487185d204e203b0bf7da34e135b2231b115a8bbad1ee5ac9cd0ff24a77f230f19f172a3ebd0f2cef61b8b4ac4cd75ff3ee2cb7ba3e806bea55318f7358a8de6e480f0416fd54e1f2834f2013ae79d29e6c041e3a7d4345623c6311629b3a0c1104bdad34c5555439af6c43382c08f1429dae558ba82859d1416c91398366656732dfcad2e53ba63a817f9cea92e5a426ea0e6e25ff1049c69b8d29f7ef1c6841c353425b80ef4ec87a927c1423dfad8fc8cc82333dc5d96063745db6ba444a72837ad44769824643bb4e7d752e16e078bdce5efbfe65c6302a292d09d2a89810302e0fef06c954be1337a29191e23301dc834841290d11fa097e1d8dbf30f1c9bf5b8cee13afd28cc541c2265fcff11f054f9396c5de2ea2bc90849bcd07e74ddcbd89710fc7b07e58a5c6209515182e69e7992ddd199adbecb55c5b5f1a512c088a42738b5b3122f18ed0e5fee6f8d337a2ae1e2c3ec937b72457a8810fcf4d2f63cbd9dc7195645026d0f88a8b80a1b7964f08a4d095911f3494c3ea7a4e0b12390e2c99a788e99b7016aebe30664b8aafb49c5c81c067fc6eb7e90 40000000 00000000", 16) );
	
	// entspricht pow(63)
	REQUIRE( UArbBigInt::fromString("a2aeb24566780652625e99853cc671dd330d593a9a54b069e5b49ad3456656546209c2", 16) * UArbBigInt::fromString("ae73fc1ccb57ae80855909b4d7a4a854c6e85bbadd3f8f63bc41c06e5053bca09ded8222323e403605971f528de3adc51cd8db97945f20f8edfe36e77ef82b6b2e4cc9cc6eb4c5b7698e52e7b7169bfd19272237ae1a03abc00e16578f3586fd46f5e5301a6d7c0cdfdf2d168d7da58fe04b974d6d05bdb4c88be20fb7282d5c231ded48bb3a7bac31ceb52139cd6171a9dd3032b56381bcd698991b03562512f43476d678a9b5cb2a071e3e9e296eb10aee4e9ecc08edb96c5d2d175ade30cd49bc7b719f3ba7fd0970a79f554cd13c6ae0901d0b6069a648a23063b072ff34b7fd2146d5f1edefe83eb022c78fece321d0711bbbc795eeb2bc71dcbf104bc63cce9fb31cff14dfb83fffec7a654d9640d7c3923bda64b40cf8cb4a0db4c004181a7c1e0598d069e424e09234db9e6daa517354aeeb31b87f1357207f1221805aa4b337f261d99306807ea8709123b369a2cad71d666397cfd651d7ced646aa31fc016bedc9280f9ccc565e972d8be2e8da4477017542f7f689a02cea12e1134bde90f821d3a46745787d20bc1b4f80f5b3b4eac657178c762d8339b1ea6a6a4f8fb42b1b6b8756218e705fb99d812d5e0c3b2c0b405c8c13054179c3b343c3659e5c2ab12b1bccfa5c0270443456af05e2683bc0ec2fe8594b294092550cdfcef486dd56de9bdfeef18f2f09b77812826a452948452f26d7e1a8b18a665d712e29fec13a9fbcd25fc4107433f03796880ad90cf85d0dda7203e998a102667228ed09fa18f013c80be1f440d9d0cac9b53ed6f57a91a21aad604e79e75ab0d64f2a8dd8771d91f68e20ef7f8eeecdb117b615235d53876ac5f19a8ea20cb1a684f8f754c35d003d49e2612644ca0018a4d59f5d017227c844f19d0890ad78f5efa447effe70fd45c7aeb359812880b8674a9f21b659fb002d37023a79a732afbefbb9c55f4f6939016191d6747b65ba34e621c52b219ac508c6148ba711d6e46bb3ef0d169dcb0a6f88886bf0856d5f237ddb987a0f0451667b768959cd90656abb1d1bd2a2b3fea5c209ccb0e24c8533e6c88b1d19ea513fef33dd9ee34bcf8e2aced110a559d835e077bbb7b58552bc3dcb5e76675fc986ae189a55e6bc7373fccc82ae4f9456bd0c7a0f6b8cb96a8986e26f8275759ccce0f3b616d63d7d1b7615601830dfdd16c745011237631da4ddbc248e4bfdfa4db1e2e30d04ea1a2c58cab5a48ff69846361557ac39891f9a5349876adcd85e1456b350298e1e90e6542f6fed60cb1b935e068d55e4bf8a4b610e7f83ce1d94bfae171a92107627385f5e0e4281607c94db21a7b2ee55efbd06b8d09feb65dac68fe7728196d3738f16e77826b9d0cd62c4109962ee1dd59a6f262048ce94347c92280f2485115cdaf66275dfca37a98900d3361a91de1049dd1d54b2c14271e52e41d8c0bcd2915e7b5c162bd16ef1b7c528721d2d9956bc95a841ce9840ea8448dcebb11776f8a301a080c5ae1f976831d8a8a87a8e0947b7bb1e0f2288c547c7910e194472fe5610d654ff86ad852d9d0128f7f645eff3e2dd0ce9e8869fcf174e3d97cfefd9a69da3256027a7e5cf79822ea26d10beacbdab0a467ed6d24471a82ec9767975649291153b1bcd00bb9ff41b9786df2db59b4cbece218a4468ad255ac0a577f769601729b7e0de025ffeefc767d38d03cfb0a24d2c3e1d788bc1a9e5a30e786261b57fe3d1d434f27bfb15eb2c75900af7b3965d47fa6a74d57f02349cc8a755dbc447f4ac40db1b3b6151d1c2f02d43d7f86498ced7b99aaae0811d4983394a1da00ef7f68ab53118028a5822df3ee53242d2469c250bd19854c47d5ffbbb56004bb47d87ccee29771ea39fe2ca7435a50da79ad27b4f9a9b1892cb833e8813a216a2fc047364a6838e6756ff7ddbad60dc273ae412471ff0ed70cf1639c734fb7cd50f0c377ee941e5715ab207630a36580d1bd05533df136ab8536e4e568743f1f0e3afae3dece587e68d2b2ce063c713773dce98cc19d298f057446b36b8bc34ed97cd6bd443cde5c7c5e29046579a107535ab178fb9bfd6e04e51f269f152ae886e2afea83c8cd416ebb5d1d078e0263dd9214ec359899e8486a0e0f81703e2305bb8f57680cc5681057c39586894d50aa9388aa07b6482497eaa185efa5bac025c0b1ed9713c2e2402c95799d9a5753985fe5ca0360534557f2850b0052352dfa639540db47a4ae79190443c1b0f1abf32276806d5bcb2106fd6f6e643d577d4b9d56b6d9726674d69e70afc2edf91fe4ad85b848021f649deb22c9d39cd6d0205875e6f0a19ea56888b15c3ab38947f878e5d8c367048ad54db0c02070db72f32b67bd70e665f4f81ff5e67130f4a37a2c126a4944cd4caca9001514af4987982c2931318b816fcf89535e99699f4cb6a0169dbe5544557dd4d056b082b047d1c32722752e8615768aa80ade8487185d204e203b0bf7da34e135b2231b115a8bbad1ee5ac9cd0ff24a77f230f19f172a3ebd0f2cef61b8b4ac4cd75ff3ee2cb7ba3e806bea55318f7358a8de6e480f0416fd54e1f2834f2013ae79d29e6c041e3a7d4345623c6311629b3a0c1104bdad34c5555439af6c43382c08f1429dae558ba82859d1416c91398366656732dfcad2e53ba63a817f9cea92e5a426ea0e6e25ff1049c69b8d29f7ef1c6841c353425b80ef4ec87a927c1423dfad8fc8cc82333dc5d96063745db6ba444a72837ad44769824643bb4e7d752e16e078bdce5efbfe65c6302a292d09d2a89810302e0fef06c954be1337a29191e23301dc834841290d11fa097e1d8dbf30f1c9bf5b8cee13afd28cc541c2265fcff11f054f9396c5de2ea2bc90849bcd07e74ddcbd89710fc7b07e58a5c6209515182e69e7992ddd199adbecb55c5b5f1a512c088a42738b5b3122f18ed0e5fee6f8d337a2ae1e2c3ec937b72457a8810fcf4d2f63cbd9dc7195645026d0f88a8b80a1b7964f08a4d095911f3494c3ea7a4e0b12390e2c99a788e99b7016aebe30664b8aafb49c5c81c067fc6eb7e90 40000000 00000000", 16) == UArbBigInt::fromString("6edc71db84a2ac4c3850ec5aca70d9e412917c7dcd901a7afee3448a6901698a9bbc427e0868560470f2359b2a69023f89257b34532be428cd767f75a737c500b6553ca066c2a28047e4d637e4c9787c3855e57c3e387a5cb451236c37e3a1e744498545a38a3c200cee3f4c9fa80f79daf503de9c0adba548f26b52721d2293883afad90831dacc630d0e40e44c17eefc8215ba7b9727b70951247027e4e9067bd18c09798e72308b14813e82ea687b0a6d2114553236d745f3d6538fdda6695ee7d95fc5e8477ac31b6f00c76abcea68b284e3c8cfcb9bfac5740d7f86a3f0e9965e34c4a7adce63c208b644bc513f2956f13990f92bffe4e8ea18aea62e8ba8e9a67ea4f094d5b524aa9845c6eb241078f49b0abba27c93fed5969cb1c06a7a747f4d0299f8e267eadb75ced3b4ed25569596b7bffed8f8a0cc34d9429cad641f43068340ab2d4e962f84b592b32b78482bce59195c018a1bd4ef8544fe6f151ca99401e48b71e0989e06b802391658d7a4d39a5b7ff0ad329c253a7069fd6f5e38b8cc0f606a4d974e28c99847c54b66b5892c565b2f83d9fa6cb4a5a379df54b9627a060d46409e346de0635ef7e67cdc9991c8a380c43843e1a26053c507be8dfc4962307f722c9bc5aa1152d34cd2dae710a73d1c26d509831a5c9e8ad0c880b1663411d5370cf9768bc9278c15124afee0bc1335eba0fb1771c27a502eef225a8cee7daf78178f8cd583a19b88deba53a309309403789b72fd96831138bc3ad09f7e1c423dedc14b92721969422b82a68eaafd82814e7ed5fa2a46bb038beb07fd911eea7763cc7f7dd87c49656b6dfa551b3017961ad58b3644e9c91b96bd951e37279e0a154ba0ff308773d058a6d43e58c2bca86443a97ab59dd1ec7d8afbc23dbe1bab3d89336498751cdbc64a767f224f066dfbd783b921ee3d312a9ee4425e361ae8db11436216f2bbf34dd0d3f698f3f18b7d0e9505625c68ab94ea73c4a4307e2f7f3b5ef6532cd7783e93753bc8bba07125d8a2dd23cc42cf83916ec458a28332408036d70a33ef4c8b3c58442011d5606707d7570157fcf97b859d7f7450fe6adec452a2093d3453aa835d2f94a06f85bf884cc8395a96572430999b4912db48a6eeee6e8439313a6efc8786d75f4fbc5573ee89c85b7caa81edb7d0096e03fbda055f8b6caa857bee919f67e2be7dadab5377eaf6a0d827bdc95cbb15656d90c216e16f54c8e12baf567fa900ba37b6048b4b314f544b84d8b651b49bee2266b88d7470ca648d54f051dec0e16d0dcaff42ef5e8180175da7268210c159f42510579e4148b726d00ffdf7441db1207aac437dde7dabb339243cb45b8804a2728f3360615443df25bf70b9c466a4677c980cbc6b96d8cf0d7be89e4f12266de7d55636e93fa2e0ab346bdd5ce7b9b6de799872a1288945b6ff887be3fe0379f761e80d065f366dcd82907ccbe5acabab083aef5ef2f93c1d1495cc346ef56e04a8809976d8f89c47e1368f1cbecf509abfa16b9dd5608060dc0e4b0604033498dc97a71709bb75f1cc05e046a6e999bbc814579b277b23341bb5d95f8bbd02867ccf71ed70f8d0235cf37f105a3e963918b027a42e0c4aa724def1ade6f5ccfec69d75775d16271bb0b2d621487740be30f192662d477d1d56aeef8cb249991d3cee3ba4197a3d8421a5c4243328d700db25b88d00cd6975761680d29e8065c56da19c5dc285f12378c45bcf5896341425dceaae2253baea2d17d2bd4fe7a7a74bb69130b381db712ce1a7cf49b2a14d014b8e3db70f9c31dab535a6b14a732ded9a4c4af5bcf8fd078cc172b18afe3cd8034e6ce4cd56db70b620ac64f68dd034db25de6084aa6028b6e8348aad3f00d813ad7c76587d45ec82f8d789af3bbae0ecde1adfaa65a245a8e6eec6c24dff47751d92fd6ff280f4ab6529310b42c5775f8f5a224b0e4ce1b9fe937df64865edf9d086cb741b51d496c34d5a064a11c7983460d7d1cb28ef97a1568004aadde63bb4026adc922e7166a2667613b02b1eb7403fcdfdf1dd9749f2acddc2028f1c05a217f3d36c28b231a7b042ca1974839862c3b132297ca129560ead2ebf6798c3f7a0b583586d89872dd00fa0dfe9bde7316a7027a4aa5a5b263175b10731eb95bd60897c23fe5f0e34cf8c7f2d2647f9d3e0a58cc595ef662de18a5430450bc8f8030779f04a7b7b3ee2e136dbed4f9db5b18cb045e624b95792484a43e78ae3f6c00fca04f9d3f90a1ced61f878c8bddcd902d604bdfca00964cab5644098141e8235208342c062622fd5550db147dfa8d778b9ac79c4bee6ab71525da623b95cd71ad29ea075942c19993fc6b8f4e403c38d2cdaef50bf7666e10136f23c670cd79cb38b74ba721da5426feda00c2a4f22f09f4c10b3dbc164cc49f5c5e15c074688b5456f1d8d88ed9fc9d29b39fb76089d4cb36664f6fd198265f518c37682b7b4b6e7b1eb79cb7bc95118c42d60995ccec304402cc3520bc2bcf05ebb7b396891c82c64069b51d168a1d1c00f60118d44aebea81dc0366adc0b9bcaf91cbd4ee42bfdecddb67a45b37aea04a141e1b1f4f013abdd8ce88308b19ad006150d2acadbe2f257847382f9628a923263dd8dbf8c83ef10e9b4233b1b583c35d08543e903bfeef1950d6f6a8ebb6c06bf8a2e4d33fd30c24688c5b94a31a25bd5eadf4f89abe19e66c3b035adcbd92ac7e2d772b677e1ae567ef651c7817589a0c2340951a369d34e0963cbaf5de9a0f72685e8d83a9d517d46d07c6307f230fa96b2d6fa032d977bb744cf2b4c6f37a4295b565bf0e341da8b608d4cbcbfb859e8848640d83f7c7ed3bd5871ef3aff15fc23586b32e7425e7b7924861bb8af168a966cfa357e1bcc0d0e2d5a43036d5d8d18b2eb12fe1375140b39a3da35baaf225b71a1e9300760c4ad3542420f56cca2c98aec3658b0a28dcc56fe7d59d6b106f91de98d4824bee6a25a2e0a9c6f10ff7ef4d60faf88892cd70b6954dfbd49cf4dba25e2d56cff967b8f18374d0c63482936721c0f211965398851be1a75422da0425f34484279e9a0bc478634d214764e217b908000000000000000", 16) );
	// 10 <=> 16
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10) * UArbBigInt::fromString("470937789093185404442880641048476339549378415158995488528348073796037139338418582942430772643804988463686442999469271319304214175093376387276861758632617799158532362763571267025808584072018180192394828400562935905729380582654484176185129288809262212955875690952227977264678375870866634090286051308738091681100218332777287803121627369969900472333269448807768563548285164242923054510344243153313839297299849196380986473052918837785858310031197471276693355340096438670267914381472291465662766659195949675832363230756711058922221022676088830883455462761946155242230890560642524541879101727046408702633822863977227897294586008720466088710526775374277585244211779363672563777454624482858147959852010490541148281300574395519060745459409408034280859050275183292297351449481206465867124993143447772260957950144391599313480453218950613677890364314987638212084772449080994247891384696941332499080263677902385714772528062943917609835008770602922223211160915790927153637873191258998187519392341011798829343517789223906423203577760980351064485549997662768384376724782148937935641654393045845120032210988696555466050658542960734844280227425853250889120083528406516724026586718180620270927576303763359682450735931674897654963651466694914763499725958440200117950630129345664836449849952006143659653581884607605749972315242692183242084388243571550721353044894490857337557820181182863832037218624232459419920610548125100522778286983998778403820131943972699826669041104921030202740697676286028244343724672746652363554816054728035143307852732068977776074311307080680196119019539459116668490429964467499075818852232061193988218378692790068485873492095069810629620566740668228511071468011088538522671827107512942629463612484977139997819558214000642395789951476658345584443129662299641466305580369618410088814618584792337073169923698981492422015322636289429108760979441648510763580226630836181261370082171655003086449167626525315427818721574612764366459122972972031583541272096772164735623895040764180966572468150028846764262210847664247789251452037532847116708268903299823978554229407378483353204883353062192212592729144637492565553452828704124235617180492384686254015868301786594091402309184324461133431466195228854745337783842873221612440241095229471792012910719495889673858981411833451021412019367600672351594152908785520566953744560461936429031748921987856044219508149081349216387653823546031993021310341786765272704441546128784674426127977159158813670038689157683202297041765309372170423369820679417939622874995809354648684226716236375202242221748287207352179533534704047166548840715557454796272135542597441939217557951282031325729710287107262240407986440437022814253997097933389238386050244048833717958248757883770215917978781515524753000073683982792320762582076574342917892206334669116135261569158209037895431441760871620444914181517763764870786669922520656283506050328095120429968241477871872632940803617838679899552665849895043091100895427147455823952315797418738949248666157424567677912752364016392055671309041757512502260776312380648830391778548017164673989132745481066940870286419732676654448114931383844717954433859606485336969127353807626547217209712466572525719538380971566277470759067008848173794704292327954162424900336414011797014393584296821185279855350318706386690362175971976731833662023844478208103874513717479230519176790204163088074947586435740665470904553791549092493164801294305999854825009564196075518980203531457946199619514821526318128562568957023714760208146922708403911223265403512750704805228195087143726667403010453525655500732164386192239939556231272589769733204869787099571652444565175605625739250901105794457568075385304605816812514508941547907901371117793949260277670240479507038650340799077842296068093012627361728489939378952666273566167567561991319338126445214869869376424977993605568608125776437953401831070424091468712521409767210705905965749756183541401648642683786907727021192720899501139306049658657437190549004731807285782042381710880858158588706931633778026737873775736387557629491379615288359697432380109614470144354583133620070751979997743764912892368418489628902547891429996463819918411521888208129723392821818380852054938950215220365820876807168993264527883916794683162226392933138299305620252667622343170120402095782446209658976052413618612930852736937265918360343852310657955225676541218196697897552194867881066907358657684417355608399742015639936194562742710228055036744061281193251340478975476997346498794965929873531181159195733307034676385927708739817378668860961967200375030375178326196014680201576901806388745187740988643293177322988927842744752787629001672189773686998031409034623784463598577344693312541993972467080835392831407495423445312461686942457553611645101854130685489243096266246023856920775248774233202096413657410284105242325206495194781550274797854226020420170626483978259654553394658348559683459966740511135069875854733505780180330435158027051823148019132959601137627084522453800969043129152164627251897467368885534730954170306030292784544341176836709275534464035281332421989762578829240442450179799379734206265492269998370319625462246901043028488294534412588860946986069115285386890253376389280768928893801521658948080988678876388749974037543449763657949858758656", 10) == UArbBigInt::fromString("581383835284753150757792743254503965563682949975624740449206802170112305911260228841699746429982402319944393884767136004013508479668122266336149477495011691457436618479769017938488971013724214995582563293312260016540267195343678984565524728416499575460002179241805379297158065913218241298040902980114251263312744013275682351454764450895528801269325153709627583686697886680599358963104083238657855478778258076764637379002626713133966757989331524133594838525691890145419645152107115185062962669182722784191333483208937953050452008803974784494027439308876280992598805986228770181552334351957984171179767225838376741812290256581178627046233412355030064263731099226875646624149799415809179562351713907369352797601938080703580709995429880245631918284262098925092105747865882609671094525225244938934352844614202935231271266071403666477373016244658554380692745624527135324215124724599566846912076942587330733659926060043528619719353333900305794777917821930588620075065282269076116921233718601762707138915586624761238744456026876412590211005910967056532107907222677524089247257348632098558994851345697458669654533068420437737665401870967057998006722180682450095679982189828231151103133341668073822978322477461145738594191969333458594169635281497712959990947449586601787911378758563618485786688043680688871059675538844688656500415087180668176679338240604812081750836195116744242112267573311334197419065187035105320858885185061805952777590616493474079832842100258469798216787539602633661075944188608846303551890327727444803158612563357180940129882846680498227345941642628786539410945367503836089693699496056741630911427728143084960455492195226324272397003416891041822115910627466071150802149486151649216966100739594042082062558843737565593718705836286406924580201192210975801171735778540560427413585875340737930413607794277648745972859113124220906523074020031475843050451044562350531076289358187672372788790697863555873557162847930368632408890700524636933578145390487301556416359260640409908781552331379704148552260295788046645702953542942389395383399818592040896491646944595660476846268088371485810692874294553023840167540402997545616679416859769385328038347836945918691085134480559847038985264296068736497626271452681847139304595267980828246206617066218111665949918158596680888014648844265260464315428729427725487758502412632290568754946307699696589215045125712827125299362345761944099666579816129590193750772925843322724244415688866363816806397356636599921845765509738992712201256464920428076584990901350419583302020870813558602153633893827944900313873331919950134139055738374312632647894333539023667973529291535945384350243884541056482253601095986285973292951112770594351195948611431922329941014449297068910180038790670975894024052666736305513889667423562843715170172290025792989033996712892817342007831357467592928663668020524450840664126079649358701431952480944495578289297298698178359535530073950297117087124320420783749272318534782085612994384752553844613294875447937681830063762805061264896092679999991106751637994748600477295810626486781137787117659199404986861411759057824592698384998749170670428878053982090379923203757492865969514875244344317050673637797188173583632017608231902086790889511632650452662248165120095043611915527841032535988998097997194326036250245592482258483705202796011956314892302771465279743728366540908455770847061710450901459466811748768244583199032237808314117853258468428093209647986614531861049967111291201630938701084320992440032573741021918022314031631664532560303182465415551731899219724126832832735152454400314351703268016091933231645090420011401851400849946071382163759778481487176875706040952384122032729108323971667320011090736757709360586546237832217595026337188970367140349096456837395000290662730264331355554479148781828261155184715260043236000344760975859696232157443604749524523682323497446027303028919588611043246512020964044915822311414691123822250931196416454414098847461364905312598427164442567896991334679549151925582212522403137925912605432930093305994532755111900646971972717973373979864294647555836217573638598478904630038683285465929977712215216723156608858806399380874462733847437232102134651700528927667193907259233269490803343246984602803291532127854088195171940184952798803193957647577454086008120961560457108993537145039019291765732842547821655682294532271945251193547218602532595727697413799573934051744573306651089382933585506676764214055721939150372784309855066316782329765015753679578278850121441201433572491845172696027653837176357975409880093182143493692164325267457107383612220197239105292971046388761946469465663677079784640462999914708793857812503685709784204013708318394111463927841312395982965599818682714453788417114872235778259763742831483183436291061752058664746828610931270579173000204119720885351535533801548246248728460774871816290032810682636318359254106740136498547916631247794694796637809246438488990539734362186640961160517832495227200638563496999268302945640327205261839667393101934396824768905105062923467199098248998571780011262875907452950613636583063536704346676084133380502835084724942106165173143981165079241335122114421968759456926707918607069994083725969011975144052265281211789491374902541937785869378011148449705966187355309189808976968321134896330787720894079595123247047425370515054219494682725800353502806933504", 10) );
	
	REQUIRE( UArbBigInt::fromString("6cef335e0c203820cee04a1fb5b9da3ba91331d8a87c7fe2ebce58316c35978947b180340badbbfc60d2905ed990335e0d2112e9306219b5478dec0816a3d3fdaa1ea1cd153e3eecf0a803c2f676b9309a62f24d2c674a91f1d067fdb9b9e95194236e7349d0ab0a6ef674595bed81c6ac88666a7bbba138bd6f1c32728e1ee85472502f15106ec642b04c662a885e713bdfae88cda84728dd3448583d0170aaba54ecb666146bdc3d7eb422d1df655615c059851776bcc620de6ee9ec8a2aa9d781bbc5526af39e221c5e0dcc2698c54716fe7cbe2b662834c9438dfb03a0d285abe6fe6179f291cbf4583dd16284589504ee7f8f19a48fc97c5737d8cd2febf1680f19750bf890fd1cfe1517a9a6ea9017df585970100", 16) * UArbBigInt::fromString("6cef335e0c203820cee04a1fb5b9da3ba91331d8a87c7fe2ebce58316c35978947b180340badbbfc60d2905ed990335e0d2112e9306219b5478dec0816a3d3fdaa1ea1cd153e3eecf0a803c2f676b9309a62f24d2c674a91f1d067fdb9b9e95194236e7349d0ab0a6ef674595bed81c6ac88666a7bbba138bd6f1c32728e1ee85472502f15106ec642b04c662a885e713bdfae88cda84728dd3448583d0170aaba54ecb666146bdc3d7eb422d1df655615c059851776bcc620de6ee9ec8a2aa9d781bbc5526af39e221c5e0dcc2698c54716fe7cbe2b662834c9438dfb03a0d285abe6fe6179f291cbf4583dd16284589504ee7f8f19a48fc97c5737d8cd2febf1680f19750bf890fd1cfe1517a9a6ea9017df585970100", 16) == UArbBigInt::fromString("2e5ab2d84e246ee63a68d92b9ab050955422eb3b6ac8c669ea4e38d10f4afcbdc2b827741bbb667e0ceb0b33cd9f49518f86d2e7083d30972a506f7928b3f1f87fe62d7498749726e0a456ce1ab0d599faea4d8a3f1f21dd1b8fa51f50f129a11605dfffacc8df44af04610b042258c39aec058e4ed4b6516b695cdb81b3aa528eaa5f7b946f88411a4f0e6b582c9d66e5d6d9599d352ec45f503257b6914bc4603a9c0801e76c584f0c6d2bc177f086cda08c2d9e248596d6c198d95a24c09bb6da1eeef42a27f5674f4f3d90475257af2eeb8e74e5ff7fda3e29a38406be64a6f1df0069786dd4b46dbfa170b13d81d67bdd3d0393c2aacbc19de2f55041d53fdd52d4649109dc32ab16091be4c5d6cf7ddcc289413527d979c872c68316229ca275225e93f5e4f8e02cad16e8cb05371e1cba6ccd1ffd74f2a47bc52d37db0d3062a2bef528aa083986fbd05ccb7a1748b8cbb92e2d2f92ecc76e9b07d91694e6df7c99732acbb40487ab0fecead2f68b285ae6f795d9c17d2d549f9e97790e2217eec4db1264d4ff8031a7bef29178f3609487378894c421842ab4eb291628389d555850f7f2bb2a646fb0cebfe661ad447698f280b644859766f34cc4643d35529a07169fa1c50eff9f2074fa7f5290a65131b3f4e6f597db89fdb7e1eaaf7f18e05e02a38b7ba65004625c05c1adeb6014fa54aacc4248e20c7004fc62c198b842eada4ed94c619e1d93ac6162fa77f45a0e51d3e7980f287390b6998e014097d33ef66e71b82a1c2e010000", 16) );
}

TEST_CASE( "unsigned infinit big integer division", "[UABigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( (UArbBigInt(  0) / UArbBigInt(  1)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(  0) % UArbBigInt(  1)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(  1) / UArbBigInt(  1)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt(  1) % UArbBigInt(  1)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(  1) / UArbBigInt(  2)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(  1) % UArbBigInt(  2)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt(  2) / UArbBigInt(  1)).toUint64() ==   2 );
	REQUIRE( (UArbBigInt(  2) % UArbBigInt(  1)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(  2) / UArbBigInt(  2)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt(  2) % UArbBigInt(  2)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(  4) / UArbBigInt(  2)).toUint64() ==   2 );
	REQUIRE( (UArbBigInt(  4) % UArbBigInt(  2)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt( 10) / UArbBigInt(  1)).toUint64() ==  10 );
	REQUIRE( (UArbBigInt( 10) % UArbBigInt(  1)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt( 10) / UArbBigInt(  2)).toUint64() ==   5 );
	REQUIRE( (UArbBigInt( 10) % UArbBigInt(  2)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt( 10) / UArbBigInt(  3)).toUint64() ==   3 );
	REQUIRE( (UArbBigInt( 10) % UArbBigInt(  3)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt( 10) / UArbBigInt(  5)).toUint64() ==   2 );
	REQUIRE( (UArbBigInt( 10) % UArbBigInt(  5)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt( 11) / UArbBigInt(  2)).toUint64() ==   5 );
	REQUIRE( (UArbBigInt( 11) % UArbBigInt(  2)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt( 12) / UArbBigInt(  2)).toUint64() ==   6 );
	REQUIRE( (UArbBigInt( 12) % UArbBigInt(  2)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(252) / UArbBigInt(  2)).toUint64() == 126 );
	REQUIRE( (UArbBigInt(252) % UArbBigInt(  2)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(253) / UArbBigInt(  2)).toUint64() == 126 );
	REQUIRE( (UArbBigInt(253) % UArbBigInt(  2)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt(254) / UArbBigInt(  2)).toUint64() == 127 );
	REQUIRE( (UArbBigInt(254) % UArbBigInt(  2)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(255) / UArbBigInt(  2)).toUint64() == 127 );
	REQUIRE( (UArbBigInt(255) % UArbBigInt(  2)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt(255) / UArbBigInt(255)).toUint64() ==   1 );
	REQUIRE( (UArbBigInt(255) % UArbBigInt(255)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(254) / UArbBigInt(127)).toUint64() ==   2 );
	REQUIRE( (UArbBigInt(254) % UArbBigInt(127)).toUint64() ==   0 );
	REQUIRE( (UArbBigInt(255) / UArbBigInt(127)).toUint64() ==   2 );
	REQUIRE( (UArbBigInt(255) % UArbBigInt(127)).toUint64() ==   1 );


	// 2 Bytes (16 bit)
	REQUIRE( (UArbBigInt::fromUint64(0x0100ull) / UArbBigInt(                2)).toUint64() ==   128);
	REQUIRE( (UArbBigInt::fromUint64(0x0100ull) % UArbBigInt(                2)).toUint64() ==     0);
	REQUIRE( (UArbBigInt::fromUint64(0x0200ull) / UArbBigInt(                4)).toUint64() ==   128);
	REQUIRE( (UArbBigInt::fromUint64(0x0200ull) % UArbBigInt(                4)).toUint64() ==     0);
	REQUIRE( (UArbBigInt::fromUint64(0x0100ull) / UArbBigInt::fromUint64(0x100)).toUint64() ==     1);
	REQUIRE( (UArbBigInt::fromUint64(0x0100ull) % UArbBigInt::fromUint64(0x100)).toUint64() ==     0);
	REQUIRE( (UArbBigInt::fromUint64(0x0200ull) / UArbBigInt::fromUint64(0x100)).toUint64() ==     2);
	REQUIRE( (UArbBigInt::fromUint64(0x0200ull) % UArbBigInt::fromUint64(0x100)).toUint64() ==     0);
	REQUIRE( (UArbBigInt::fromUint64(0x0200ull) / UArbBigInt::fromUint64(0x200)).toUint64() ==     1);
	REQUIRE( (UArbBigInt::fromUint64(0x0200ull) % UArbBigInt::fromUint64(0x200)).toUint64() ==     0);
	REQUIRE( (UArbBigInt::fromUint64(0x0300ull) / UArbBigInt::fromUint64(0x200)).toUint64() ==     1);
	REQUIRE( (UArbBigInt::fromUint64(0x0300ull) % UArbBigInt::fromUint64(0x200)).toUint64() == 0x100);
	REQUIRE( (UArbBigInt::fromUint64(0x0400ull) / UArbBigInt::fromUint64(0x200)).toUint64() ==     2);
	REQUIRE( (UArbBigInt::fromUint64(0x0400ull) % UArbBigInt::fromUint64(0x200)).toUint64() ==     0);
	REQUIRE( (UArbBigInt::fromUint64(0xFF9Cull) / UArbBigInt::fromUint64(0x100)).toUint64() ==  0xff);
	REQUIRE( (UArbBigInt::fromUint64(0xFF9Cull) % UArbBigInt::fromUint64(0x100)).toUint64() ==  0x9C);
	REQUIRE( (UArbBigInt::fromUint64(0xFF9Cull) / UArbBigInt::fromUint64(  532)).toUint64() ==   123);
	REQUIRE( (UArbBigInt::fromUint64(0xFF9Cull) % UArbBigInt::fromUint64(  532)).toUint64() ==     0);
	REQUIRE( (UArbBigInt::fromUint64(0xDA96ull) / UArbBigInt::fromUint64(  571)).toUint64() ==    98);
	REQUIRE( (UArbBigInt::fromUint64(0xDA96ull) % UArbBigInt::fromUint64(  571)).toUint64() ==     0);

	REQUIRE( (UArbBigInt::fromUint64(0xFF00ull) / UArbBigInt::fromUint64(0x0FFull)).toUint64() == 0x0100ull );
	REQUIRE( (UArbBigInt::fromUint64(0xFF00ull) % UArbBigInt::fromUint64(0x0FFull)).toUint64() ==      0ull );
	REQUIRE( (UArbBigInt::fromUint64(0x10EFull) / UArbBigInt::fromUint64(0x0FFull)).toUint64() == 0x0011ull );
	REQUIRE( (UArbBigInt::fromUint64(0x10EFull) % UArbBigInt::fromUint64(0x0FFull)).toUint64() ==      0ull );

	// 4 Bytes (32bit)
	REQUIRE( (UArbBigInt::fromUint64( 0xFFFE0001ull) / UArbBigInt::fromUint64( 0xFFFFull)).toUint64() ==     0xFFFFull ); // first test of D5. [Test Remainder] and D6. [add back] (at 8bit words)
	REQUIRE( (UArbBigInt::fromUint64( 0xFFFE0001ull) % UArbBigInt::fromUint64( 0xFFFFull)).toUint64() ==          0ull );

	REQUIRE( (UArbBigInt::fromUint64(   0x010000ull) / UArbBigInt::fromUint64( 0x0100ull)).toUint64() ==     0x0100ull );
	REQUIRE( (UArbBigInt::fromUint64(   0x010000ull) % UArbBigInt::fromUint64( 0x0100ull)).toUint64() ==          0ull );
	REQUIRE( (UArbBigInt::fromUint64(   0x0F0000ull) / UArbBigInt::fromUint64( 0x0F00ull)).toUint64() ==     0x0100ull );
	REQUIRE( (UArbBigInt::fromUint64(   0x0F0000ull) % UArbBigInt::fromUint64( 0x0F00ull)).toUint64() ==          0ull );

	REQUIRE( (UArbBigInt::fromUint64( 0xFFFFFFFFull) / UArbBigInt::fromUint64(  0x003ull)).toUint64() == 0x55555555ull );
	REQUIRE( (UArbBigInt::fromUint64( 0xFFFFFFFFull) % UArbBigInt::fromUint64(  0x003ull)).toUint64() ==          0ull );
	REQUIRE( (UArbBigInt::fromUint64(   0xE00021ull) / UArbBigInt::fromUint64(   0xEFull)).toUint64() ==     0xEFEFull );
	REQUIRE( (UArbBigInt::fromUint64(   0xE00021ull) % UArbBigInt::fromUint64(   0xEFull)).toUint64() ==          0ull );
	REQUIRE( (UArbBigInt::fromUint64( 0xE0E02121ull) / UArbBigInt::fromUint64( 0xEFEFull)).toUint64() ==     0xEFEFull );
	REQUIRE( (UArbBigInt::fromUint64( 0xE0E02121ull) % UArbBigInt::fromUint64( 0xEFEFull)).toUint64() ==          0ull );

	// 8 Bytes (64bit)
	REQUIRE( (UArbBigInt::fromUint64(          0xFFFFFFFE00000001ull) / UArbBigInt::fromUint64( 0xFFFFFFFFull)).toUint64() == 0xFFFFFFFFull ); // test of D5. [Test Remainder] and D6. [add back] (at 8bit words)
	REQUIRE( (UArbBigInt::fromUint64(          0xFFFFFFFE00000001ull) % UArbBigInt::fromUint64( 0xFFFFFFFFull)).toUint64() ==          0ull );

	REQUIRE( (UArbBigInt::fromUint64(                 0x1FFFFFFFEull) / UArbBigInt::fromUint64(       0x02ull)).toUint64() == 0xFFFFFFFFull );
	REQUIRE( (UArbBigInt::fromUint64(                 0x1FFFFFFFEull) % UArbBigInt::fromUint64(       0x02ull)).toUint64() ==          0ull );
	REQUIRE( (UArbBigInt::fromUint64(          0x121FA00A35068740ull) / UArbBigInt::fromUint64( 0x12345678ull)).toUint64() == 0xFEDCBA98ull );
	REQUIRE( (UArbBigInt::fromUint64(          0x121FA00A35068740ull) % UArbBigInt::fromUint64( 0x12345678ull)).toUint64() ==          0ull );
	REQUIRE( (UArbBigInt::fromUint64(  0xFEDCBA98ull * 0x12345678ull) / UArbBigInt::fromUint64( 0x12345678ull)).toUint64() == 0xFEDCBA98ull );
	REQUIRE( (UArbBigInt::fromUint64(  0xFEDCBA98ull * 0x12345678ull) % UArbBigInt::fromUint64( 0x12345678ull)).toUint64() ==          0ull );

	// 16 Bytes (128bit)
	REQUIRE( UArbBigInt::fromString(       "FFFFFFFFFFFFFFFE0000000000000001", 16) / UArbBigInt::fromUint64( 0xFFFFFFFFFFFFFFFFull) == UArbBigInt::fromUint64(    0xFFFFFFFFFFFFFFFFull)); // test of D5. [Test Remainder] and D6. [add back] (at 8bit words)
	REQUIRE( UArbBigInt::fromString(       "FFFFFFFFFFFFFFFE0000000000000001", 16) % UArbBigInt::fromUint64( 0xFFFFFFFFFFFFFFFFull) == UArbBigInt::fromUint64(                     0ull));

	REQUIRE( UArbBigInt::fromString(                      "1FFFFFFFFFFFFFFFE", 16) / UArbBigInt::fromUint64(               0x02ull) == UArbBigInt::fromUint64(    0xFFFFFFFFFFFFFFFFull));
	REQUIRE( UArbBigInt::fromString(                      "1FFFFFFFFFFFFFFFE", 16) % UArbBigInt::fromUint64(               0x02ull) == UArbBigInt::fromUint64(                     0ull));
	REQUIRE( UArbBigInt::fromString( "24090311171252216041959356964269510400", 10) / UArbBigInt::fromUint64( 0x123456789ABCDEF0ull) == UArbBigInt::fromUint64(    0xFEDCBA9876543210ull)); // 24090311171252216041959356964269510400 / 1311768467463790320 = 18364758544493064720
	REQUIRE( UArbBigInt::fromString( "24090311171252216041959356964269510400", 10) % UArbBigInt::fromUint64( 0x123456789ABCDEF0ull) == UArbBigInt::fromUint64(                     0ull));
	REQUIRE( UArbBigInt::fromString(       "121fa00ad77d7422236d88fe5618cf00", 16) / UArbBigInt::fromUint64( 0x123456789ABCDEF0ull) == UArbBigInt::fromUint64(    0xFEDCBA9876543210ull)); // 24090311171252216041959356964269510400 / 1311768467463790320 = 18364758544493064720
	REQUIRE( UArbBigInt::fromString(       "121fa00ad77d7422236d88fe5618cf00", 16) % UArbBigInt::fromUint64( 0x123456789ABCDEF0ull) == UArbBigInt::fromUint64(                     0ull));

	// -------
	REQUIRE( UArbBigInt::fromString(    "121fa00ad77d7422236d88fe5618cf13419a0b84f54b6445a4618e3b7a5bf121fa00ad77d7422236d88fe5618cf00", 16) / UArbBigInt::fromString( "fedcba9876543210000000000000000fedcba9876543210", 16) == UArbBigInt::fromString(  "123456789abcdef000000000000000123456789abcdef0", 16));
	REQUIRE( UArbBigInt::fromString(    "121fa00ad77d7422236d88fe5618cf13419a0b84f54b6445a4618e3b7a5bf121fa00ad77d7422236d88fe5618cf00", 16) % UArbBigInt::fromString( "fedcba9876543210000000000000000fedcba9876543210", 16) == UArbBigInt::fromString(                                               "0", 16));
	REQUIRE( UArbBigInt::fromString( "121932631112635269000000000000000000002438652622252705380000000000000000000012193263111263526900", 10) / UArbBigInt::fromString("987654321000000000000000000000000000009876543210", 10) == UArbBigInt::fromString("123456789000000000000000000000000000001234567890", 10));
	REQUIRE( UArbBigInt::fromString( "121932631112635269000000000000000000002438652622252705380000000000000000000012193263111263526900", 10) % UArbBigInt::fromString("987654321000000000000000000000000000009876543210", 10) == UArbBigInt::fromString(                                               "0", 10));

	// ------
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / UArbBigInt::fromString("1", 10) == UArbBigInt::fromString("6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10));
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % UArbBigInt::fromString("1", 10) == UArbBigInt::fromString(                                                                                                         "0", 10));
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / UArbBigInt::fromString("2", 10) == UArbBigInt::fromString("3282327327325825708273258273273258263263232825825739394992080780749242493932813447459093582582732732572788", 10));
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % UArbBigInt::fromString("2", 10) == UArbBigInt::fromString(                                                                                                         "1", 10));
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / UArbBigInt::fromString("147", 10) == UArbBigInt::fromString("44657514657494227323445690792833445758683439807152916938667765724479489713371611530055695001125615409153", 10));
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % UArbBigInt::fromString("147", 10) == UArbBigInt::fromString(                                                                                                      "86", 10));
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / UArbBigInt::fromString("6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) == UArbBigInt::fromString("1", 10));
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % UArbBigInt::fromString("6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) == UArbBigInt::fromString("0", 10));
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / UArbBigInt::fromString("5555555555555544455555555555555555444441122235654445554547555", 10) == UArbBigInt::fromString("1181637837837299615890772977303005548172635842", 10));
	REQUIRE( UArbBigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % UArbBigInt::fromString("5555555555555544455555555555555555444441122235654445554547555", 10) == UArbBigInt::fromString("102256964850719633725637788587322669027978740977851378679267", 10));

	REQUIRE( UArbBigInt::fromString( "121212121121212454564757645640000000000000000000546424465744466464313145643", 10) / UArbBigInt::fromString("46464644515442612", 10) == UArbBigInt::fromString("2608695759652855584042902602291341403871593244214364153233", 10));
	REQUIRE( UArbBigInt::fromString( "121212121121212454564757645640000000000000000000546424465744466464313145643", 10) % UArbBigInt::fromString("46464644515442612", 10) == UArbBigInt::fromString("5925350727381047", 10));
	REQUIRE( UArbBigInt::fromString( "AEDBBBBBDDDFFFFFFFFFFF65156895651516500000000000000000F", 16) / UArbBigInt::fromString("FFFFFFFFFF56556165465466546546546546122222222F", 16) == UArbBigInt::fromString("aedbbbbbd", 16));
	REQUIRE( UArbBigInt::fromString( "AEDBBBBBDDDFFFFFFFFFFF65156895651516500000000000000000F", 16) % UArbBigInt::fromString("FFFFFFFFFF56556165465466546546546546122222222F", 16) == UArbBigInt::fromString("e53e3992ef3e65ed83201fbc921bdf68de2743627f6e5c", 16));

	REQUIRE( UArbBigInt::fromString( "15485863", 10) / UArbBigInt::fromString("17", 10) == UArbBigInt::fromString("910933", 10));
	REQUIRE( UArbBigInt::fromString( "15485863", 10) % UArbBigInt::fromString("17", 10) == UArbBigInt::fromString("2", 10));

}

TEST_CASE( "unsigned infinit big integer pow", "[UABigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( UArbBigInt(  1).pow(UArbBigInt(  1)).toUint64() ==   1 );
	REQUIRE( UArbBigInt(  0).pow(UArbBigInt(  1)).toUint64() ==   0 );
	REQUIRE( UArbBigInt(  0).pow(UArbBigInt(  2)).toUint64() ==   0 );
	REQUIRE( UArbBigInt(  0).pow(UArbBigInt(  3)).toUint64() ==   0 );
	REQUIRE( UArbBigInt(  0).pow(UArbBigInt(255)).toUint64() ==   0 );
	REQUIRE( UArbBigInt(  1).pow(UArbBigInt(  0)).toUint64() ==   1 );
	REQUIRE( UArbBigInt(  2).pow(UArbBigInt(  0)).toUint64() ==   1 );
	REQUIRE( UArbBigInt(  3).pow(UArbBigInt(  0)).toUint64() ==   1 );
	REQUIRE( UArbBigInt(255).pow(UArbBigInt(  0)).toUint64() ==   1 );
	REQUIRE( UArbBigInt(  2).pow(UArbBigInt(  2)).toUint64() ==   4 );
	REQUIRE( UArbBigInt(  3).pow(UArbBigInt(  2)).toUint64() ==   9 );
	REQUIRE( UArbBigInt(  4).pow(UArbBigInt(  2)).toUint64() ==  16 );
	REQUIRE( UArbBigInt(  5).pow(UArbBigInt(  2)).toUint64() ==  25 );
	REQUIRE( UArbBigInt(  2).pow(UArbBigInt(  3)).toUint64() ==   8 );
	REQUIRE( UArbBigInt(  2).pow(UArbBigInt(  4)).toUint64() ==  16 );
	REQUIRE( UArbBigInt(  2).pow(UArbBigInt(  5)).toUint64() ==  32 );
	REQUIRE( UArbBigInt(  2).pow(UArbBigInt(  6)).toUint64() ==  64 );
	REQUIRE( UArbBigInt(  2).pow(UArbBigInt(  7)).toUint64() == 128 );

	REQUIRE( UArbBigInt( 16).pow(UArbBigInt(  2)).toUint64() ==  256 );
	REQUIRE( UArbBigInt( 36).pow(UArbBigInt(  2)).toUint64() == 1296 );

	
	//  test quare() method
	REQUIRE( UArbBigInt::fromUint64(       255).pow(UArbBigInt(  2)) ==  UArbBigInt::fromUint64(                65025) ); // ((1 << 8) - 1)^2
	REQUIRE( UArbBigInt::fromUint64(       256).pow(UArbBigInt(  2)) ==  UArbBigInt::fromUint64(                65536) ); // (1 << 8)^2
	REQUIRE( UArbBigInt::fromUint64(       257).pow(UArbBigInt(  2)) ==  UArbBigInt::fromUint64(                66049) ); // ((1 << 8) + 1)^2
	REQUIRE( UArbBigInt::fromUint64(     65535).pow(UArbBigInt(  2)) ==  UArbBigInt::fromUint64(           4294836225) ); // ((1 << 16) - 1)^2
	REQUIRE( UArbBigInt::fromUint64(     65536).pow(UArbBigInt(  2)) ==  UArbBigInt::fromUint64(           4294967296) ); // (1 << 16)^2
	REQUIRE( UArbBigInt::fromUint64(     65537).pow(UArbBigInt(  2)) ==  UArbBigInt::fromUint64(           4295098369) ); // ((1 << 16) + 1)^2
	REQUIRE( UArbBigInt::fromUint64(4294967295).pow(UArbBigInt(  2)) ==  UArbBigInt::fromString("18446744065119617025", 10) ); // ((1 << 32) - 1)^2
	REQUIRE( UArbBigInt::fromUint64(4294967296).pow(UArbBigInt(  2)) ==  UArbBigInt::fromString("18446744073709551616", 10) ); // (1 << 32)^2
	REQUIRE( UArbBigInt::fromUint64(4294967297).pow(UArbBigInt(  2)) ==  UArbBigInt::fromString("18446744082299486209", 10) ); // ((1 << 32) + 1)^2
	
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(0)).toUint64() ==   1 );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(1)) == UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(2)) ==   UArbBigInt::fromString("1524048626526185117008148645329708998795770321794318911442256140455458946053172210513801777413097237329246447244122385285308414454789711324787960475901495579519924778756", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(3)) == UArbBigInt::fromString("1881474063392538580104293111393515179649632793959103295994811562361294554161939745982608133564565542204073242684988356858761198894560865302229744629701298307382732414852446913292026698808738732944827521756186090834642278871507135064538602803625789936904", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(4)) == UArbBigInt::fromString("2322724216016351285472707124797887713981534093719739103213407334702107425041932730777326153711532379822978430798408976244316601438139655559996863723159199445623538286148496267102069962655433997187047023578211999563638238190873223997008007371192667094663558359643750680318859643251894423390770637182150347047660358392496015012475548907536", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(5)) == UArbBigInt::fromString("2867457962158038971853938647659375320115494383219896161741583092210829444699615500326588552418737089216037940156999920949940166545191462082581253155295134695870831145921714817833094876533390847748267009204859527832933060930612590727989929106335206340916340073313189287861119834506233261329926851146364423475764872904013979979647627788807185431063573845274690387283341162568066853325074114840393511798145094976543399611424", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(6)) == UArbBigInt::fromString("3539944651218830283540237184943231733526400651356915543005999830870728064470946236962840236630958805963468880528581970518426253453126552935135702339291798727869826342947189921425668475204474360928826722707549964601043918911967378559821737176530807786999546527891889398340508787606662886034686369292655165825645593194777876820396404402099390250401340029154647740647755879072938227342165972233945850036459828750018220652089900824625252564384949798192695376327532441052506514246293241314988128954312301105216", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(7)) == UArbBigInt::fromString("4370145368848532993242523075480569474139689185243537323461489922215230490555285155220171557274942547946391227642834796084203294700211008420494777946537074472184785618953558877240196071108329207824554743163383909448668325710116607092261566917692365671156479943140409928293640801157769626295637371165926498441822931984045867370978011530469809936350130402824887833172879161880272854103993910122813147049672068271585034130216078042298280565291016527870287491535160333187558206060681978142740974783641780486905910766479698398585528176367347217326798941738259976825918154594987947097719570108544", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(8)) == UArbBigInt::fromString("5395047783668773709460639056224185760889235717278209951617981537996864826581460683682501318938815681656151958366140465272884649876381694772498596841934270041178306976885452204765063226273182513141163415617476121267278772677860029973492021040065556863907996371801937962087527374769987283177425267845426325078540447496795491526579513442194482548092077099751401641305494953304352311309669493975681079008283809834498665401746908842008129396834776449030813934294217884594751428876570388384142266037241163723638366407733503102721783079433521192695271104586599752841392843737198696981062031279116702499649000416708580359920953881420098099346685016780778222606258624322683077591296", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(9)) == UArbBigInt::fromString("6660314047113375362717118830937150418894822047689175393373261671094594020566478309787317394536511654440334145396014118250585775607229382517821857691572311721610361814315339092248604034789677002480899646574438926664785599408420949268895302251058514364940634764862382757544044760638210705868384389235211642594541458339214544495817772551070071638986276284136919611246439790071468861836483776797120826186998385040118047655817351174172012988433608066340201003365144512395679567507777521535751903610199604821667817269481414854081548331738516698573839760290854730756066914126892758698199224637074055449072973410012335191441628122431795002240207292069084514744712983684809263796595352722062614488551975275543914901720954495344443353023118414301445927792170105291264", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(10)) == UArbBigInt::fromString("8222315164743533660322716869205426863298595939614360305442998688209230822741081065880621484469343806415355099455827992366204650030477782349786805802611371198385552114729607612922493857084859636592884607302472143286667576151286304509748792169775990414683086310499759210086314636846142836598831338179359936823353371796102561138300730509971405941785043312353445877831136983874954344159228211618775469143483738566408548893667340467692018161874545230032443789619494305274302301113989109668836113826465977227815031287792805790862002225986391995444892842504718408666055595037262539997469969697387246472169537858751674998655549656461006006174519707063523399279679397216139896950840488719823220059762423870515397663615757747330968399275746884748859378061652915318561679597724441030415446783066798052540826374335278428786048844155232349343754191307776", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(11)) == UArbBigInt::fromString("10150642475736197113962644045419120644953229765646068086020988632395026752588498006920094910099678922648249314116672016167468486710144393629475545491042230749801962372135960507472432014695436381886658811017873441401128474878189792328522369857139696311005326727965882873169181599206539083816635343851585880172030081509990648330032908663641005986316483954982862046846954784936453510655211841103278786964470056140293013403455591870598274461029625169981325200579026075534247058574079482954797536081789505778001272087683603165883908265430036630258770541096656899388537545371698958061441410238011889900298457916071732950569281592967766980969450511440570143425623102799197204036239179069918470951703892273238119851670794733134279814057820277245663028444755661760575140271018076838125284694056782953779776622324083415186036299694852974482091285022433224012477218692629407089527906221525752283337079040703795824680196864533660139587584", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(12)) == UArbBigInt::fromString("12531208133692805984438038625216482428928836400467371389710503707182550746273112301964320627890459224056422247593518412274453007877210981534972204813403231415020894388009498491693107379929043853466329385974150817009667530745304488666003204411539540078560655769902855526080464290362217479565810141924772135440917925550039265167730318002301096564869917875938788061653556234792030070699293143779576327579774046811458726436558953421866382067204786948128327558682577618578883665184255016855519794837143665793254991582634509305154877995571896065964498746283580582356054691857993856867293091673330083948488452545229992334308000258910048391698835665056398701474633228683911243898673832657356679849932517739786199294201551070490982354158082742481423158366627130528753990883941129530575198701943920507806637300716406273496516082793962648885778077818793410627805006877053182250966016793664157906401745067086908092156716112558767141578057712878697612855961890464962200058572433803035266929536705832605792028447135102406656", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(13)) == UArbBigInt::fromString("15470072723504106548803067597697042155477923990895297771024426930986903372553683102812087886857025156847314626782908854239349552157628349703120666281361034276769861774798796134926155863583476568551396588672738229385671654513363834072798487270253292619283975924058841585212737640720126008460616061062079571064869128996117842617779381446150342901659815006207775325183423114002737748567937887322952422468069296538674642119162075359642595626456473534232730527113840844671344810257242983809562559969598065393325724590647996599021665774221902195009580987962496050266297076183913800987537824424135965323820039598200414605507186616811887902285927088752861089959916768103417864095770405376587189028012083942908659722473806731760402089607188174752866585355561981563459063646970872303205094789159231464381608748499253668276285427958724689017687392625014103683342505003521474873137969875391785537306016389261438513104788083228659861265549483386680389591053706395583437557237229097020516317040506725411889520422436905185923347223290134667211125634325244301984170487387596582219424516318010481106688284565504", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(14)) == UArbBigInt::fromString("19098170544868280484747983278510165834104519456316404299479483958837025966276111790059468640514902377804266499280538399018446390159084129560640725956707763765780010060659740376333303694695860083927363249689424076589191187238469955957052047790896761022482641025502159994981663653961787738487323102810050496472546952426447452944118208871003640474355725062738463684822031739115498301606425957414916660301366224230923619303466389173611515116510443294559194423031057304337361029532402976454226692141163800450762927808502036140829287430315474775028745062729079904973690465398010664347364879365799143457725870060211476595299184301534636782470060398090304495986752918705929206279798086850617662109997503240292566754917357700291905631660349888109302927342246092737214041488022296813003857642952362869434368565990541169697074986196035092500422998707063287788647760168742225816365780857509238915359203786038825072606901210078855616374191869173498565248490351913884940548165150793863035555737867198398661411319742180048489821724317735046347993119792537337804528794065474395605782281526613120989912780177567534573104076762703622366591875884717662343088768891222026311437820534646023941799936", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(15)) == UArbBigInt::fromString("23577143086516633517202494207066346504446001630010610673720512894728981306250894783352944712223772710610550530324984833373563793859388846715324867176252750931051115449565299135837058276200101517687508481676171461472216155123862348821878208529919672811898178397613168853131365883163926173541498741353539475373257797249609172710492323605953286632415619227574550855185512337089269678588354895809033428078612570649355264251956781951005553332249438795633710516201701603018720933469665456377664749407817765000129994504760525074219121971955776871933397253520938797048810386205891122219502585686598568247045522917110058296047993256484321232610720482501804404477768803327266927313997542971960408270787215695462913907586774484851922546578341081510316918248354315745137830990090137415787287809452213141592418326997246089257960612772004093779109162007812770816338304118378777666277202634989601201699942642802310201818113417254201926278569720550175327701474239265559758039231693870147983181489513630918700271548688048003976419684218534906740669312224537050772460183191235198400068663100634207259718656113165114795883209166880859120859166677360293886835539250901601409493872655818190727420352481386830903101966783030995920201833174416049416836092127448779816291392836789633024", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(16)) == UArbBigInt::fromString("29106540588069347326555872006556754742026083363881313975588682605580888429668640098040917808959181856497719454504646807431290957633655372344460982463883040326006835676823220743446496288750358651586018231591518183809389659908862622540603273968362806316091869782059526956989039807203525151630059083223390288086324130258663300094870604323288799387150746422776390031332377314201059088298118841272080785332749022146040711084139931564615893863472859502959361144409941103403594815826630454198070478146788556727174208108597328763752018692062430472422626961400100012196719902174734430816410671465172202152246099396506673536860097898937632030741698362250470284858569198940232455516629517074284900834557834317534495679796683885572628450714705370587521902436299050621715569621076087079770113504736642667074838481511066163775249745798658609606698519500222662850480801169532577709337587184632794403063519555029352121064879759051839623575142067854035935400096572521636327302177928956171386362646659369616231336701036121801620867031909760412922527256579344918338555877773512553844556179791098325367317505015616536655724962973703712102572823935270931113651457629307742647674971760126769759498443769853816018203979731564961003264642914905079643930922274556264638197442547152778556964054770778659328155632311633780986837153805189544440432717063237198354745214959616", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(17)) == UArbBigInt::fromString("35932712538417016231734626366647565382624661244261925085022172148611300177558135300711031244507382598885327588038782854416629399005141444519110306953056250298656936187164053872615833108187490699415854641351242425491593026216915578807783847420806183238062526634823483419044954426234205315090266993964954515632106089219186132329779197166943038103197397417936034906051555201504149201799044770734463307285294651680851168584005663514913889141293397230234528226873578148032233455445075085894791720139912410266827612964408031883268105195622841076425768541939885213491623808210159508647119939227361103067219765604040400330474439570752170769976899205417582180857480232877123835679906977451579056247486951304845328953785015162307907511253862763067425898651307399430553448293838766431007379686875499405382129568294494899086106681981577034121915234134520626208784730357783605651607920631711335378509435209987642911117848965408334572856182369351901024640306139803195521050646700111418273647916035156783016775599199072679905503125967725489869556663505633674042273487199660580059545452467312550630680058658017290952809609398342686503707680675204359301833058224562721962270463349921347620847156682895349735734698110370843925984153513937417862398693715130776740405512273998585951743764639530174447886031636353605116097813425123253712337196650895591276909354117963118769500999510712321447806139042184193812113156083507492309869263334063317631238144", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(18)) == UArbBigInt::fromString("44359783206175749250789947246989080476857526873245007028568034159235280488421399965343277356274669301445951884326733101261226963448610546476045980041401905823467106554509785244576413256668670138949742396440116776059141490080515334036237237119693482633546999089324459307124411225753574673557750625911612317319841416295414376130231790356735889349610955081037994775059897203292767178251242244107374081998185410339554011738535176579457456172694298469594391597600544876945927096742895651701436308773646185160371498296392552730727030316917643502026213956734549008670708838970870590958017941021106129146052116687086816384645621817576176834456882691182337949688340860075422784422727342740424006266388480954576141961491191268089400323537510215854537537163810846126426669568811558764297439478585594630335130708435407914451398310041296823154754420951857067310593950242662751186766840901052139643693097081462536703412508921157437724574612002317024370109485692479488190992787187445601840046525091211895075807372439213549115603739369795882239749327566874719827189360420155651906925246390372616441012521647989088563400582967268829720448227854133606368327623793191414974793652370659692688749758699298299155735031635612670229040975611746561208133904881372609419166700606296239697739321458596168854229898515617928160182586295852699214051525181537387400481307710438089105674812570228129513479433897934450559681488347726384600022569543136509417357749766594880696983536343536633192123346094628663823960296560550838680628292010274717696", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(19)) == UArbBigInt::fromString("54763201191534684354441982521608725537609353683677621712781934977302314372252100773364384785384656931871961844021898357842161503528369279466170813890440384217587719099268043839686823557458715507770929295725613647650591788292337086636123543454426895920536808173027515263853889641111353211773898768810028055472152388131074234463365411777102625403271034992304000926193305255374339258685123683052466872983130372777234168042283917105882994446044897110289911815021470051865434757143234606597110650990138289637545523717268902539825848288208537463974465978458283683881664623275457259807109879207609679106960076593731125708678146843659363698655319279742600951095772863913460232533095068382770372090020119227741731607092119519197613243902752584587841164327026486309563594645426348442257282159653479462698287319310041888357580181985451203860287512819580779635097845859396892357047737847035473741886831849213337287997155171788530370792430252923144220703138256828533935782645039307779487432070452050125550613104889703081954750075668780130924493846838323034753868917553306166905777150955712411708081976389689861333174838188141045658142861050792916804161806213213900357609122991211750494438510800383271244550459997606397619981398182610829191095519057423374194450777826837240546940881134751878723383227086917358054247068013040091762114349975858532981437878096159804747432907056216947976702513055768973699379808995586268193345849389018021677967352986655391258433673943178639768071013215683342578964393970844993050577262282693708574253246303487241747101018833961751270357017777261650967869239912450082222013548068864", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(20)) == UArbBigInt::fromString("67606466668371483076984642398725669168298251741131168116199116299940853543108277125333925739178854079177952281004833593072257490631100812389885618578459343455903387222822634807282412776077220914449109065089312488391263616145621556080556452496489952008210341350145293251753948957211464893709978552223499355974511938186716897446356657766488451535406136175329158463176783289681376548974472212495437132279278345019205022517226589334569704531619779904481359655787426906587995279696369444534982075990569412253822111917576440502303727358016142388281989152245528030300526171025750950186145302253076367115260187423913129713994466979362283448480284656402983722014874356071920172505821137160157826967544941622105557213658765822105241333910305451596067127396412436601389019600411350217974842821804370366904919365715143954804518310389197716410897838446827446743731106589230662355511272146159940944201360838800260505378564139785944491193649018853793650209540427747789388770956654214132309615307032933707864303570885028280671236389513945838100440402505107782444426759114572126306112076590490877342803099399311824873454363251905106388803307132525373051647562037820592607069889946108879938064880643819093224015626225869314553507577410232823222590377665006397012768727145595172973083188357943058143964932534578740826008931931793764190144264772119245971948824427360593786527842291728013571905192613834388432212746488564702950940128831115229684013022951170389259799961283229251358831802293825189694887971534109179168002834577293096206722210872666635830610875113207627450550478307752437692411815108450030598079390998823519784138980789156324812621692495851458834166590301688330657844933311060873158066176", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(21)) == UArbBigInt::fromString("83461781560135579948439463659003230891752928065673505515215973128110737412041471657312641163968935529981245479564740731675787134058202761915789365397356688300232907123679667543113306376932952063943083232515877259535370982735560569343953408652465401213196433877596833877597707920714348026898736145976062921270190456851499018149583574454845776143541052201758328124728113836834931751996548954007016457698926187169028741707504041519158017663986242019969286806333582466913666421206220752357231531967581958311518099854239884630157028995883019950450146954525396041935866852740895705626902017374656081658170347139300525776464083470237213789111858913644565068405519407769575686549166932967261395808965196797246466250457570399065009498745727893744689767407455113148813152985581015005233731119426393793069975909372466795624807992072599417902634347853797986369883650773555040861258741681851759860554657039896384576312173268641063717847527578417697965266276126362266770100965383840823778778122481322987001403030017319294422477358043142493868651118527630903379128798517444894907528286752291473713751460643378335873687038058146081745277334940411186177261935608797529061555811407220479557223972603926598328809854213998949041475146534458457975652098649393440522463311395893897535501951529723090109313199876699203099435697977956455291260877141609544240123091584864952101014495858394671170524474985770060376001354312857500816758448241547593281392996993257333781417613515161760105786170177905615192077482399641558762576839517245691798552009939797089817090231393963909016044129554624387428592043995350439419907018556843472476531305582094666887259026358757186805307311454184611145479845831356679908689485632370100262583067587787936049492009664751259887416263614021759286404794686252253184", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(41)) == UArbBigInt::fromString("5642556153128207762769601011491779181002425082460600167959336255858468245527422597750037340138685615467483536760847818786540722001202716245264180487505356671022725813312220483588104687509112883716084654083949412332766247713919605765882463683594111142004922281727215767198163956418387239411620750839046063375230993860199694346636612291314391302946111154798828862460685823402853646586367388476103736955821931460953949044109542710706703188999590510792776516572433997904101446726649526743210677223570817094208467313847826729909435450656643279720367064624048710743907687040693081712610407843436865464967310365178888028806606189882253865855893469423701951388280673094875520159272255145237193027530708516578068422228764816581078193264288406876427552466997930226873051058154588051697365397947093519650631610112074295273823207282494441274798248284425835194041236508608379646665255845337829543716805994572114662805366994033391293228494711720366307770772344812336257867998107678366258997849465667228792363030976547128411985734186158862545106478664555640346751145402046244740226688043749056403015780923068854396966650798111134351080695703902679911760950120941465650218413260273406270721521032985812768813900188984884424748345721364416374187842330337182882697201073997187990676641229301854327979526904879322532703043964311653522394071835440150731847474616421231572321414248260317895669586429299966592701856203637014456807570899235258734185663840992056942472027674887068909106589385090797527190267033779815953737432252287085577234539495941833187924138741225431689060281574450921835120918777268452263665055857434717278811252172771190770954272768737838205100027102384026067700592155550984075000043290420931954496620995241851529621291259845561074592817247392659457215589263080320643154074457822584133147583379203811009217451655236284264706977804019795379677490214562744856787397167921098707435038194851693185333812564808000991422669777654372293367037426540916628102963616017823297586155481138681073514182094710388695166539758037435974037052737134351644788791632139717497071376607057817886221046179317726231793039754715367996686103804510931638297520744039792237088738768848987596301203491909336457276694361830346891841779837695627585903610791663408135674770019774827940922661465083311399937398799666203367654364539391093501830863487895322198732159128847605572418367895884269175325357071831245259670884484865663658339591989743145072907567300698634364780642626823018372248186168353025704964160700046783587860651427344070806788792956302758139108655267750341822840613290999465773726201397664263531345207249148510811089417138824312461476005767296474333974445438266440610299761933103932979005018340313880329407498303970307327756871596536719240056598393831263903988673655107421929775573956151558022122339227508959859018634714349682616340459010304174079861664076143557095938364098719186267493398302831718699024273261447214603156930977807806754980353154929583215309149618085843099887927861148834643856537721059704987822770374126953171454409890676941110960626716631499512024128925417282777792634834807362127469251685067122642399518950115469332534745529673463393687458899175990331111328122891824770953935024365465971794684376664743882422763569104287439097553899317208316286952059778920918175968607369859358795038503043591786994584462836267783557171540222490462494047697090663188742050134163606018438341894744699580279062129898498817271151547375804174613398329753083064178704384", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(60)) == UArbBigInt::fromString("309004437848292032223937651614814091030452851452128827508789038589772275810659477016937439830916353200890155928179952103244458071161147178962836855713529594497135095417390542965710600113493563052645817526572111384623494469688032148553335729604188120040421021322432429424068121218457216908621984330838610982898356825200917415528005986997615199892661896353803022969073586859650457866875500265739079707879180984342118926481410491584894867346198799419550018272868632295500914119395611411868865108778342012350722899969944761010000188098712323382525132165965016497256275060236005312044383533993718985375179735735198974254011412152324286741322883622452236604337029406869180972964323206890171416030978368988115500181899286689618486173588266350149400188449781564370619285174389210504289152511340480332760716397001542831461718352245432966759799518796270411157832579728254841202205453087112286038351201102724083812463454966982232119547811637165207578982680660253286404139259354116662374203378583846584183742402833627953644401914879199654618104771031055746426757156045610513041128403325879929861631890691615020793521987065432824691315488580297061519796445843704474104365664104671382907568391240790960265506657508969178356585807705614019682547766575728929906957228443302285654420562828711900343588394739576931485990440242366518104398988046412976846815674710008835269171363398103167916145550994693418480543450796634046283570771101942494111560281936615340756359408298664683616611667384475224244753612479507826738813796016159561061499564808340300476227070226358827612983144777109847158191734109661913606699649271592468200828612516471043324525060524936218157091088260568571340926827845580807734110064100487421687219083886349982184530521201185464905087026054076106673828224059309105212156129361662894282127409109880989664367594761657606855945459315703492260508085350727065386985242139511423338943524130259800147485479986308073896255632694563941157324902310461437531361112849905778001145502746062631704581549640923227773027739904915488957558731078819850199138975844753798700712385266277322053437381342283326130762864339915053599785626971872407230422067372420802810935869163202392353596484430914110736416472241204151757012405609318527233107361513126058665032225371147444773863690012888181636767465453881228665926474685541317808750778223657125287977010363865349981095262262702084854203261259494138393825826820581365812188150839076112203077893460580741483560196731938730615879789632749909513781334766713268729361436053571893651279265211033046434794994543271781167895231458548227616220678339514092214264538975929939930521175366663385966707444461034056345436027991808414299876648159959804240491046477000384751526910736183716721515862546900707087460707479800087785541010904493284865446428375403950627259905592387954395318954986697022582897891189406829055453507209608769009949277426475175020635326164804972268646995739169680249048137919664225921836043528080982487421040559273331962795861630419698612398453365268687817338205072550633115135512531880486124241214478890953336180378093303821043612162046111687199625263800469741606291795707873546704695683620019922232717912440801653765856684197573971279844810563051131524042299127326424318494097023827809526899862543861709637641124221699493614883072613219521376068367778138412536551915842862351350766808610830038784082338660100864038176832021487699170721708468839647557707138173746964514409008122364341786585491824834335707074530546303142682657930009581111767586806059706360699320034317444981371019485180071058605619905374634920553326115681179048821378202988354829977162045318891774830212440042475611790265538284591111053117262266995903143272163997193066531431121454308418011591175430472188195162722498840155865048293829043735168252998776936107093308182571071551396672567237316976708966826257020370775965045839037903341989962133679727861811526719149763176654829958236327411707786211407627575790155858776591139546651531975826395388403451351739241165720418578665021402873945408532888109639815227864311460363309088286992825303133390566326352767566616771380613201426768933466422771641043781317709753363731482642257809427656190736798276960342853543317941535294130090430196703375856459257887190732927959388726604989737760440279122965047598860279587137688575903432105060156379892918995020166189717170142507038007953901652510736902895775573219291991773110659545134486489330618822291308497904531578921554929938720746138257131518532469669850101640541002937125349615101675625182096645462205593583578336871603604393691465962462323623535435105752094388496920864627445623710111735880684118470329763786052791541453264004199123377728961072199915514428040258480254703480109744078778500232626672851377068227552789140015083493946191393506241062731532727828559396294486893485616265443477171322231742262916869137004159268626110630136015798029587754981710496920498272259954892811084681833684316717031187485229636349140345921134529369417482547125812038192921761508340885502295760504335901794610790511428736334199987524017046851431701666466596730699776", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(61)) == UArbBigInt::fromString("381473284490876596166084575814719226543190872026510781085889295180097440953255397413834069565857592781423604389899540991788714466919736700116266124252111284692345467074012113324857763290913547246852318440462680480381913510379391965174403138774844708808329059965425165036135043112567643815395749585631516383837338185797481565129445817986852981873665743270359560703802684175951196244838050173839750301020118995266654251020790850515563778024837439636817150724817349665221764197027143944525667291833834392039842917892589265003736844759408525979315100758315709512517722619313372304168435335025966271795046749314318525965853302065974772587915713771996930124174368476042820484943590481658495198399534963923205529464258511084412413077461993408354683457177449681239974827499919882515587801871128156253499964582418166136857823103743828068535623638178578603045751486387970433798936854487988056194904717799830286078015871480932180397500383545314588992419943187695098012275892086698898828183482616048321947174225300720279957767019905765330862811850683526045354354260137830742449117377871854738400474678216368719287776654925080003106025749323135098408111931427905385106406288546237327788068937489566322748585427322681284370734332706924106152460228597756296035217615544042072691800829569838573970460048846438941257685519868915169506323956468757113452860273501362878145824979893736861224590386805366643416485109966267907314541354161101655882915062884979447848091007841551570461937235901300677029081922454006632130753631765670198668912350110733953459976560026552855822475619081589646230040539718423406223551924676015441791491267162740509991206582534646638727039686528022497761037617858080397556879926370626981792990248564525270494456212505372126941076427985143481674426802795418086718444449379763401610418096024672339361549397073744651679476415273486929926341279254054419685828994088501432645922908703966304437690015667317833646067876408184890823660982889684962272916522953972920735103111154227699814507221206312358385004804309051471225776846530691009319652129433998393789278847393932474763954331470287031409381057612796098758549134624183778662505239604608978974793334089002420006132062099150039786192873895247022723149424090284597247568800545869969156613181088946708829920269751521316156706478654097278642315984927701313251887699984331419345060029137672412666093612301288778758237538049450927848103113442070870375094425341772474760758483553992214592758775326430069979329307030723365623470335695337482690427104675566388777634888636823013501220883033665140758375626564161012160617350049165105271893705370470209997969426040081382123964171861761069870377930652109289170352144062542181278044034192595605459313633323796677932148992107489642476237721537108858039182086812274666831811379283316508379950221252927709904024374430924036518453752619482082178035417063006669768755196384839444868279627900997337366857392829750498170044490338783707400547178248349912657882259863686090329068621532614209489323005948309705014569487985298215934397116120747766004742489017619270150710185801143447107888113087822294320543469321177854992087964017053824774964866027059867831963116697608177587536042240374066202766893555499025250820956618344962720245076062412987644668866861630117896630665127197307281441567337910220831223553792316228034162428013970119662418954817537942144852364866595346215282920697578714042421044667498392037313839902058916505710186413787080103387420865658576722063224546642636821019787060601353738276677497873775079247000099895366108923630368897356750015236923801944348383217279395296900662436165412192688587911647071411541585328992921554958214346452034699099012240123125283848328699720017728224433497007258534997850485436479927028907156908454534040450425603420287207649423245935638366600186737427352679602418702080838684982402410809855310014758130123501191288810853702244953150007434258467269328902822541557296827515328479485699350401931615607167353535303415737441793516519745878011913132914759212517104251364812549370809521864691500300807779985364128872961957310079362835393653594266002881032784597176315486179003854745339825364580989391857959327079034338144006495003214126373320564556082658663937856109073580619406468752885266006881798598815997205773471149997173485159035415976129104328696957410712254221171585347271443843758345167691413645953408790308344038805427951237378594712180489860554922403178949997879554355449994148359726951397716425586607764147033285645295381842356094831465226670314013403909767075342002175610349077895563354238820577954604958723305051463791128803548808083480830210687157478720444549272088145819805328492945607149892030977411046946991663915176107100423675400727400224054275694243982472117087411017362219537156510536789495461396686679848333208607685807314257977644326542195709678086093873658195493428296016951516467774571659488324791591403600664756286405183534845341464944276344757092735148495178969276370161898024701070101951323201657987501135545139830885383979967122368343245338124217836853964918074696915123757370159284047583922992038794614025145001446816895570326016353311583879864826425250253085949861057614613315584", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(62)) == UArbBigInt::fromString("470937789093185404442880641048476339549378415158995488528348073796037139338418582942430772643804988463686442999469271319304214175093376387276861758632617799158532362763571267025808584072018180192394828400562935905729380582654484176185129288809262212955875690952227977264678375870866634090286051308738091681100218332777287803121627369969900472333269448807768563548285164242923054510344243153313839297299849196380986473052918837785858310031197471276693355340096438670267914381472291465662766659195949675832363230756711058922221022676088830883455462761946155242230890560642524541879101727046408702633822863977227897294586008720466088710526775374277585244211779363672563777454624482858147959852010490541148281300574395519060745459409408034280859050275183292297351449481206465867124993143447772260957950144391599313480453218950613677890364314987638212084772449080994247891384696941332499080263677902385714772528062943917609835008770602922223211160915790927153637873191258998187519392341011798829343517789223906423203577760980351064485549997662768384376724782148937935641654393045845120032210988696555466050658542960734844280227425853250889120083528406516724026586718180620270927576303763359682450735931674897654963651466694914763499725958440200117950630129345664836449849952006143659653581884607605749972315242692183242084388243571550721353044894490857337557820181182863832037218624232459419920610548125100522778286983998778403820131943972699826669041104921030202740697676286028244343724672746652363554816054728035143307852732068977776074311307080680196119019539459116668490429964467499075818852232061193988218378692790068485873492095069810629620566740668228511071468011088538522671827107512942629463612484977139997819558214000642395789951476658345584443129662299641466305580369618410088814618584792337073169923698981492422015322636289429108760979441648510763580226630836181261370082171655003086449167626525315427818721574612764366459122972972031583541272096772164735623895040764180966572468150028846764262210847664247789251452037532847116708268903299823978554229407378483353204883353062192212592729144637492565553452828704124235617180492384686254015868301786594091402309184324461133431466195228854745337783842873221612440241095229471792012910719495889673858981411833451021412019367600672351594152908785520566953744560461936429031748921987856044219508149081349216387653823546031993021310341786765272704441546128784674426127977159158813670038689157683202297041765309372170423369820679417939622874995809354648684226716236375202242221748287207352179533534704047166548840715557454796272135542597441939217557951282031325729710287107262240407986440437022814253997097933389238386050244048833717958248757883770215917978781515524753000073683982792320762582076574342917892206334669116135261569158209037895431441760871620444914181517763764870786669922520656283506050328095120429968241477871872632940803617838679899552665849895043091100895427147455823952315797418738949248666157424567677912752364016392055671309041757512502260776312380648830391778548017164673989132745481066940870286419732676654448114931383844717954433859606485336969127353807626547217209712466572525719538380971566277470759067008848173794704292327954162424900336414011797014393584296821185279855350318706386690362175971976731833662023844478208103874513717479230519176790204163088074947586435740665470904553791549092493164801294305999854825009564196075518980203531457946199619514821526318128562568957023714760208146922708403911223265403512750704805228195087143726667403010453525655500732164386192239939556231272589769733204869787099571652444565175605625739250901105794457568075385304605816812514508941547907901371117793949260277670240479507038650340799077842296068093012627361728489939378952666273566167567561991319338126445214869869376424977993605568608125776437953401831070424091468712521409767210705905965749756183541401648642683786907727021192720899501139306049658657437190549004731807285782042381710880858158588706931633778026737873775736387557629491379615288359697432380109614470144354583133620070751979997743764912892368418489628902547891429996463819918411521888208129723392821818380852054938950215220365820876807168993264527883916794683162226392933138299305620252667622343170120402095782446209658976052413618612930852736937265918360343852310657955225676541218196697897552194867881066907358657684417355608399742015639936194562742710228055036744061281193251340478975476997346498794965929873531181159195733307034676385927708739817378668860961967200375030375178326196014680201576901806388745187740988643293177322988927842744752787629001672189773686998031409034623784463598577344693312541993972467080835392831407495423445312461686942457553611645101854130685489243096266246023856920775248774233202096413657410284105242325206495194781550274797854226020420170626483978259654553394658348559683459966740511135069875854733505780180330435158027051823148019132959601137627084522453800969043129152164627251897467368885534730954170306030292784544341176836709275534464035281332421989762578829240442450179799379734206265492269998370319625462246901043028488294534412588860946986069115285386890253376389280768928893801521658948080988678876388749974037543449763657949858758656", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(63)) == UArbBigInt::fromString("581383835284753150757792743254503965563682949975624740449206802170112305911260228841699746429982402319944393884767136004013508479668122266336149477495011691457436618479769017938488971013724214995582563293312260016540267195343678984565524728416499575460002179241805379297158065913218241298040902980114251263312744013275682351454764450895528801269325153709627583686697886680599358963104083238657855478778258076764637379002626713133966757989331524133594838525691890145419645152107115185062962669182722784191333483208937953050452008803974784494027439308876280992598805986228770181552334351957984171179767225838376741812290256581178627046233412355030064263731099226875646624149799415809179562351713907369352797601938080703580709995429880245631918284262098925092105747865882609671094525225244938934352844614202935231271266071403666477373016244658554380692745624527135324215124724599566846912076942587330733659926060043528619719353333900305794777917821930588620075065282269076116921233718601762707138915586624761238744456026876412590211005910967056532107907222677524089247257348632098558994851345697458669654533068420437737665401870967057998006722180682450095679982189828231151103133341668073822978322477461145738594191969333458594169635281497712959990947449586601787911378758563618485786688043680688871059675538844688656500415087180668176679338240604812081750836195116744242112267573311334197419065187035105320858885185061805952777590616493474079832842100258469798216787539602633661075944188608846303551890327727444803158612563357180940129882846680498227345941642628786539410945367503836089693699496056741630911427728143084960455492195226324272397003416891041822115910627466071150802149486151649216966100739594042082062558843737565593718705836286406924580201192210975801171735778540560427413585875340737930413607794277648745972859113124220906523074020031475843050451044562350531076289358187672372788790697863555873557162847930368632408890700524636933578145390487301556416359260640409908781552331379704148552260295788046645702953542942389395383399818592040896491646944595660476846268088371485810692874294553023840167540402997545616679416859769385328038347836945918691085134480559847038985264296068736497626271452681847139304595267980828246206617066218111665949918158596680888014648844265260464315428729427725487758502412632290568754946307699696589215045125712827125299362345761944099666579816129590193750772925843322724244415688866363816806397356636599921845765509738992712201256464920428076584990901350419583302020870813558602153633893827944900313873331919950134139055738374312632647894333539023667973529291535945384350243884541056482253601095986285973292951112770594351195948611431922329941014449297068910180038790670975894024052666736305513889667423562843715170172290025792989033996712892817342007831357467592928663668020524450840664126079649358701431952480944495578289297298698178359535530073950297117087124320420783749272318534782085612994384752553844613294875447937681830063762805061264896092679999991106751637994748600477295810626486781137787117659199404986861411759057824592698384998749170670428878053982090379923203757492865969514875244344317050673637797188173583632017608231902086790889511632650452662248165120095043611915527841032535988998097997194326036250245592482258483705202796011956314892302771465279743728366540908455770847061710450901459466811748768244583199032237808314117853258468428093209647986614531861049967111291201630938701084320992440032573741021918022314031631664532560303182465415551731899219724126832832735152454400314351703268016091933231645090420011401851400849946071382163759778481487176875706040952384122032729108323971667320011090736757709360586546237832217595026337188970367140349096456837395000290662730264331355554479148781828261155184715260043236000344760975859696232157443604749524523682323497446027303028919588611043246512020964044915822311414691123822250931196416454414098847461364905312598427164442567896991334679549151925582212522403137925912605432930093305994532755111900646971972717973373979864294647555836217573638598478904630038683285465929977712215216723156608858806399380874462733847437232102134651700528927667193907259233269490803343246984602803291532127854088195171940184952798803193957647577454086008120961560457108993537145039019291765732842547821655682294532271945251193547218602532595727697413799573934051744573306651089382933585506676764214055721939150372784309855066316782329765015753679578278850121441201433572491845172696027653837176357975409880093182143493692164325267457107383612220197239105292971046388761946469465663677079784640462999914708793857812503685709784204013708318394111463927841312395982965599818682714453788417114872235778259763742831483183436291061752058664746828610931270579173000204119720885351535533801548246248728460774871816290032810682636318359254106740136498547916631247794694796637809246438488990539734362186640961160517832495227200638563496999268302945640327205261839667393101934396824768905105062923467199098248998571780011262875907452950613636583063536704346676084133380502835084724942106165173143981165079241335122114421968759456926707918607069994083725969011975144052265281211789491374902541937785869378011148449705966187355309189808976968321134896330787720894079595123247047425370515054219494682725800353502806933504", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(65)) == UArbBigInt::fromString("886057235650253879557538944771566759885942187059683303051433132844589687272238661604891526280523430066516109678694740218568825551814126709962146701679336602326228242744320521097021594700648186877053156181671614055472792900109674760725170871651494042752849357850446372499022606889852375006492168351514577380032779345983567778551571989072618716538577555742591538278169672193301954263271416243803713266348492582435706296136211487887339710830476169639200088779602392050691532537863505835100995613925883224021239674925453061854455400099484960861829109219985250455332514880477364621692851321739428093664608260632438314980244903151035378510061295719909713418632040643739893507501073463935029895185973198932453278300124122170618561388127693465265259723590033578598214718626830499780493135620335878492305952911280315665255546882821735724626919390795062250833634296751168171431987035328744149852789774569471007702229096419283853841759968803225811107988799543465261396836028938831375518033324844163191867371383674423710993580613292510131853292249775392269062350821221771991303533294776047866052773593114178631312722734424270949398568932645932859811530936056699682113318224110672187847895403268386859399878827710963342739765678916780109025607540656267911467726240334305293863971028540674549623138723928052510653817737461292552984390874723457343642718129986229722213707697040222674196011877326357280664262923901129335707721078398478221145193468575136104117213531490612220814467890069455686564066756035179708883969460043415772607112429604577226472610227051837136275803719520853370842660513794590250224289172497120484041151100050796541996399687547864629391937073431750195871886136209326395048902092254547027421562466263485602590116748749203943475166187119399692928471166487630240767995486385901841218182496109928835334888427795708122749630580932350044133575640938500952746743942102391075859922874353423234562172974170848525528427835055792090342704369103475726858804090315179754553936789242869323582894090687779656501422936970163141526080491873174993265515957261506080473261972012445496977202173763605088436469556353564786345763313501642823824380341929772853855388970251006000533170032362313270355984368343710555277732667809197414600749482735863888300794733941574140606379538526339745592361462750254875915202705352965492138439471670785944730659686030465355288009183195052533047232030572366673056364703936942920363778050901897809076986608605267120049243044583026905953449502167417787207439733799256318124497108005579432113924225335615249136790262525858404013278942734012220855687912483006496768131667359640879962108889652247931198463378281356544256586729870206836645316747933098686747013826543111136434227364908151751081063947403314048729118082447180984024090812133655780246460308014284265595088916938802419574619073037401926601829086363265159190719543471946935552666789755652895387353421320827735446894205284990005154811402055349055585714646306644514047488425429492952485978337666773243898671737527306405099320657739937746687057823300295289037108865737801678544052954602817285984452025959359737235511521508606046857396008253123198347643896183862993493591081059669652112430353373179295461648928139767954741466186700746777318379300291125380544708750547497970864396681251536945396344309673911969834786706821549986452286363510444247772043067656747608598459752470832232482762970982853841691070611040847416262850073489033409186085781139444130988123192281373722167586828705878724861142142310199196689354521411594012080701357145827165752934353835998280402752622632940326727052684789504808423128018167258761950593204015796630306134364066142263752742576867628941021513179596191594331689887537305986931297495857365393635411812136014772561402297446018037145443827298278458317737182017314339312954718333168440693719889098454482846462357417074904759061244456850099096406400661915315999872587342165191408858486721707393608338012803101893867967496618742045200505086562415846755394415319393378661109844366656873769750760945823001118061216095316217057942244136133355354445573821270973237293205658004697319512115389239194142630499399256076567240904619466306219730940187864843761213100099823421748479327333809199580139232869211934594942105197729526802568670164554390205000885981527155844989514151581819991637936946222668685406196155625035774420042471661268292443199558731261012062211080572253576368900792319441785939253391566749630467520361198017099263513679240415399858293461963270314278391406216951085862638313292292475440962186346298746614727906818064396495321302934387933285064580066455616119166282108356222248315771236209372570955212375297968309040628247685462430837144007032588919764511129812975414234343114357198308528673160988393213768299394684570743111130898159683390958526527775147691939232763168378048794798205994266275476606187636941057407946862935519947604760147680458268106068375292664648464948208071014752165704600372771891616029400848497142342321779388458345960469452724166132723283248287489153179595348178515434606412828376414003592863159509185104545115078501639775017513574976483622780264364189676857014113890524593910819120911921887684268651417241626639535470350727328388691507288208547671065090457938346979252015194249758757774999000874935893825345559995808360532429567353302117703763705053715385352812756048264798771799365329504648788166624091660528051533301464580631709893439770830337968730582566678417246921508132547194678363230386840322273218269550853032852376463343050003841024", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(70)) == UArbBigInt::fromString("2540731875293062308784563240884321003487013335937646041085784706729292449923235685217139325676907691994536501931887763913766829450918983379724062011592571225580053109672086880967068006542879001743681500261602860181475924715734245372862351720520529859787124904887559144078388214211303406557562127273373735523974056697847446729650979870881289971210576783408031012118028165399651120838760219479591853578032102868449951649377238740483962581131777742386529972826940371452597380154737581596553497397557837042788436888858444129497821557589597034120199243380734639461705136248729256428439741712059761135040163872777753839844164612994406314800107426234388575068124449613625226665840802989753655067990197110538232023940296054064737266642233508707756043402075199680727965732807850686057885258772147273801276885185135466407684977684534328397053726256902464936227470027063792892156957342630238283119072418084378794812835028111460615532101676339883726614265835079392248555851436819980468896389906838128371477931223454354469484050691047377370594330260110570816299187838297045814654486737900499991084964470443709197387274087673676104872552635485761068227310207918083857209349009868316488432812670752398673291320041077112047382849506178942126139232822418337959124569921380503565468747632409466476294203480977397140937798753948635051265062403888512956849096845874463291122352403479112041836924678286363219743247247603978378758165839747666927891883311216404302947945728254087510334020327984983764251048583534187948807009411982153952276834547554565320262152794543061233055024162444821341625062388187583977619861118561577138271426952319156954255626944020233429924395233773019703976822062695905782140369937250816568616195265432209987221058440961488491189856320603457278689577593591763399108715449602136137770392620022871891788791861456570409719953372580518117774862449279454652433486478101951657015839089954403185756068223837328081620852700913004907042774747218585466392873709993562409292903902898591181814278169547198550988581574135007842591681684496603185498896410834712750374864335404544902550718169979734089323680666510564668319319329285840289172495407896532289504211912444718613311368852374833631777146618731631568942318043988804499145769985735197651775770105989061310336329996933251156345660561145892775336558377191277465314353204766760854008622896639548925706185375534241044655745044809951418716426530667815034378231083242428264867283437340475558534433163037046452164376950585932458519438537474682440574847090201683370961677240003174699043663905583406743330964119110075384686044835219076435180845794438052394394623268778143781040520407262406878207048171440444333405819800497473582764119955190626649694979450383218416481900144565500224977143698875692147151070333052765663252056770751269805648451382219812957286030288602176814476807353080861720075791561977749296050243453233971989727922540588082259778154375609282147820840675250219178266878944377658700493238914151350237694055866283738287781754031358479437658270849993198477069783060132161367128462041220281105036053256859274786562709625415155595490333522557689166881480938143925137668855318772397593283426886926528829359040495686543407538550912121155547507138403103486433299624823802079960250847446967820522756631917252111108289946788196344543772606831892555258362661079533470183741162024083387956561462077394826733269326787950297525506919832244690562348038581499707695316950983984265881844099607363629027079192034886475093493702138545619333348698765985781833280082629663849923485086039144597482525520738623863167688391624945150605916339061814712582177810061202237878780039382527712022573068484555608465054775942999062806406065769966868066115223699341048637186713935969112267706128135841107868785556613507389109399847486535990897815514580628048546021896097542501299644472143106256711985144253836440320895316288679265977158499464589882590970474651336681585295416843668055110748598717692009426498806592264742957658189093454683039025164084416338179248089986111831775765962393777943016227245097126068608437127833010285800715841951948859100591873727561499277567167633510737215512118321750797979204673420409372448871945693409702396103246267390960513541283282821483174019040531413136751748825100653943206102272987950934504956699340641241256043156243336793507678708099166799453979574778096004955025613072013499082777644195930418036796767474120591606478139519875146786386748583610396612571474621544125285916108810074828367343601430606804050334564768027916099082585572255804379212828013303352888601685322207276004503731730366703025522805309801006169925292305591283858658343153055343362032757824666812198842174275445363231974247524314298753434700756885086175602543544610830684562650154006101315831435894881413372208035274935050777169855014942350755756004989502899283346162752625127322329750449927249097122896320040952057312848030958821057792943187556593647780537075003865478988658910026592116766283752815802534303508058711143306400758011313283958850764124512250184841688985379816280043311577796644614741518308745467569542513908599442765795579793212815619731327455123690663357403247936991400113962735014600629235231296024576808141366133964281598908545766001720691191213895494508799555935933461936006983373656028109864953745769721006518933553385423827870609240788400073523515312163395367218510365171612710839148639687277872386053350783681547485473399860295152194158157387479145210133605988738047615194381449412611049570789590382488150622942946380953273631890846339131064401671309591025860733124226628099156876708442527627638845482199145297694496679888495847763951215405591693207909149638241817949070924538464970239754476614788064709418090513586630651599876924507122563159611739020935697739562486455701434457064318773901522508238831185631097865476613291431620789327394714554527565252784935269180972205368506205865169239264231595580562986257010842037193638149070258176", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(80)) == UArbBigInt::fromString("20890698227769422836651415971983783920148226123487023676289831769130800662712250982955046286882161813928174397431998280644546576263514122941434210725044724454894254730199652153936302437462689286526669023757391907623037286062391771078815887768025873044075831595478220616717449131568251467161023277980154169064036754218722612273316557528301767235151165904754944122151290260350318872354200448288386142126134025843882450629116846616734301522770092348239003269640096276191524909920236543605795408074307828022978116826956727131347048502428007033573321785422997420205341598731192581828993021462949957896667244382969400871121619851128422494678201901269891822468668972721471135206128603866737546576620861791161577148769917897520973072086486911339410740821438037933276220036300845015102336173996401401290344285254360578943589346744249425258119873417942869534472161842010772710811077354956166475551924021671439849629630728400406909972942834666164355107537913012128757123083670541676027168097298064983591925061567527881071120372168672926904011550400431056742131238547457173274777440428158915362176795030440734657118185195379570156089219984193652290184720540610905609681061362119889689330596173316984652810778835422008613512931534884656137820203384683541110907836949468158263065358007730112275866545724115548321473401784014604105306524505781737457932624769952260812576530111858409080272833012577384872158510354986021705746682251573616070085461231945752675120438848212175067993129077828510810052358805804026553970646944466213045877184274202519212221072215799800946919200899891352657512617955236221395207789265246021508197573412684181254904208592374919506054419719036816901080972572217118068524150362058661848797712670714665512324013903972155741107574208061526938179675009197839401998477444138168930751097240243448178945807628650172061568429395836506356438280113162855856315480607767690065414104105459848703849720143874516097150636891864746319932872076974315971448812886534983356835963651967884939125675162107033685189179148507687374389934134831244397038000630370903519685046200301706905261782841505774872366756810459085334754640846970677034941063523190963252627350678755537346654528783208438409879671104329214975276540741415483613906237200028782305298080226867511323175019270475096038012579049158108911402452984930791917775362871316248961838213620363229597995021184970651277567335387031795251683218972820152970119383173601103853849509786462468827579299340831520819681598935612041293046463653391280705717924469790090747198152512526312049830074089478846440272610842258447155521161994280464072443738578661410012121328589673855587897573511054644036547795716671466616074057537422392886266202165020665439813349574554792180127951569300362119478958481107604036848615611560001056422128879169279810105210889134227863210367382989519321460949231385219277410260826132717119752555165107391443982902325938728550532272759624872477991700022772738878490173848975485029656891186449993798798787624230964377418748254315441288426891590836321397270588916017299797461970072725555094753275798340584042618106476468062417227049588442576031097468788071611783750140577762294675364233401434573946385611644393844332907337779950997532665360675574099383071770901536956839944610958671966911839481853633864850821900071881698898792577640276493243825639264438367234578079897140922170122414231266295516348700806252994876215787514919646291029036152388651707415117588072542747711876069564655553149547617368472663390617279206671220818597277958170333660881733571453679639111036783310662568915922756273723104472808409763477322462250069521766659777598285364784485848591173019627554259050624957943587750216290863302401630604327021387146158894517443180206872233728491812921323936695682394745397548920616571364598355110926669875836845469955796356251652201279693596025208333529415535710958527053252300960434296026362163695056776797923834106168162032172826540201947831893396671449750195883932332296993243058672340706463297947667482093977679513237405927645906314576771550477682472869800531660824680977566064068367953956634867048542134798278178751058909568202573732059023447864337990823464689733951193170549330768847530204055582066420132186489550281105613597745538599968392509712137480680592727050727223282951510610656222852935488703793495665087257620758938877320596957738828695284726554792185719783264821756545070943021119514239065654144494804961303996085839676886225472051679394060971121623542528772186481020276300139127660611917460376323666224603844220495834924515759652583676169678529977744991026299008654998792491641954209422744651942972552513947078847504740673394714704478328222050765643624455729466998164747577227438387589395416208255866238678444383915601381110821214935463684766867256770598058234030225302269559570054531636351066125778503494785420845119773222604439886084937877114302391419576570492190997897964746305132928306191100398153362329786535550853808421258247875294970211901564771508861490798385277100453423363875109322966814411681601533384234013668087207157371642463713875279534533586592796383114787053907951628340390434237112015833818702027455878988427711821232240519501238480552612835818141729182840239680736396119841166276487250535062780318424642954515378842958045897706161175890421863586916919665417316339738188601809133034343133461259947792114955770708716336069634097492278092020676968329606458401121452917529814135302273961086768549028841242914555098566967126354880492633476523465704120129145142069248497611996405094551155131999888306954617326027273756757684113569926778146812027756126243936376006547653358168124210988034705825845678447274175452794804842750149802031862501640587911441528412381009802920427548631258643371745334621309231079907101433448042741229266637065615519004852694611657533413203033152527240535265408948755100184943689363995917165560666862466499299306553701007282154498863516695399197790561397411891847707819609025391052498293313817781269417923595915265841379496306395186531494773423038703914232310126391411844677670547784460015564079213425428340933069241055053830718649204710523222201620623252952899370694703996858565188930752452318604911050887184924354501000289684415618468135089171671186145053871855883592029562174246816550990900398270142401476805934794109571158926156479538025995367685595830992986757274439914689626156474102326072754872196799036751677321369070150885101409114817218394399879825428729278857071260721561886198431877380903942128514656562337306267033274386856062036238693490806014154750386698763279292115799388000468132180002350370375407597505351704043669482440265507045271308659105403875622800543447996766641172196526229268585692901774258789874685437995888538895923312653634729978419947962872662151000724596797816628600420263396376576", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(100)) == UArbBigInt::fromString("", 10) );
	
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(127)) == UArbBigInt::fromString("", 10) );
#if LONG_TESTS
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(128)) == UArbBigInt::fromString("", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(129)) == UArbBigInt::fromString("", 10) );

	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt::fromUint64(255)) == UArbBigInt::fromString("", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt::fromUint64(256)) == UArbBigInt::fromString("", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt::fromUint64(257)) == UArbBigInt::fromString("", 10) );
	REQUIRE( UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt::fromString("321", 10)) == UArbBigInt::fromString("", 10) );
#endif

	//REQUIRE( UArbBigInt::fromString("321", 10).pow(UArbBigInt::fromString("721", 10)) == UArbBigInt::fromString("", 10)

	REQUIRE( UArbBigInt::fromString("1234523643567098765433567268387411043985640123642389767832457568567546743234", 10).pow(UArbBigInt(  0)).toUint64() ==   1 );
	REQUIRE( UArbBigInt(  0).pow(UArbBigInt::fromString("1234523643567098765433567268387411043985640123642389767832457568567546743234", 10)).toUint64() ==   0 );
}

TEST_CASE( "unsigned infinit big integer sqrt", "[UABigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( UArbBigInt(  0).sqrt().toUint64() ==   0 );
	REQUIRE( UArbBigInt(  1).sqrt().toUint64() ==   1 );
	REQUIRE( UArbBigInt(  2).sqrt().toUint64() ==   1 );
	REQUIRE( UArbBigInt(  3).sqrt().toUint64() ==   1 );
	REQUIRE( UArbBigInt(  4).sqrt().toUint64() ==   2 );
	REQUIRE( UArbBigInt(  5).sqrt().toUint64() ==   2 );
	REQUIRE( UArbBigInt(  6).sqrt().toUint64() ==   2 );
	REQUIRE( UArbBigInt(  7).sqrt().toUint64() ==   2 );
	REQUIRE( UArbBigInt(  8).sqrt().toUint64() ==   2 );
	REQUIRE( UArbBigInt(  9).sqrt().toUint64() ==   3 );
	REQUIRE( UArbBigInt( 10).sqrt().toUint64() ==   3 );
	REQUIRE( UArbBigInt( 11).sqrt().toUint64() ==   3 );
	REQUIRE( UArbBigInt( 12).sqrt().toUint64() ==   3 );
	REQUIRE( UArbBigInt( 13).sqrt().toUint64() ==   3 );
	REQUIRE( UArbBigInt( 14).sqrt().toUint64() ==   3 );
	REQUIRE( UArbBigInt( 15).sqrt().toUint64() ==   3 );
	REQUIRE( UArbBigInt( 16).sqrt().toUint64() ==   4 );
	REQUIRE( UArbBigInt( 18).sqrt().toUint64() ==   4 );
	REQUIRE( UArbBigInt( 19).sqrt().toUint64() ==   4 );
	REQUIRE( UArbBigInt( 20).sqrt().toUint64() ==   4 );

	REQUIRE( UArbBigInt( 25).sqrt().toUint64() ==   5 );
	REQUIRE( UArbBigInt( 79).sqrt().toUint64() ==   8);
	REQUIRE( UArbBigInt(127).sqrt().toUint64() ==   11);
	REQUIRE( UArbBigInt(143).sqrt().toUint64() ==   11);
	REQUIRE( UArbBigInt(144).sqrt().toUint64() ==   12);
	REQUIRE( UArbBigInt(145).sqrt().toUint64() ==   12);
	REQUIRE( UArbBigInt(255).sqrt().toUint64() ==   15);

	// 2 Byte (16bit)
	REQUIRE( UArbBigInt::fromUint64(  256).sqrt().toUint64() ==   16);
	REQUIRE( UArbBigInt::fromUint64(16128).sqrt().toUint64() ==   126);
	REQUIRE( UArbBigInt::fromUint64(16129).sqrt().toUint64() ==   127);
	REQUIRE( UArbBigInt::fromUint64(16130).sqrt().toUint64() ==   127);

	// 4 Byte (32bit)
	REQUIRE( UArbBigInt::fromString("10 00 00 00", 16).sqrt() == UArbBigInt::fromString("40 00", 16) );
	REQUIRE( UArbBigInt::fromString("01 23 cd ef", 16).sqrt() == UArbBigInt::fromString("11 15", 16) );
	REQUIRE( UArbBigInt::fromString("ff ff ff ff", 16).sqrt() == UArbBigInt::fromString("ff ff", 16) );

	// 8 Byte (64bit)
	REQUIRE( UArbBigInt::fromString("10 00 00 00 00 00 00 00", 16).sqrt() == UArbBigInt::fromString("40 00 00 00", 16) );
	REQUIRE( UArbBigInt::fromString("01 23 45 67 89 ab cd ef", 16).sqrt() == UArbBigInt::fromString("11 11 11 11", 16) );
	REQUIRE( UArbBigInt::fromString("ff ff ff ff ff ff ff ff", 16).sqrt() == UArbBigInt::fromString("ff ff ff ff", 16) );

	// 16 Byte (128bit)
	REQUIRE( UArbBigInt::fromString("0d f8 45 84 5b 4a 35 e4 89 0d e0 00 9f", 16).sqrt() == UArbBigInt::fromString("03 bc d4 ba db 37 87", 16) );
	REQUIRE( UArbBigInt::fromString("c7 d8 56 0d f8 45 84 5b 4a 35 e4 89 0d e0 00 9f", 16).sqrt() == UArbBigInt::fromString("e2 2f be f3 b5 70 46 1d", 16) );

	// ------
	REQUIRE( UArbBigInt::fromString("1524048626526185117008148645329708998795770321794318911442256140455458946053172210513801777413097237329246447244122385285308414454789711324787960475901495579519924778756", 10).sqrt() == UArbBigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10) );
}

TEST_CASE( "unsigned infinit big integer bitLength", "[UABigint]" ) {
	REQUIRE( UArbBigInt::fromString("00000000", 2).bitLength() == 0 );
	REQUIRE( UArbBigInt::fromString("00000001", 2).bitLength() == 1 );
	REQUIRE( UArbBigInt::fromString("00000011", 2).bitLength() == 2 );
	REQUIRE( UArbBigInt::fromString("00000111", 2).bitLength() == 3 );
	REQUIRE( UArbBigInt::fromString("00001111", 2).bitLength() == 4 );
	REQUIRE( UArbBigInt::fromString("00011111", 2).bitLength() == 5 );
	REQUIRE( UArbBigInt::fromString("00111111", 2).bitLength() == 6 );
	REQUIRE( UArbBigInt::fromString("01111111", 2).bitLength() == 7 );
	REQUIRE( UArbBigInt::fromString("11111111", 2).bitLength() == 8 );

	REQUIRE( UArbBigInt::fromString("00000000", 2).bitLength() == 0 );
	REQUIRE( UArbBigInt::fromString("00000001", 2).bitLength() == 1 );
	REQUIRE( UArbBigInt::fromString("00000010", 2).bitLength() == 2 );
	REQUIRE( UArbBigInt::fromString("00000100", 2).bitLength() == 3 );
	REQUIRE( UArbBigInt::fromString("00001000", 2).bitLength() == 4 );
	REQUIRE( UArbBigInt::fromString("00010000", 2).bitLength() == 5 );
	REQUIRE( UArbBigInt::fromString("00100000", 2).bitLength() == 6 );
	REQUIRE( UArbBigInt::fromString("01000000", 2).bitLength() == 7 );
	REQUIRE( UArbBigInt::fromString("10000000", 2).bitLength() == 8 );

	REQUIRE( UArbBigInt::fromString("00000000 00000000", 2).bitLength() ==  0 );
	REQUIRE( UArbBigInt::fromString("00000001 00000000", 2).bitLength() ==  9 );
	REQUIRE( UArbBigInt::fromString("00000010 00000000", 2).bitLength() == 10 );
	REQUIRE( UArbBigInt::fromString("00000100 00000000", 2).bitLength() == 11 );
	REQUIRE( UArbBigInt::fromString("00001000 00000000", 2).bitLength() == 12 );
	REQUIRE( UArbBigInt::fromString("00010000 00000000", 2).bitLength() == 13 );
	REQUIRE( UArbBigInt::fromString("00100000 00000000", 2).bitLength() == 14 );
	REQUIRE( UArbBigInt::fromString("01000000 00000000", 2).bitLength() == 15 );
	REQUIRE( UArbBigInt::fromString("10000000 00000000", 2).bitLength() == 16 );

	REQUIRE( UArbBigInt::fromString("00000000 00000000 00000000", 2).bitLength() ==  0 );
	REQUIRE( UArbBigInt::fromString("00000001 00000000 00000000", 2).bitLength() == 17 );
	REQUIRE( UArbBigInt::fromString("00000010 00000000 00000000", 2).bitLength() == 18 );
	REQUIRE( UArbBigInt::fromString("00000100 00000000 00000000", 2).bitLength() == 19 );
	REQUIRE( UArbBigInt::fromString("00001000 00000000 00000000", 2).bitLength() == 20 );
	REQUIRE( UArbBigInt::fromString("00010000 00000000 00000000", 2).bitLength() == 21 );
	REQUIRE( UArbBigInt::fromString("00100000 00000000 00000000", 2).bitLength() == 22 );
	REQUIRE( UArbBigInt::fromString("01000000 00000000 00000000", 2).bitLength() == 23 );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000", 2).bitLength() == 24 );

	// 9 byte
	REQUIRE( UArbBigInt::fromString("00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() ==  0 );
	REQUIRE( UArbBigInt::fromString("00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() == 64 );
	REQUIRE( UArbBigInt::fromString("00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() == 65 );
	REQUIRE( UArbBigInt::fromString("00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() == 66 );
	REQUIRE( UArbBigInt::fromString("00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() == 67 );
	REQUIRE( UArbBigInt::fromString("00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() == 68 );
	REQUIRE( UArbBigInt::fromString("00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() == 69 );
	REQUIRE( UArbBigInt::fromString("00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() == 70 );
	REQUIRE( UArbBigInt::fromString("01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() == 71 );
	REQUIRE( UArbBigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2).bitLength() == 72 );

	REQUIRE( UArbBigInt::fromString("00000000 00000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 57 );
	REQUIRE( UArbBigInt::fromString("00000000 10000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 64 );
	REQUIRE( UArbBigInt::fromString("00000001 00000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 65 );
	REQUIRE( UArbBigInt::fromString("00000011 00000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 66 );
	REQUIRE( UArbBigInt::fromString("00000111 00000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 67 );
	REQUIRE( UArbBigInt::fromString("00001111 00000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 68 );
	REQUIRE( UArbBigInt::fromString("00011111 00000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 69 );
	REQUIRE( UArbBigInt::fromString("00111111 00000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 70 );
	REQUIRE( UArbBigInt::fromString("01111111 00000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 71 );
	REQUIRE( UArbBigInt::fromString("11111111 00000001 10000000 00011000 00000000 10000001 10000000 00000000 00000001", 2).bitLength() == 72 );

}

TEST_CASE( "unsigned infinit big integer modInverse", "[UABigint]" ) {
	// wolfram alpha: PowerMod[this, -1, param]
	REQUIRE_THROWS_AS( UArbBigInt( 1).modInverse(0), std::invalid_argument );
	REQUIRE( UArbBigInt( 1).modInverse(3) == 1 );
	REQUIRE( UArbBigInt(13).modInverse(3) == 1 );
	REQUIRE( UArbBigInt( 2).modInverse(13) == 7 ); // wolfram alpha: PowerMod[2, -1, 13] => 7
	REQUIRE( UArbBigInt( 7).modInverse(13) == 2 );
	REQUIRE( UArbBigInt( 5).modInverse(13) == 8 );
	
	REQUIRE( UArbBigInt( 1).modInverse(23) ==  1 );
	REQUIRE( UArbBigInt( 2).modInverse(23) ==  12 );
	REQUIRE( UArbBigInt(14).modInverse(23) ==  5 );
	REQUIRE( UArbBigInt(19).modInverse(23) == 17 );
	REQUIRE( UArbBigInt(21).modInverse(23) == 11 );
	REQUIRE( UArbBigInt(117).modInverse(23) == 12 );
	
	REQUIRE( UArbBigInt(1).modInverse(127) == 1 );
	REQUIRE( UArbBigInt(2).modInverse(127) == 64 );
	REQUIRE( UArbBigInt(117).modInverse(127) == 38 );
	REQUIRE( UArbBigInt(123).modInverse(127) == 95 );
	REQUIRE( UArbBigInt(88).modInverse(127) == 13 );
	REQUIRE( UArbBigInt(99).modInverse(127) == 68 );
	REQUIRE( UArbBigInt(126).modInverse(127) == 126 );
	REQUIRE( UArbBigInt(255).modInverse(127) == 1 );
	REQUIRE( UArbBigInt(211).modInverse(127) == 62 );
	
	REQUIRE( UArbBigInt(3).modInverse(4) == 3 );
	REQUIRE( UArbBigInt(1).modInverse(4) == 1 );
	REQUIRE( UArbBigInt(5).modInverse(8) == 5 );

	REQUIRE( UArbBigInt::fromUint64( 1).modInverse(UArbBigInt::fromUint64( 5)).toUint64() ==  1 );
	REQUIRE( UArbBigInt::fromUint64( 256).modInverse(UArbBigInt::fromUint64( 11)).toUint64() ==  4 );

	REQUIRE( UArbBigInt::fromUint64( 62369045776285).modInverse(UArbBigInt::fromUint64( 43567898765432)).toUint64() == 38649570326437 );
	REQUIRE( UArbBigInt::fromUint64( 38649570326437).modInverse(UArbBigInt::fromUint64( 43567898765432)).toUint64() == 18801147010853 );
	REQUIRE( UArbBigInt::fromUint64( 62369045776285).modInverse(UArbBigInt::fromUint64( 43567898765431)).toUint64() == 15760287535499 );
	REQUIRE( UArbBigInt::fromUint64( 38649570326437).modInverse(UArbBigInt::fromUint64( 43567898765431)).toUint64() == 39163431965283 );

	REQUIRE( UArbBigInt::fromString("16017867594215767234084978576693245168373889033733221066690514240642714658687", 10).modInverse(UArbBigInt::fromString("64071470376863068936339914306772980674254926422336709160732384697932204415401", 10)) == UArbBigInt::fromString("84374476378202765996703081706816197849", 10) );

	REQUIRE( UArbBigInt::fromString(" 84374476378202765996703081706816197849", 10).modInverse(UArbBigInt::fromString(" 64071470376863068936339914306772980674254926422336709160732384697932204415401", 10)) == UArbBigInt::fromString(" 16017867594215767234084978576693245168373889033733221066690514240642714658687", 10) );


	UArbBigInt one = UArbBigInt(1);
	//SArbBigInt minusOne = SArbBigInt(1, true);
	UArbBigInt v = UArbBigInt::fromString(" 12345672345890887765433", 10);
	UArbBigInt m = UArbBigInt::fromString(" 204690484325368677690653462884286106163", 10);

	// m > 0 & v > 0
	REQUIRE( (v * v.modInverse(m) ) % m == UArbBigInt(1) % m);
	
	REQUIRE_THROWS( UArbBigInt(255).modInverse( 48) );	// not relatively prime
	REQUIRE_THROWS( UArbBigInt( 15).modInverse( 25) );	// not relatively prime
	REQUIRE_THROWS( UArbBigInt(100).modInverse( 16) );	// not relatively prime
	REQUIRE_THROWS( UArbBigInt(126).modInverse( 90) );	// not relatively prime
}

TEST_CASE( "unsigned infinit big integer modPow", "[UABigint]" ) {
	// wolfram alpha: PowerMod[this, -1, param]

	// Trivial cases: exponent = 0
	REQUIRE( UArbBigInt(  0      ).modPow(UArbBigInt(  0       ), UArbBigInt(  3)) == UArbBigInt( 1) ); // PowerMod[   0,    0,  3]
	REQUIRE( UArbBigInt(  0      ).modPow(UArbBigInt(  0       ), UArbBigInt(  1)) == UArbBigInt( 0) ); // PowerMod[   0,    0,  1]
	REQUIRE( UArbBigInt(111      ).modPow(UArbBigInt(  0       ), UArbBigInt(  3)) == UArbBigInt( 1) ); // PowerMod[ 111,    0,  3]
	REQUIRE( UArbBigInt(111      ).modPow(UArbBigInt(  0       ), UArbBigInt(  1)) == UArbBigInt( 0) ); // PowerMod[ 111,    0,  1]
	REQUIRE( UArbBigInt(111      ).modPow(UArbBigInt(  0       ), UArbBigInt( 33)) == UArbBigInt( 1) ); // PowerMod[ 111,    0, 33]
	REQUIRE( UArbBigInt(111      ).modPow(UArbBigInt(  0       ), UArbBigInt( 21)) == UArbBigInt( 1) ); // PowerMod[ 111,    0, 21]

	// Trivial cases: base = 1
	REQUIRE( UArbBigInt(  1      ).modPow(UArbBigInt(123       ), UArbBigInt(  1)) == UArbBigInt(0) ); // PowerMod[   1,  123,  1]
	REQUIRE( UArbBigInt(  1      ).modPow(UArbBigInt(123       ), UArbBigInt( 55)) == UArbBigInt(1) ); // PowerMod[   1,  123, 55]

	// Trivial cases: base = 0
	REQUIRE( UArbBigInt(  0      ).modPow(UArbBigInt(  7       ), UArbBigInt( 11)) == UArbBigInt(0) ); // PowerMod[   0,  7,   11]
	REQUIRE( UArbBigInt(  0      ).modPow(UArbBigInt(123       ), UArbBigInt( 55)) == UArbBigInt(0) ); // PowerMod[   0, 123,  55]
	REQUIRE( UArbBigInt(  0      ).modPow(UArbBigInt( 33       ), UArbBigInt(123)) == UArbBigInt(0) ); // PowerMod[   0,  33, 123]

	// -----
	REQUIRE( UArbBigInt(  2      ).modPow(UArbBigInt(  7       ), UArbBigInt( 11)) == UArbBigInt(7) ); // PowerMod[   2,  7,   11]
	REQUIRE( UArbBigInt(  3      ).modPow(UArbBigInt(  7       ), UArbBigInt( 11)) == UArbBigInt(9) ); // PowerMod[   3,  7,   11]
	
	REQUIRE( UArbBigInt(121      ).modPow(UArbBigInt(  7       ), UArbBigInt( 11)) == UArbBigInt(0) ); // PowerMod[121, 7, 11]
	REQUIRE( UArbBigInt(122      ).modPow(UArbBigInt(  7       ), UArbBigInt( 11)) == UArbBigInt(1) ); // PowerMod[122, 7, 11]
	REQUIRE( UArbBigInt(123      ).modPow(UArbBigInt(  7       ), UArbBigInt( 11)) == UArbBigInt(7) ); // PowerMod[123, 7, 11]
	
	// test k=16
	// 4 bit exponent
	REQUIRE( UArbBigInt(169      ).modPow(UArbBigInt(  9       ), UArbBigInt( 11)) == UArbBigInt(3) ); // PowerMod[169, 9,  11]
	REQUIRE( UArbBigInt(117      ).modPow(UArbBigInt( 13       ), UArbBigInt( 17)) == UArbBigInt(2) ); // PowerMod[117, 13, 17]
	// 8 bit exponent
	REQUIRE( UArbBigInt(213      ).modPow(UArbBigInt(128       ), UArbBigInt( 19)) == UArbBigInt(16) ); // PowerMod[213, 128,  19]
	REQUIRE( UArbBigInt(213      ).modPow(UArbBigInt(141       ), UArbBigInt( 19)) == UArbBigInt(11) ); // PowerMod[213, 141,  19]
	REQUIRE( UArbBigInt(213      ).modPow(UArbBigInt(149       ), UArbBigInt( 13)) == UArbBigInt(5) ); // PowerMod[213, 149,  13]

	// 5 bit exponent
	REQUIRE( UArbBigInt(169      ).modPow(UArbBigInt( 21       ), UArbBigInt( 11)) == UArbBigInt(4) ); // PowerMod[169, 21,  11]
	REQUIRE( UArbBigInt(117      ).modPow(UArbBigInt( 29       ), UArbBigInt( 17)) == UArbBigInt(2) ); // PowerMod[117, 29, 17]
	
	// 9 bit exponent
	REQUIRE( UArbBigInt::fromUint64(169).modPow(UArbBigInt::fromUint64(256), UArbBigInt::fromUint64( 77)) == UArbBigInt::fromUint64(15) ); // PowerMod[169, 256,  77]
	REQUIRE( UArbBigInt::fromUint64(117).modPow(UArbBigInt::fromUint64(289), UArbBigInt::fromUint64( 19)) == UArbBigInt::fromUint64( 3) ); // PowerMod[117, 289,  19]
	REQUIRE( UArbBigInt::fromUint64(213).modPow(UArbBigInt::fromUint64(323), UArbBigInt::fromUint64( 13)) == UArbBigInt::fromUint64( 8) ); // PowerMod[213, 323,  13]
	REQUIRE( UArbBigInt::fromUint64(169).modPow(UArbBigInt::fromUint64(357), UArbBigInt::fromUint64( 89)) == UArbBigInt::fromUint64(47) ); // PowerMod[169, 357,  89]
	REQUIRE( UArbBigInt::fromUint64(117).modPow(UArbBigInt::fromUint64(391), UArbBigInt::fromUint64( 19)) == UArbBigInt::fromUint64(14) ); // PowerMod[117, 391,  19]
	REQUIRE( UArbBigInt::fromUint64(213).modPow(UArbBigInt::fromUint64(425), UArbBigInt::fromUint64( 13)) == UArbBigInt::fromUint64( 5) ); // PowerMod[213, 425,  13]
	REQUIRE( UArbBigInt::fromUint64(169).modPow(UArbBigInt::fromUint64(459), UArbBigInt::fromUint64( 77)) == UArbBigInt::fromUint64(36) ); // PowerMod[169, 459,  77]
	REQUIRE( UArbBigInt::fromUint64(117).modPow(UArbBigInt::fromUint64(493), UArbBigInt::fromUint64( 19)) == UArbBigInt::fromUint64( 2) ); // PowerMod[117, 493,  19]
	REQUIRE( UArbBigInt::fromUint64(213).modPow(UArbBigInt::fromUint64(271), UArbBigInt::fromUint64( 13)) == UArbBigInt::fromUint64( 8) ); // PowerMod[213, 271,  13]
	
	// 10 bit exponent
	REQUIRE( UArbBigInt::fromUint64(117).modPow(UArbBigInt::fromUint64(1005), UArbBigInt::fromUint64( 19)) == UArbBigInt::fromUint64(12) ); // PowerMod[117, 1005,  19]
	// 11 bit exponent
	REQUIRE( UArbBigInt::fromUint64(117).modPow(UArbBigInt::fromUint64(1773), UArbBigInt::fromUint64( 19)) == UArbBigInt::fromUint64(18) ); // PowerMod[117, 1773,  19]
	// 12 bit exponent
	REQUIRE( UArbBigInt::fromUint64(117).modPow(UArbBigInt::fromUint64(2797), UArbBigInt::fromUint64( 19)) == UArbBigInt::fromUint64( 2) ); // PowerMod[117, 2797,  19]
	// 13 bit exponent
	REQUIRE( UArbBigInt::fromUint64(117).modPow(UArbBigInt::fromUint64(5613), UArbBigInt::fromUint64( 19)) == UArbBigInt::fromUint64(12) ); // PowerMod[117, 5613,  19]
	
	// -----
	REQUIRE( UArbBigInt::fromString("321", 10).modPow(UArbBigInt::fromString("170316580215634215412390428579751188659", 10), UArbBigInt::fromString("29007737496348564246541369697392157257353622947791601355298952855523410218281", 10)) == UArbBigInt::fromString("17721908342651498136687561664913427653804630235400928582777881790054443435532", 10) ); // PowerMod[321, 170316580215634215412390428579751188659, 29007737496348564246541369697392157257353622947791601355298952855523410218281]

	REQUIRE( UArbBigInt::fromString("3214568", 10).modPow(UArbBigInt::fromString("170316580215634215412390428579751188659", 10), UArbBigInt::fromString("29007737496348564246541369697392157257353622947791601355298952855523410218281", 10)) == UArbBigInt::fromString("1127560914217561411705062573176555105071973410478365642298306671851679283604", 10) ); // PowerMod[3214568, 170316580215634215412390428579751188659, 29007737496348564246541369697392157257353622947791601355298952855523410218281]

	REQUIRE(
			UArbBigInt::fromString(                                      "147058127173847711901598181942028410410", 10).modPow(
												  UArbBigInt::fromString("212590621487307383100037676105693032843", 10),
			UArbBigInt::fromString("45194772344359599619712314997219172273874874118738306499181802927551476662649", 10)
			).toStringDec() == "14880112179674072450044864404658332961525453634042072109707074639304131011910"
			); // PowerMod[147058127173847711901598181942028410410, 212590621487307383100037676105693032843, 45194772344359599619712314997219172273874874118738306499181802927551476662649]

	// b > m
	REQUIRE(
			UArbBigInt::fromString("34546737496348564246541369697392157357343622947391601355298952857523410218281", 10).modPow(
												  UArbBigInt::fromString("170316580215634215412390428579751188659", 10),
			UArbBigInt::fromString("29007737496348564246541369697392157257353622947791601355298952855523410218281", 10)
			).toStringDec() == "27437935934933632837176167850088741034260151597862879929180562960786562419072"
		); // PowerMod[34546737496348564246541369697392157357343622947391601355298952857523410218281, 170316580215634215412390428579751188659, 29007737496348564246541369697392157257353622947791601355298952855523410218281]
	
	// even modulus
	REQUIRE( UArbBigInt(124      ).modPow(UArbBigInt(200       ), UArbBigInt(128)) == UArbBigInt( 0) ); // PowerMod[ 124,  200,128] // test case where m1 == 1
	REQUIRE( UArbBigInt( 15      ).modPow(UArbBigInt(123       ), UArbBigInt(128)) == UArbBigInt(47) ); // PowerMod[  15,  123,128] // test case where m1 == 1
	REQUIRE(
			UArbBigInt::fromString("8", 10).modPow( UArbBigInt::fromString("16", 10), UArbBigInt::fromString("12", 10)
			).toStringDec() == "4"
		); //PowerMod[8, 26, 12]
	REQUIRE(
			UArbBigInt::fromString("DDD283D73A398FE7A86987D9E0A37063", 16).modPow( UArbBigInt::fromString("DC9481390F23502D4F3C8D54BB194AA6", 16), UArbBigInt::fromString("EA3D7298B90FCFAE01364041BCB288C", 16)
			).toStringDec() == "12944751882554430796756496548659233721"
		); // PowerMod[294852443456491459562487243528900669539, 293201239959273747082550393509009509030, 19459900338543143665460291529662474380]
}

TEST_CASE( "unsigned infinit big integer randomNumber", "[UABigint]" ) {
	ppvr::math::Random rnd{};

	REQUIRE_THROWS (UArbBigInt::randomNumber(0, rnd));

	// randomNumber must return 1 or more
	REQUIRE( UArbBigInt::randomNumber(  1, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  2, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  3, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  3, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  2, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  1, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  1, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  2, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  3, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  3, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  2, rnd) >= UArbBigInt(1) );
	REQUIRE( UArbBigInt::randomNumber(  1, rnd) >= UArbBigInt(1) );

	// check max bit length
	// 1 Byte
	REQUIRE( UArbBigInt::randomNumber(  1, rnd).bitLength() <=   1 );
	REQUIRE( UArbBigInt::randomNumber(  2, rnd).bitLength() <=   2 );
	REQUIRE( UArbBigInt::randomNumber(  3, rnd).bitLength() <=   3 );
	REQUIRE( UArbBigInt::randomNumber(  4, rnd).bitLength() <=   4 );
	REQUIRE( UArbBigInt::randomNumber(  5, rnd).bitLength() <=   5 );
	REQUIRE( UArbBigInt::randomNumber(  6, rnd).bitLength() <=   6 );
	REQUIRE( UArbBigInt::randomNumber(  7, rnd).bitLength() <=   7 );
	REQUIRE( UArbBigInt::randomNumber(  8, rnd).bitLength() <=   8 );

	// 2 Byte
	REQUIRE( UArbBigInt::randomNumber(  9, rnd).bitLength() <=   9 );
	REQUIRE( UArbBigInt::randomNumber( 10, rnd).bitLength() <=  10 );
	REQUIRE( UArbBigInt::randomNumber( 11, rnd).bitLength() <=  11 );
	REQUIRE( UArbBigInt::randomNumber( 12, rnd).bitLength() <=  12 );
	REQUIRE( UArbBigInt::randomNumber( 13, rnd).bitLength() <=  13 );
	REQUIRE( UArbBigInt::randomNumber( 14, rnd).bitLength() <=  14 );
	REQUIRE( UArbBigInt::randomNumber( 15, rnd).bitLength() <=  15 );
	REQUIRE( UArbBigInt::randomNumber( 16, rnd).bitLength() <=  16 );

	// 3 Byte
	REQUIRE( UArbBigInt::randomNumber( 17, rnd).bitLength() <=  17 );
	REQUIRE( UArbBigInt::randomNumber( 18, rnd).bitLength() <=  18 );
	REQUIRE( UArbBigInt::randomNumber( 19, rnd).bitLength() <=  19 );
	REQUIRE( UArbBigInt::randomNumber( 20, rnd).bitLength() <=  20 );
	REQUIRE( UArbBigInt::randomNumber( 21, rnd).bitLength() <=  21 );
	REQUIRE( UArbBigInt::randomNumber( 22, rnd).bitLength() <=  22 );
	REQUIRE( UArbBigInt::randomNumber( 23, rnd).bitLength() <=  23 );
	REQUIRE( UArbBigInt::randomNumber( 24, rnd).bitLength() <=  24 );

	// 4 Byte
	REQUIRE( UArbBigInt::randomNumber( 25, rnd).bitLength() <=  25 );
	REQUIRE( UArbBigInt::randomNumber( 26, rnd).bitLength() <=  26 );
	REQUIRE( UArbBigInt::randomNumber( 27, rnd).bitLength() <=  27 );
	REQUIRE( UArbBigInt::randomNumber( 28, rnd).bitLength() <=  28 );
	REQUIRE( UArbBigInt::randomNumber( 29, rnd).bitLength() <=  29 );
	REQUIRE( UArbBigInt::randomNumber( 30, rnd).bitLength() <=  30 );
	REQUIRE( UArbBigInt::randomNumber( 31, rnd).bitLength() <=  31 );
	REQUIRE( UArbBigInt::randomNumber( 32, rnd).bitLength() <=  32 );

	// 8 Bytes
	REQUIRE( UArbBigInt::randomNumber( 60, rnd).bitLength() <=  60 );
	REQUIRE( UArbBigInt::randomNumber( 61, rnd).bitLength() <=  61 );
	REQUIRE( UArbBigInt::randomNumber( 62, rnd).bitLength() <=  62 );
	REQUIRE( UArbBigInt::randomNumber( 63, rnd).bitLength() <=  63 );
	REQUIRE( UArbBigInt::randomNumber( 64, rnd).bitLength() <=  64 );

	// 9 Byte
	REQUIRE( UArbBigInt::randomNumber( 65, rnd).bitLength() <=  65 );
	REQUIRE( UArbBigInt::randomNumber( 66, rnd).bitLength() <=  66 );
	REQUIRE( UArbBigInt::randomNumber( 67, rnd).bitLength() <=  67 );

	// 16 Byte
	REQUIRE( UArbBigInt::randomNumber(126, rnd).bitLength() <= 126 );
	REQUIRE( UArbBigInt::randomNumber(127, rnd).bitLength() <= 127 );
	REQUIRE( UArbBigInt::randomNumber(128, rnd).bitLength() <= 128 );

	// 17 Byte
	REQUIRE( UArbBigInt::randomNumber(129, rnd).bitLength() <= 129 );
	REQUIRE( UArbBigInt::randomNumber(130, rnd).bitLength() <= 130 );
	REQUIRE( UArbBigInt::randomNumber(131, rnd).bitLength() <= 131 );
	REQUIRE( UArbBigInt::randomNumber(132, rnd).bitLength() <= 132 );
	REQUIRE( UArbBigInt::randomNumber(133, rnd).bitLength() <= 133 );
	REQUIRE( UArbBigInt::randomNumber(134, rnd).bitLength() <= 134 );
	REQUIRE( UArbBigInt::randomNumber(135, rnd).bitLength() <= 135 );
	REQUIRE( UArbBigInt::randomNumber(136, rnd).bitLength() <= 136 );


	REQUIRE( UArbBigInt::randomNumber(1023, rnd).bitLength() <= 1023 );
	REQUIRE( UArbBigInt::randomNumber(1024, rnd).bitLength() <= 1024 );
	REQUIRE( UArbBigInt::randomNumber(1025, rnd).bitLength() <= 1025 );

	REQUIRE( UArbBigInt::randomNumber(2047, rnd).bitLength() <= 2047 );
	REQUIRE( UArbBigInt::randomNumber(2048, rnd).bitLength() <= 2048 );
	REQUIRE( UArbBigInt::randomNumber(2049, rnd).bitLength() <= 2049 );
}

TEST_CASE( "unsigned infinit big integer setBit", "[UABigint]" ) {
	REQUIRE( UArbBigInt::fromString("00000000", 2).withBit(0) == UArbBigInt::fromString("00000001", 2) );
	REQUIRE( UArbBigInt::fromString("00000000", 2).withBit(1) == UArbBigInt::fromString("00000010", 2) );
	REQUIRE( UArbBigInt::fromString("00000000", 2).withBit(2) == UArbBigInt::fromString("00000100", 2) );
	REQUIRE( UArbBigInt::fromString("00000000", 2).withBit(3) == UArbBigInt::fromString("00001000", 2) );
	REQUIRE( UArbBigInt::fromString("00000000", 2).withBit(4) == UArbBigInt::fromString("00010000", 2) );
	REQUIRE( UArbBigInt::fromString("00000000", 2).withBit(5) == UArbBigInt::fromString("00100000", 2) );
	REQUIRE( UArbBigInt::fromString("00000000", 2).withBit(6) == UArbBigInt::fromString("01000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000000", 2).withBit(7) == UArbBigInt::fromString("10000000", 2) );

	REQUIRE( UArbBigInt::fromString("10101010", 2).withBit(0) == UArbBigInt::fromString("10101011", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withBit(1) == UArbBigInt::fromString("10101010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withBit(2) == UArbBigInt::fromString("10101110", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withBit(3) == UArbBigInt::fromString("10101010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withBit(4) == UArbBigInt::fromString("10111010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withBit(5) == UArbBigInt::fromString("10101010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withBit(6) == UArbBigInt::fromString("11101010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withBit(7) == UArbBigInt::fromString("10101010", 2) );

	REQUIRE( UArbBigInt::fromString("    77 66 55 44 33 22 11 00", 16).withBit( 64) == UArbBigInt::fromString("                         01  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(  7) == UArbBigInt::fromString("                         88  77 66 55 44 33 22 11 80", 16) );
	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(127) == UArbBigInt::fromString("00  80 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(128) == UArbBigInt::fromString("01  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(129) == UArbBigInt::fromString("02  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(130) == UArbBigInt::fromString("04  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(131) == UArbBigInt::fromString("08  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(132) == UArbBigInt::fromString("10  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );

	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(191) == UArbBigInt::fromString("    80 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(192) == UArbBigInt::fromString("01  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16).withBit(193) == UArbBigInt::fromString("02  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );
}

TEST_CASE( "unsigned infinit big integer clearBit", "[UABigint]" ) {
	REQUIRE( UArbBigInt::fromString("00000001", 2).withoutBit(0) == UArbBigInt::fromString("00000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000010", 2).withoutBit(1) == UArbBigInt::fromString("00000000", 2) );
	REQUIRE( UArbBigInt::fromString("00000100", 2).withoutBit(2) == UArbBigInt::fromString("00000000", 2) );
	REQUIRE( UArbBigInt::fromString("00001000", 2).withoutBit(3) == UArbBigInt::fromString("00000000", 2) );
	REQUIRE( UArbBigInt::fromString("00010000", 2).withoutBit(4) == UArbBigInt::fromString("00000000", 2) );
	REQUIRE( UArbBigInt::fromString("00100000", 2).withoutBit(5) == UArbBigInt::fromString("00000000", 2) );
	REQUIRE( UArbBigInt::fromString("01000000", 2).withoutBit(6) == UArbBigInt::fromString("00000000", 2) );
	REQUIRE( UArbBigInt::fromString("10000000", 2).withoutBit(7) == UArbBigInt::fromString("00000000", 2) );

	REQUIRE( UArbBigInt::fromString("10101010", 2).withoutBit(0) == UArbBigInt::fromString("10101010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withoutBit(1) == UArbBigInt::fromString("10101000", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withoutBit(2) == UArbBigInt::fromString("10101010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withoutBit(3) == UArbBigInt::fromString("10100010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withoutBit(4) == UArbBigInt::fromString("10101010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withoutBit(5) == UArbBigInt::fromString("10001010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withoutBit(6) == UArbBigInt::fromString("10101010", 2) );
	REQUIRE( UArbBigInt::fromString("10101010", 2).withoutBit(7) == UArbBigInt::fromString("00101010", 2) );

	REQUIRE( UArbBigInt::fromString("                         01  77 66 55 44 33 22 11 00", 16).withoutBit( 64) == UArbBigInt::fromString("    77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("                         88  77 66 55 44 33 22 11 80", 16).withoutBit(  7) == UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("00  80 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(127) == UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("01  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(128) == UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("02  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(129) == UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("04  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(130) == UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("08  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(131) == UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("10  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(132) == UArbBigInt::fromString("88  77 66 55 44 33 22 11 00", 16) );

	REQUIRE( UArbBigInt::fromString("    80 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(191) == UArbBigInt::fromString("                                                  88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("01  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(192) == UArbBigInt::fromString("                                                  88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("02  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(193) == UArbBigInt::fromString("                                                  88  77 66 55 44 33 22 11 00", 16) );
	REQUIRE( UArbBigInt::fromString("03  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).withoutBit(192) == UArbBigInt::fromString("02  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16) );
}

TEST_CASE( "unsigned infinit big integer isEven", "[UABigint]" ) {
	REQUIRE( UArbBigInt::fromString("10101010", 2).isEven() == true );
	REQUIRE( UArbBigInt::fromString("10101011", 2).isEven() == false );
	
	REQUIRE( UArbBigInt::fromString("254", 2).isEven() == true );
	REQUIRE( UArbBigInt::fromString("255", 2).isEven() == false );
	
	REQUIRE( UArbBigInt::fromString("    80 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).isEven() == true );
	REQUIRE( UArbBigInt::fromString("    80 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 01", 16).isEven() == false );
	REQUIRE( UArbBigInt::fromString("03  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 0a", 16).isEven() == true );
	REQUIRE( UArbBigInt::fromString("03  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 0d", 16).isEven() == false );
}

TEST_CASE( "unsigned infinit big integer isOdd", "[UABigint]" ) {
	REQUIRE( UArbBigInt::fromString("10101010", 2).isOdd() == false );
	REQUIRE( UArbBigInt::fromString("10101011", 2).isOdd() == true );
	
	REQUIRE( UArbBigInt::fromString("254", 2).isOdd() == false );
	REQUIRE( UArbBigInt::fromString("255", 2).isOdd() == true );
	
	REQUIRE( UArbBigInt::fromString("    80 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 00", 16).isOdd() == false );
	REQUIRE( UArbBigInt::fromString("    80 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 01", 16).isOdd() == true );
	REQUIRE( UArbBigInt::fromString("03  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 0a", 16).isOdd() == false );
	REQUIRE( UArbBigInt::fromString("03  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 88  77 66 55 44 33 22 11 0d", 16).isOdd() == true );
}

TEST_CASE( "unsigned infinit big integer fromUFixBigInt", "[UABigint]" ) {
	REQUIRE( UArbBigInt::fromUFixBigInt(UFixBigInt<BIG_INT_BIT_TO_SIZE(8)>(0)) == UArbBigInt(0) );
	REQUIRE( UArbBigInt::fromUFixBigInt(UFixBigInt<BIG_INT_BIT_TO_SIZE(8)>(1)) == UArbBigInt(1) );
	REQUIRE( UArbBigInt::fromUFixBigInt(UFixBigInt<BIG_INT_BIT_TO_SIZE(8)>(127)) == UArbBigInt(127) );
	REQUIRE( UArbBigInt::fromUFixBigInt(UFixBigInt<BIG_INT_BIT_TO_SIZE(8)>(128)) == UArbBigInt(128) );
	REQUIRE( UArbBigInt::fromUFixBigInt(UFixBigInt<BIG_INT_BIT_TO_SIZE(8)>(255)) == UArbBigInt(255) );
	
	REQUIRE( UArbBigInt::fromUFixBigInt(UFixBigInt<BIG_INT_BIT_TO_SIZE(560)>::fromString("1 524 048 626 526 185 117 008 148 645 329 708 998 795 770 321 794 318 911 442 256 140 455 458 946 053 172 210 513 801 777 413  097 237 329 246 447 244 122 385 285 308 414 454 789 711 324 787 960 475 901 495 579 519 924 778 756", 10)) == UArbBigInt::fromString("1524048626526185117008148645329708998795770321794318911442256140455458946053172210513801777413097237329246447244122385285308414454789711324787960475901495579519924778756", 10) );
	
	REQUIRE( UArbBigInt::fromUFixBigInt( UFixBigInt<BIG_INT_BIT_TO_SIZE(1024)>::fromString("1 FF", 16)) == UArbBigInt::fromString("1 FF", 16) );

	//REQUIRE_THROWS( UArbBigInt::fromUFixBigInt(UFixBigInt<BIG_INT_BIT_TO_SIZE(128)>::fromString("1  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00", 16)) );
}
