#include "../include/catch2/catch.hpp"
#include "../src/math/BigInt.h"

using ppvr::math::BigInt;

TEST_CASE( "big integer to unsigned int 64 (BigInt from Word constructor)", "[bigint]" ) {
	REQUIRE( BigInt::ZERO.toUint64() == 0ull );
	REQUIRE( BigInt(0).toUint64() == 0ull );
	
	REQUIRE( BigInt::ONE.toUint64() == 1ull );
	REQUIRE( BigInt(1).toUint64() == 1ull );
	
	REQUIRE( BigInt::TWO.toUint64() == 2ull );
	REQUIRE( BigInt(2).toUint64() == 2ull );
	
	REQUIRE( BigInt::TEN.toUint64() == 10ull );
	REQUIRE( BigInt(10).toUint64() == 10ull );
	
	REQUIRE( BigInt(5).toUint64() == 5ull );
	REQUIRE( BigInt(55).toUint64() == 55ull );
	REQUIRE( BigInt(127).toUint64() == 127ull );
	REQUIRE( BigInt(255).toUint64() == 255ull );
}

TEST_CASE( "big integer to unsigned int 64 (BigInt fromUint64())", "[bigint]" ) {
	//uint64_t int_2e63_test = 0x8000000000000000; // 2^63 => bin: 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
	//uint64_t test_128 = int_2e63_test >> (8 * 7);
	//uint64_t test_0 = int_2e63_test >> (8 * 8);
	
	REQUIRE( BigInt::fromUint64(0xFF).toUint64() == 255ull );
	REQUIRE( BigInt::fromUint64(0x0100).toUint64() == 256ull );
	REQUIRE( BigInt::fromUint64(1234).toUint64() == 1234ull );
	
	uint64_t int_2e16_m1 = std::pow(2ull, 16) - 1ull;
	REQUIRE( BigInt::fromUint64(0xFFFF).toUint64() == int_2e16_m1 );
	
	uint64_t int_2e16 = std::pow(2ull, 16);
	REQUIRE( BigInt::fromUint64(0x010000).toUint64() == int_2e16 );
	
	uint64_t int_2e23 = std::pow(2ull, 23);
	REQUIRE( BigInt::fromUint64(0x800000).toUint64() == int_2e23 );
	
	uint64_t int_2e24_m1 = std::pow(2ull, 24) - 1ull;
	REQUIRE( BigInt::fromUint64(0xFFFFFF).toUint64() == int_2e24_m1 );
	
	uint64_t int_2e24 = std::pow(2ull, 24);
	REQUIRE( BigInt::fromUint64(0x01000000).toUint64() == int_2e24 );
	
	uint64_t int_2e24_p1 = std::pow(2ull, 24) + 1ull;
	REQUIRE( BigInt::fromUint64(0x01000001).toUint64() == int_2e24_p1 );
	
	uint64_t int_2e32_m1 = std::pow(2ull, 32) - 1ull;
	REQUIRE( BigInt::fromUint64(0xFFFFFFFF).toUint64() == int_2e32_m1 );
	
	uint64_t int_2e32 = std::pow(2ull, 32);
	REQUIRE( BigInt::fromUint64(0x0100000000).toUint64() == int_2e32 );
	
	uint64_t int_2e32_p1 = std::pow(2ull, 32) + 1ull;
	REQUIRE( BigInt::fromUint64(0x0100000001).toUint64() == int_2e32_p1 );
	
	uint64_t int_2e63_m1 = 0x7FFFFFFFFFFFFFFF; // 2^63 - 1
	REQUIRE( BigInt::fromUint64(0x7FFFFFFFFFFFFFFF).toUint64() == int_2e63_m1 );
	
	uint64_t int_2e63 = 0x8000000000000000; // 2^63
	REQUIRE( BigInt::fromUint64(0x8000000000000000).toUint64() == int_2e63 );
	
	uint64_t int_2e63_m1_mul2 = 0xFFFFFFFFFFFFFFFE; // (2^63 - 1) * 2
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFE).toUint64() == int_2e63_m1_mul2 );
	
	uint64_t int_2e63_m1_mul2_p1 = 0xFFFFFFFFFFFFFFFF; // (2^63 - 1) * 2 + 1
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFF).toUint64() == int_2e63_m1_mul2_p1 );
}

TEST_CASE( "big integer check word definitions for 64bit", "[bigint]" ) {
	if (typeid(BIG_INT_WORD_TYPE) == typeid(uint8_t)) {
		REQUIRE( sizeof(BIG_INT_WORD_TYPE) == 1 );
	
		REQUIRE( BIG_INT_WORD_LOW_BIT_MASK == 0x0Full );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_LOW_BIT_MASK) == BigInt::fromString("0F", 16) );
	
		REQUIRE( BIG_INT_WORD_HIGH_BIT_MASK == 0xF0ull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGH_BIT_MASK) == BigInt::fromString("F0", 16) );
	
		REQUIRE( BIG_INT_WORD_MAX_VALUE == 0xFFull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_MAX_VALUE) == BigInt::fromString("FF", 16) );
	
		REQUIRE( BIG_INT_BITS_PER_WORD == sizeof(BIG_INT_WORD_TYPE) * 8 );
		REQUIRE( BIG_INT_BITS_PER_WORD == 8 );
		REQUIRE( BigInt::fromUint64(BIG_INT_BITS_PER_WORD) == BigInt::fromString("8", 10) );
	
		REQUIRE( BIG_INT_WORD_HIGHEST_BIT == 0x80ull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == BigInt::fromString("10000000", 2) );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == BigInt::fromString("1", 2) << 7);
	} else if (typeid(BIG_INT_WORD_TYPE) == typeid(uint16_t)) {
		REQUIRE( sizeof(BIG_INT_WORD_TYPE) == 2 );
	
		REQUIRE( BIG_INT_WORD_LOW_BIT_MASK == 0x00FFull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_LOW_BIT_MASK) == BigInt::fromString("00 FF", 16) );
	
		REQUIRE( BIG_INT_WORD_HIGH_BIT_MASK == 0xFF00ull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGH_BIT_MASK) == BigInt::fromString("FF 00", 16) );
	
		REQUIRE( BIG_INT_WORD_MAX_VALUE == 0xFFFFull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_MAX_VALUE) == BigInt::fromString("FF FF", 16) );
	
		REQUIRE( BIG_INT_BITS_PER_WORD == sizeof(BIG_INT_WORD_TYPE) * 8 );
		REQUIRE( BIG_INT_BITS_PER_WORD == 16 );
		REQUIRE( BigInt::fromUint64(BIG_INT_BITS_PER_WORD) == BigInt::fromString("16", 10) );
	
		REQUIRE( BIG_INT_WORD_HIGHEST_BIT == 0x8000ull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == BigInt::fromString("10000000 00000000", 2) );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == BigInt::fromString("1", 2) << 15);
	} else if (typeid(BIG_INT_WORD_TYPE) == typeid(uint32_t)) {
		REQUIRE( sizeof(BIG_INT_WORD_TYPE) == 4 );
	
		REQUIRE( BIG_INT_WORD_LOW_BIT_MASK == 0x0000FFFFull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_LOW_BIT_MASK) == BigInt::fromString("00 00 FF FF ", 16) );
	
		REQUIRE( BIG_INT_WORD_HIGH_BIT_MASK == 0xFFFF0000ull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGH_BIT_MASK) == BigInt::fromString("FF FF 00 00", 16) );
	
		REQUIRE( BIG_INT_WORD_MAX_VALUE == 0xFFFFFFFF );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_MAX_VALUE) == BigInt::fromString("FF FF FF FF", 16) );
	
		REQUIRE( BIG_INT_BITS_PER_WORD == sizeof(BIG_INT_WORD_TYPE) * 8 );
		REQUIRE( BIG_INT_BITS_PER_WORD == 32 );
		REQUIRE( BigInt::fromUint64(BIG_INT_BITS_PER_WORD) == BigInt::fromString("32", 10) );
	
		REQUIRE( BIG_INT_WORD_HIGHEST_BIT == 0x80000000 );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == BigInt::fromString("10000000 00000000 00000000 00000000", 2) );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == BigInt::fromString("1", 2) << 31);
	} else if (typeid(BIG_INT_WORD_TYPE) == typeid(uint64_t)) {
		REQUIRE( sizeof(BIG_INT_WORD_TYPE) == 8 );
	
		REQUIRE( BIG_INT_WORD_LOW_BIT_MASK == 0x00000000FFFFFFFFull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_LOW_BIT_MASK) == BigInt::fromString("FF FF FF FF", 16) );
	
		REQUIRE( BIG_INT_WORD_HIGH_BIT_MASK == 0xFFFFFFFF00000000ull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGH_BIT_MASK) == BigInt::fromString("FF FF FF FF 00 00 00 00", 16) );
	
		REQUIRE( BIG_INT_WORD_MAX_VALUE == 0xFFFFFFFFFFFFFFFFull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_MAX_VALUE) == BigInt::fromString("FF FF FF FF FF FF FF FF", 16) );
	
		REQUIRE( BIG_INT_BITS_PER_WORD == sizeof(BIG_INT_WORD_TYPE) * 8 );
		REQUIRE( BIG_INT_BITS_PER_WORD == 64 );
		REQUIRE( BigInt::fromUint64(BIG_INT_BITS_PER_WORD) == BigInt::fromString("64", 10) );
	
		REQUIRE( BIG_INT_WORD_HIGHEST_BIT == 0x8000000000000000ull );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == BigInt::fromString("10000000 00000000 00000000 00000000  00000000 00000000 00000000 00000000", 2) );
		REQUIRE( BigInt::fromUint64(BIG_INT_WORD_HIGHEST_BIT) == BigInt::fromString("1", 2) << 63);
	} else {
		REQUIRE( "" == "unkunknowen type big int word type  BIG_INT_WORD_TYPE");
	}
}

TEST_CASE( "big integer to std:string hex", "[bigint]" ) {
	// --- single byte big int creation ---
	
	REQUIRE( BigInt(0).toStringHex() == std::string("0") );
	REQUIRE( BigInt(1).toStringHex() == std::string("1") );
	REQUIRE( BigInt(2).toStringHex() == std::string("2") );
	REQUIRE( BigInt(3).toStringHex() == std::string("3") );
	REQUIRE( BigInt(4).toStringHex() == std::string("4") );
	REQUIRE( BigInt(5).toStringHex() == std::string("5") );
	REQUIRE( BigInt(6).toStringHex() == std::string("6") );
	REQUIRE( BigInt(7).toStringHex() == std::string("7") );
	REQUIRE( BigInt(8).toStringHex() == std::string("8") );
	REQUIRE( BigInt(9).toStringHex() == std::string("9") );
	REQUIRE( BigInt(10).toStringHex() == std::string("A") );
	REQUIRE( BigInt(11).toStringHex() == std::string("B") );
	REQUIRE( BigInt(12).toStringHex() == std::string("C") );
	REQUIRE( BigInt(13).toStringHex() == std::string("D") );
	REQUIRE( BigInt(14).toStringHex() == std::string("E") );
	REQUIRE( BigInt(15).toStringHex() == std::string("F") );
	REQUIRE( BigInt(16).toStringHex() == std::string("10") );
	
	REQUIRE( BigInt(66).toStringHex() == std::string("42") );
	REQUIRE( BigInt(127).toStringHex() == std::string("7F") );
	REQUIRE( BigInt(128).toStringHex() == std::string("80") );
	REQUIRE( BigInt(255).toStringHex() == std::string("FF") );
	
	// --- use 64 bit conversion for big int creation ---
	
	REQUIRE( BigInt::fromUint64(256).toStringHex() == std::string("100") );
	
	REQUIRE( BigInt::fromUint64(0xFFFFFFFF).toStringHex() == std::string("FFFFFFFF") ); // 2^32 - 1
	REQUIRE( BigInt::fromUint64(0x0100000000).toStringHex() == std::string("100000000") ); // 2^32
	REQUIRE( BigInt::fromUint64(0x0100000001).toStringHex() == std::string("100000001") ); // 2^32 + 1
	
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFF).toStringHex() == std::string("FFFFFFFFFFFFFFFF") ); // 2^64 - 1
	REQUIRE( BigInt::fromUint64(0xFEDCBA9876543210).toStringHex() == std::string("FEDCBA9876543210") );
	REQUIRE( BigInt::fromUint64( 0xFEDCBA987654321).toStringHex() == std::string( "FEDCBA987654321") );
	REQUIRE( BigInt::fromUint64(  0xFEDCBA98765432).toStringHex() == std::string(  "FEDCBA98765432") );
	REQUIRE( BigInt::fromUint64(   0xFEDCBA9876543).toStringHex() == std::string(   "FEDCBA9876543") );
	REQUIRE( BigInt::fromUint64(    0xFEDCBA987654).toStringHex() == std::string(    "FEDCBA987654") );
	REQUIRE( BigInt::fromUint64(     0xFEDCBA98765).toStringHex() == std::string(     "FEDCBA98765") );
	REQUIRE( BigInt::fromUint64(      0xFEDCBA9876).toStringHex() == std::string(      "FEDCBA9876") );
	REQUIRE( BigInt::fromUint64(       0xFEDCBA987).toStringHex() == std::string(       "FEDCBA987") );
	REQUIRE( BigInt::fromUint64(        0xFEDCBA98).toStringHex() == std::string(        "FEDCBA98") );
	REQUIRE( BigInt::fromUint64(         0xFEDCBA9).toStringHex() == std::string(         "FEDCBA9") );
	REQUIRE( BigInt::fromUint64(          0xFEDCBA).toStringHex() == std::string(          "FEDCBA") );
	REQUIRE( BigInt::fromUint64(           0xFEDCB).toStringHex() == std::string(           "FEDCB") );
	REQUIRE( BigInt::fromUint64(            0xFEDC).toStringHex() == std::string(            "FEDC") );
	REQUIRE( BigInt::fromUint64(             0xFED).toStringHex() == std::string(             "FED") );
	REQUIRE( BigInt::fromUint64(              0xFE).toStringHex() == std::string(              "FE") );
	REQUIRE( BigInt::fromUint64(               0xF).toStringHex() == std::string(               "F") );
	REQUIRE( BigInt::fromUint64(               0x0).toStringHex() == std::string(               "0") );
	
	// 128 bit test!
	REQUIRE( BigInt::fromUint64(                    18446744073709551615ull).toStringHex()   == std::string(                 "FFFFFFFFFFFFFFFF") ); // 2^64 - 1
	REQUIRE((BigInt::fromUint64(                    18446744073709551615ull) + BigInt::ONE).toStringHex() == std::string(   "10000000000000000") ); // 2^64
	REQUIRE( BigInt::fromString(                   "18446744073709551615", 10).toStringHex() == std::string(                 "FFFFFFFFFFFFFFFF") ); // 2^64 - 1
	REQUIRE( BigInt::fromString(                   "18446744073709551616", 10).toStringHex() == std::string(                "10000000000000000") ); // 2^64
	REQUIRE( BigInt::fromString(                 "4722366482869645213696", 10).toStringHex() == std::string(              "1000000000000000000") ); // 2^72
	REQUIRE( BigInt::fromString(              "1208925819614629174706176", 10).toStringHex() == std::string(            "100000000000000000000") ); // 2^80
	REQUIRE( BigInt::fromString(            "309485009821345068724781056", 10).toStringHex() == std::string(          "10000000000000000000000") ); // 2^88
	REQUIRE( BigInt::fromString(          "79228162514264337593543950336", 10).toStringHex() == std::string(        "1000000000000000000000000") ); // 2^96
	REQUIRE( BigInt::fromString(       "20282409603651670423947251286016", 10).toStringHex() == std::string(      "100000000000000000000000000") ); // 2^104
	REQUIRE( BigInt::fromString(     "5192296858534827628530496329220096", 10).toStringHex() == std::string(    "10000000000000000000000000000") ); // 2^112
	REQUIRE( BigInt::fromString(  "1329227995784915872903807060280344576", 10).toStringHex() == std::string(  "1000000000000000000000000000000") ); // 2^120
	REQUIRE( BigInt::fromString(  "1329227995784915872903807060280344577", 10).toStringHex() == std::string(  "1000000000000000000000000000001") ); // 2^120 + 1
	REQUIRE( BigInt::fromString(  "1329227995784915872903807060280344591", 10).toStringHex() == std::string(  "100000000000000000000000000000F") ); // 2^120 + 15
	REQUIRE( BigInt::fromString("340282366920938463463374607431768211456", 10).toStringHex() == std::string("100000000000000000000000000000000") ); // 2^128
	REQUIRE( BigInt::fromString("340282366920938463463374607431768211457", 10).toStringHex() == std::string("100000000000000000000000000000001") ); // 2^128 + 1
	REQUIRE( BigInt::fromString("340282366920938463463374607431768211471", 10).toStringHex() == std::string("10000000000000000000000000000000F") ); // 2^128 + 15
	
	
	REQUIRE( BigInt::fromUint64(0x121fa00ad77d7422ull).toStringHex() 					== std::string( "121FA00AD77D7422") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422", 16).toStringHex() 					== std::string( "121FA00AD77D7422") );
	REQUIRE( BigInt::fromString( "121fa00ad77d74222", 16).toStringHex() 				== std::string( "121FA00AD77D74222") );
	REQUIRE( BigInt::fromString( "121fa00ad77d742223", 16).toStringHex() 				== std::string( "121FA00AD77D742223") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236", 16).toStringHex() 				== std::string( "121FA00AD77D7422236") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d", 16).toStringHex() 				== std::string( "121FA00AD77D7422236D") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d8", 16).toStringHex() 			== std::string( "121FA00AD77D7422236D8") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88", 16).toStringHex() 			== std::string( "121FA00AD77D7422236D88") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88f", 16).toStringHex() 			== std::string( "121FA00AD77D7422236D88F") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe", 16).toStringHex() 			== std::string( "121FA00AD77D7422236D88FE") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5", 16).toStringHex() 		== std::string( "121FA00AD77D7422236D88FE5") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe56", 16).toStringHex() 		== std::string( "121FA00AD77D7422236D88FE56") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe561", 16).toStringHex() 		== std::string( "121FA00AD77D7422236D88FE561") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618", 16).toStringHex() 		== std::string( "121FA00AD77D7422236D88FE5618") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618c", 16).toStringHex() 	== std::string( "121FA00AD77D7422236D88FE5618C") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618cf", 16).toStringHex() 	== std::string( "121FA00AD77D7422236D88FE5618CF") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618cf0", 16).toStringHex() 	== std::string( "121FA00AD77D7422236D88FE5618CF0") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618cf00", 16).toStringHex() 	== std::string( "121FA00AD77D7422236D88FE5618CF00") );
	
	REQUIRE( BigInt::fromUint64(                     1305938385386173474ull).toStringHex()   == std::string( "121FA00AD77D7422") );
	REQUIRE( BigInt::fromString(                    "1305938385386173474", 10).toStringHex() == std::string( "121FA00AD77D7422") );
	REQUIRE( BigInt::fromString(                   "20895014166178775586", 10).toStringHex() == std::string( "121FA00AD77D74222") );
	REQUIRE( BigInt::fromString(                  "334320226658860409379", 10).toStringHex() == std::string( "121FA00AD77D742223") );
	REQUIRE( BigInt::fromString(                 "5349123626541766550070", 10).toStringHex() == std::string( "121FA00AD77D7422236") );
	REQUIRE( BigInt::fromString(                "85585978024668264801133", 10).toStringHex() == std::string( "121FA00AD77D7422236D") );
	REQUIRE( BigInt::fromString(              "1369375648394692236818136", 10).toStringHex() == std::string( "121FA00AD77D7422236D8") );
	REQUIRE( BigInt::fromString(             "21910010374315075789090184", 10).toStringHex() == std::string( "121FA00AD77D7422236D88") );
	REQUIRE( BigInt::fromString(            "350560165989041212625442959", 10).toStringHex() == std::string( "121FA00AD77D7422236D88F") );
	REQUIRE( BigInt::fromString(           "5608962655824659402007087358", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE") );
	REQUIRE( BigInt::fromString(          "89743402493194550432113397733", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5") );
	REQUIRE( BigInt::fromString(        "1435894439891112806913814363734", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE56") );
	REQUIRE( BigInt::fromString(       "22974311038257804910621029819745", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE561") );
	REQUIRE( BigInt::fromString(      "367588976612124878569936477115928", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618") );
	REQUIRE( BigInt::fromString(     "5881423625793998057118983633854860", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618C") );
	REQUIRE( BigInt::fromString(    "94102778012703968913903738141677775", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618CF") );
	REQUIRE( BigInt::fromString(  "1505644448203263502622459810266844400", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618CF0") );
	REQUIRE( BigInt::fromString( "24090311171252216041959356964269510400", 10).toStringHex() == std::string( "121FA00AD77D7422236D88FE5618CF00") );
	
	// --------
	REQUIRE( BigInt::fromString("1e02bc1e8aa1d63b5b9ccf516f9d67d27b3c80b500001cbe991a08", 16).toStringHex()            == std::string("1E02BC1E8AA1D63B5B9CCF516F9D67D27B3C80B500001CBE991A08") );
	REQUIRE( BigInt::fromString("12345678900000000000000000000000000000000000000000000123456789000", 10).toStringHex() == std::string("1E02BC1E8AA1D63B5B9CCF516F9D67D27B3C80B500001CBE991A08") );
	
	REQUIRE( BigInt::fromString("123456789ABCDEF00000000000000000000000000000000000000000000123456789ABCDEF000", 16).toStringHex()                == std::string("123456789ABCDEF00000000000000000000000000000000000000000000123456789ABCDEF000") ); // 39 Bytes => 312 bit
	REQUIRE( BigInt::fromString("37083108262515799557102920138478281554203075264980329467169710128521593951634998575520215040", 10).toStringHex() == std::string("123456789ABCDEF00000000000000000000000000000000000000000000123456789ABCDEF000") );
}

TEST_CASE( "big integer to std:string dec", "[bigint]" ) {
	// --- single byte big int creation ---

	REQUIRE( BigInt(0).toStringDec() == std::string("0") );
	REQUIRE( BigInt(1).toStringDec() == std::string("1") );
	REQUIRE( BigInt(2).toStringDec() == std::string("2") );
	REQUIRE( BigInt(3).toStringDec() == std::string("3") );
	REQUIRE( BigInt(4).toStringDec() == std::string("4") );
	REQUIRE( BigInt(5).toStringDec() == std::string("5") );
	REQUIRE( BigInt(6).toStringDec() == std::string("6") );
	REQUIRE( BigInt(7).toStringDec() == std::string("7") );
	REQUIRE( BigInt(8).toStringDec() == std::string("8") );
	REQUIRE( BigInt(9).toStringDec() == std::string("9") );
	REQUIRE( BigInt(10).toStringDec() == std::string("10") );

	REQUIRE( BigInt(0x42).toStringDec() == std::string("66") );
	REQUIRE( BigInt(0x7F).toStringDec() == std::string("127") );
	REQUIRE( BigInt(0x80).toStringDec() == std::string("128") );
	REQUIRE( BigInt(0xFF).toStringDec() == std::string("255") );
	
	// --- use 64 bit conversion for big int creation ---
	
	REQUIRE( BigInt::fromUint64(256).toStringDec() == std::string("256") );
	
	REQUIRE( BigInt::fromUint64(0xFFFFFFFF).toStringDec() == std::string("4294967295") ); // 2^32 - 1
	REQUIRE( BigInt::fromUint64(0x0100000000).toStringDec() == std::string("4294967296") ); // 2^32
	REQUIRE( BigInt::fromUint64(0x0100000001).toStringDec() == std::string("4294967297") ); // 2^32 + 1
	
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFF).toStringDec() == std::string("18446744073709551615") ); // 2^64 - 1
	
	// 128 bit test!
	REQUIRE( BigInt::fromUint64(                0xFFFFFFFFFFFFFFFF).toStringDec()      == std::string(                   "18446744073709551615") ); // 2^64 - 1
	REQUIRE( (BigInt::fromUint64(               0xFFFFFFFFFFFFFFFF) + BigInt::ONE).toStringDec() == std::string(         "18446744073709551616") ); // 2^64
	REQUIRE( BigInt::fromString(                 "FFFFFFFFFFFFFFFF", 16).toStringDec() == std::string(                   "18446744073709551615") ); // 2^64 - 1
	REQUIRE( BigInt::fromString(                "10000000000000000", 16).toStringDec() == std::string(                   "18446744073709551616") ); // 2^64
	REQUIRE( BigInt::fromString(              "1000000000000000000", 16).toStringDec() == std::string(                 "4722366482869645213696") ); // 2^72
	REQUIRE( BigInt::fromString(            "100000000000000000000", 16).toStringDec() == std::string(              "1208925819614629174706176") ); // 2^80
	REQUIRE( BigInt::fromString(          "10000000000000000000000", 16).toStringDec() == std::string(            "309485009821345068724781056") ); // 2^88
	REQUIRE( BigInt::fromString(        "1000000000000000000000000", 16).toStringDec() == std::string(          "79228162514264337593543950336") ); // 2^96
	REQUIRE( BigInt::fromString(      "100000000000000000000000000", 16).toStringDec() == std::string(       "20282409603651670423947251286016") ); // 2^104
	REQUIRE( BigInt::fromString(    "10000000000000000000000000000", 16).toStringDec() == std::string(     "5192296858534827628530496329220096") ); // 2^112
	REQUIRE( BigInt::fromString(  "1000000000000000000000000000000", 16).toStringDec() == std::string(  "1329227995784915872903807060280344576") ); // 2^120
	REQUIRE( BigInt::fromString(  "1000000000000000000000000000001", 16).toStringDec() == std::string(  "1329227995784915872903807060280344577") ); // 2^120 + 1
	REQUIRE( BigInt::fromString(  "100000000000000000000000000000F", 16).toStringDec() == std::string(  "1329227995784915872903807060280344591") ); // 2^120 + 15
	REQUIRE( BigInt::fromString("100000000000000000000000000000000", 16).toStringDec() == std::string("340282366920938463463374607431768211456") ); // 2^128
	REQUIRE( BigInt::fromString("100000000000000000000000000000001", 16).toStringDec() == std::string("340282366920938463463374607431768211457") ); // 2^128 + 1
	REQUIRE( BigInt::fromString("10000000000000000000000000000000F", 16).toStringDec() == std::string("340282366920938463463374607431768211471") ); // 2^128 + 15
	
	//REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618cf", 16).toStringDec() == std::string( "94102778012703968913903738141677775") );
	//REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618cf00", 16).toStringDec() == std::string( "24090311171252216041959356964269510400") );

	//REQUIRE( BigInt::fromString( "94102778012703968913903738141677775", 10).toStringDec() == std::string( "94102778012703968913903738141677775") );
	//REQUIRE( BigInt::fromString( "24090311171252216041959356964269510400", 10).toStringDec() == std::string( "24090311171252216041959356964269510400") );
	
	// --------
	REQUIRE( BigInt::fromUint64(0x121fa00ad77d7422ull).toStringDec()                         == std::string(                    "1305938385386173474") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422", 16).toStringDec()                       == std::string(                    "1305938385386173474") );
	REQUIRE( BigInt::fromString( "121fa00ad77d74222", 16).toStringDec()                      == std::string(                   "20895014166178775586") );
	REQUIRE( BigInt::fromString( "121fa00ad77d742223", 16).toStringDec()                     == std::string(                  "334320226658860409379") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236", 16).toStringDec()                    == std::string(                 "5349123626541766550070") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d", 16).toStringDec()                   == std::string(                "85585978024668264801133") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d8", 16).toStringDec()                  == std::string(              "1369375648394692236818136") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88", 16).toStringDec()                 == std::string(             "21910010374315075789090184") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88f", 16).toStringDec()                == std::string(            "350560165989041212625442959") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe", 16).toStringDec()               == std::string(           "5608962655824659402007087358") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5", 16).toStringDec()              == std::string(          "89743402493194550432113397733") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe56", 16).toStringDec()             == std::string(        "1435894439891112806913814363734") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe561", 16).toStringDec()            == std::string(       "22974311038257804910621029819745") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618", 16).toStringDec()           == std::string(      "367588976612124878569936477115928") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618c", 16).toStringDec()          == std::string(     "5881423625793998057118983633854860") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618cf", 16).toStringDec()         == std::string(    "94102778012703968913903738141677775") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618cf0", 16).toStringDec()        == std::string(  "1505644448203263502622459810266844400") );
	REQUIRE( BigInt::fromString( "121fa00ad77d7422236d88fe5618cf00", 16).toStringDec()       == std::string( "24090311171252216041959356964269510400") );
	
	REQUIRE( BigInt::fromUint64(                     1305938385386173474ull  ).toStringDec() == std::string(                    "1305938385386173474") );
	REQUIRE( BigInt::fromString(                    "1305938385386173474", 10).toStringDec() == std::string(                    "1305938385386173474") );
	REQUIRE( BigInt::fromString(                   "20895014166178775586", 10).toStringDec() == std::string(                   "20895014166178775586") );
	REQUIRE( BigInt::fromString(                  "334320226658860409379", 10).toStringDec() == std::string(                  "334320226658860409379") );
	REQUIRE( BigInt::fromString(                 "5349123626541766550070", 10).toStringDec() == std::string(                 "5349123626541766550070") );
	REQUIRE( BigInt::fromString(                "85585978024668264801133", 10).toStringDec() == std::string(                "85585978024668264801133") );
	REQUIRE( BigInt::fromString(              "1369375648394692236818136", 10).toStringDec() == std::string(              "1369375648394692236818136") );
	REQUIRE( BigInt::fromString(             "21910010374315075789090184", 10).toStringDec() == std::string(             "21910010374315075789090184") );
	REQUIRE( BigInt::fromString(            "350560165989041212625442959", 10).toStringDec() == std::string(            "350560165989041212625442959") );
	REQUIRE( BigInt::fromString(           "5608962655824659402007087358", 10).toStringDec() == std::string(           "5608962655824659402007087358") );
	REQUIRE( BigInt::fromString(          "89743402493194550432113397733", 10).toStringDec() == std::string(          "89743402493194550432113397733") );
	REQUIRE( BigInt::fromString(        "1435894439891112806913814363734", 10).toStringDec() == std::string(        "1435894439891112806913814363734") );
	REQUIRE( BigInt::fromString(       "22974311038257804910621029819745", 10).toStringDec() == std::string(       "22974311038257804910621029819745") );
	REQUIRE( BigInt::fromString(      "367588976612124878569936477115928", 10).toStringDec() == std::string(      "367588976612124878569936477115928") );
	REQUIRE( BigInt::fromString(     "5881423625793998057118983633854860", 10).toStringDec() == std::string(     "5881423625793998057118983633854860") );
	REQUIRE( BigInt::fromString(    "94102778012703968913903738141677775", 10).toStringDec() == std::string(    "94102778012703968913903738141677775") );
	REQUIRE( BigInt::fromString(  "1505644448203263502622459810266844400", 10).toStringDec() == std::string(  "1505644448203263502622459810266844400") );
	REQUIRE( BigInt::fromString( "24090311171252216041959356964269510400", 10).toStringDec() == std::string( "24090311171252216041959356964269510400") );
	
	// --------
	REQUIRE( BigInt::fromString("1e02bc1e8aa1d63b5b9ccf516f9d67d27b3c80b500001cbe991a08", 16).toStringDec()            == std::string("12345678900000000000000000000000000000000000000000000123456789000") );
	REQUIRE( BigInt::fromString("12345678900000000000000000000000000000000000000000000123456789000", 10).toStringDec() == std::string("12345678900000000000000000000000000000000000000000000123456789000") );
	
	REQUIRE( BigInt::fromString("123456789ABCDEF00000000000000000000000000000000000000000000123456789ABCDEF000", 16).toStringDec()                == std::string("37083108262515799557102920138478281554203075264980329467169710128521593951634998575520215040") ); // 39 Bytes => 312 bit
	REQUIRE( BigInt::fromString("37083108262515799557102920138478281554203075264980329467169710128521593951634998575520215040", 10).toStringDec() == std::string("37083108262515799557102920138478281554203075264980329467169710128521593951634998575520215040") );
}

TEST_CASE( "big integer from std:string", "[bigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( BigInt::fromString( "0", 10).toUint64() 	==   0 );
	REQUIRE( BigInt::fromString( "1", 10).toUint64() 	==   1 );
	REQUIRE( BigInt::fromString( "2", 10).toUint64() 	==   2 );
	REQUIRE( BigInt::fromString( "3", 10).toUint64() 	==   3 );
	REQUIRE( BigInt::fromString( "4", 10).toUint64() 	==   4 );
	REQUIRE( BigInt::fromString( "5", 10).toUint64() 	==   5 );
	REQUIRE( BigInt::fromString( "6", 10).toUint64() 	==   6 );
	REQUIRE( BigInt::fromString( "7", 10).toUint64() 	==   7 );
	REQUIRE( BigInt::fromString( "8", 10).toUint64() 	==   8 );
	REQUIRE( BigInt::fromString( "9", 10).toUint64() 	==   9 );
	REQUIRE( BigInt::fromString("10", 10).toUint64() 	==  10 );
	REQUIRE( BigInt::fromString("77", 10).toUint64() 	==  77 );
	REQUIRE( BigInt::fromString("127", 10).toUint64() 	== 127 );
	REQUIRE( BigInt::fromString("128", 10).toUint64() 	== 128 );
	REQUIRE( BigInt::fromString("255", 10).toUint64() 	== 255 );
	
	
	REQUIRE( BigInt::fromString("0", 16).toUint64() 	==  0 );
	REQUIRE( BigInt::fromString("1", 16).toUint64() 	==  1 );
	REQUIRE( BigInt::fromString("2", 16).toUint64() 	==  2 );
	REQUIRE( BigInt::fromString("3", 16).toUint64() 	==  3 );
	REQUIRE( BigInt::fromString("4", 16).toUint64() 	==  4 );
	REQUIRE( BigInt::fromString("5", 16).toUint64() 	==  5 );
	REQUIRE( BigInt::fromString("6", 16).toUint64() 	==  6 );
	REQUIRE( BigInt::fromString("7", 16).toUint64() 	==  7 );
	REQUIRE( BigInt::fromString("8", 16).toUint64() 	==  8 );
	REQUIRE( BigInt::fromString("9", 16).toUint64() 	==  9 );
	
	REQUIRE( BigInt::fromString("a", 16).toUint64() 	== 10 );
	REQUIRE( BigInt::fromString("b", 16).toUint64() 	== 11 );
	REQUIRE( BigInt::fromString("c", 16).toUint64() 	== 12 );
	REQUIRE( BigInt::fromString("d", 16).toUint64() 	== 13 );
	REQUIRE( BigInt::fromString("e", 16).toUint64() 	== 14 );
	REQUIRE( BigInt::fromString("f", 16).toUint64() 	== 15 );
	
	REQUIRE( BigInt::fromString("A", 16).toUint64() 	== 10 );
	REQUIRE( BigInt::fromString("B", 16).toUint64() 	== 11 );
	REQUIRE( BigInt::fromString("C", 16).toUint64() 	== 12 );
	REQUIRE( BigInt::fromString("D", 16).toUint64() 	== 13 );
	REQUIRE( BigInt::fromString("E", 16).toUint64() 	== 14 );
	REQUIRE( BigInt::fromString("F", 16).toUint64() 	== 15 );
	
	REQUIRE( BigInt::fromString("7F", 16).toUint64()	== 127 );
	REQUIRE( BigInt::fromString("80", 16).toUint64()	== 128 );
	REQUIRE( BigInt::fromString("FF", 16).toUint64()	== 255 );
	
	// leading zeros
	REQUIRE( BigInt::fromString(  "01", 10).toUint64() 	==   1 );
	REQUIRE( BigInt::fromString( "001", 10).toUint64() 	==   1 );
	REQUIRE( BigInt::fromString("0256", 10).toUint64() 	==   256 );
	
	REQUIRE( BigInt::fromString(  "00", 16).toUint64() 	==   0 );
	REQUIRE( BigInt::fromString(  "01", 16).toUint64() 	==   1 );
	REQUIRE( BigInt::fromString(  "0f", 16).toUint64() 	==   15 );
	REQUIRE( BigInt::fromString("000A", 16).toUint64() 	==   10 );
	REQUIRE( BigInt::fromString("00ff", 16).toUint64() 	==   255 );
	
	// 2 Bytes (16 bit)
	REQUIRE( BigInt::fromString("256", 10).toUint64() == 256 ); // 2^16
	REQUIRE( BigInt::fromString("0100", 16).toUint64() == 256 );
	
	// 4 Bytes (32 bit)
	REQUIRE( BigInt::fromString("4294967295", 10).toUint64() == 0xFFFFFFFFull ); // 2^32 - 1
	REQUIRE( BigInt::fromString("FFFFFFFF", 16).toUint64() == 0xFFFFFFFFull );
	REQUIRE( BigInt::fromString("01234567", 16).toUint64() == 0x01234567ull );
	
	// 8 Bytes (64 bit)
	REQUIRE( BigInt::fromString("4294967296", 10).toUint64() == 0x0100000000ull ); // 2^32
	REQUIRE( BigInt::fromString("0100000000", 16).toUint64() == 0x0100000000ull );
	REQUIRE( BigInt::fromString("4294967297", 10).toUint64() == 0x0100000001ull ); // 2^32 + 1
	REQUIRE( BigInt::fromString("0100000001", 16).toUint64() == 0x0100000001ull );
	REQUIRE( BigInt::fromString("0123456789ABCDEF", 16).toUint64() == 0x0123456789ABCDEFull );
	REQUIRE( BigInt::fromString("fedcba9876543210", 16).toUint64() == 0xFEDCBA9876543210ull );
	
	
	REQUIRE( BigInt::fromString("18446744073709551615", 10).toUint64() 	== 0xFFFFFFFFFFFFFFFFull ); // 2^64 - 1
	REQUIRE( BigInt::fromString("FFFFFFFFFFFFFFFF", 16).toUint64() 		== 0xFFFFFFFFFFFFFFFFull );
	
	// --- use 65 bit conversion for big int reference creation ---
	// this uses also the BIG int == operator, therefore a failed test could als be a problem of the == operator implementation
	REQUIRE( BigInt::fromString("18446744073709551616", 10) == (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE) ); // 2^64
	REQUIRE( BigInt::fromString("010000000000000000", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE) ); // 2^64
	REQUIRE( BigInt::fromString("010000000000000001", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x01)) );
	REQUIRE( BigInt::fromString("010000000000000002", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x02)) );
	REQUIRE( BigInt::fromString("010000000000000003", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x03)) );
	REQUIRE( BigInt::fromString("010000000000000004", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x04)) );
	REQUIRE( BigInt::fromString("010000000000000005", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x05)) );
	REQUIRE( BigInt::fromString("010000000000000006", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x06)) );
	REQUIRE( BigInt::fromString("010000000000000007", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x07)) );
	REQUIRE( BigInt::fromString("010000000000000008", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x08)) );
	REQUIRE( BigInt::fromString("010000000000000009", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x09)) );
	REQUIRE( BigInt::fromString("01000000000000000A", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x0A)) );
	REQUIRE( BigInt::fromString("01000000000000000B", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x0B)) );
	REQUIRE( BigInt::fromString("01000000000000000C", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x0C)) );
	REQUIRE( BigInt::fromString("01000000000000000D", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x0D)) );
	REQUIRE( BigInt::fromString("01000000000000000E", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x0E)) );
	REQUIRE( BigInt::fromString("01000000000000000F", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0x0F)) );
	REQUIRE( BigInt::fromString("0100000000000000Fe", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0xFE)) );
	REQUIRE( BigInt::fromString("0100000000000000Ff", 16) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE + BigInt(0xFF)) );
	
	
	// ---- ignore blank
	REQUIRE( BigInt::fromString("01 F3 86 9C 69 BB 1C 01", 16) 	== BigInt::fromUint64(0x01F3869C69BB1C01ull) );
	REQUIRE( BigInt::fromString("140 604 019 725 507 585", 10) 	== BigInt::fromUint64(0x01F3869C69BB1C01ull) );
	REQUIRE( BigInt::fromString("123 456 789 000 000 321", 10) 	== BigInt::fromUint64(123456789000000321ull) );
}

TEST_CASE( "big integer comparisons", "[bigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( BigInt(1) != BigInt::ZERO );
	REQUIRE( BigInt(0) != BigInt::ONE );
	
	REQUIRE( BigInt(0) == BigInt::ZERO );
	REQUIRE( BigInt(0) <= BigInt::ZERO );
	REQUIRE( BigInt(0) >= BigInt::ZERO );
	
	REQUIRE( BigInt(0) < BigInt::ONE );
	REQUIRE( BigInt(1) > BigInt::ZERO );
	
	REQUIRE( BigInt(10) >  BigInt(9) );
	REQUIRE( BigInt(10) >= BigInt(9) );
	REQUIRE( BigInt(9) 	<  BigInt::TEN );
	REQUIRE( BigInt(9) 	<= BigInt::TEN );
	REQUIRE( BigInt(10) <= BigInt::TEN );
	REQUIRE( BigInt(10) >= BigInt::TEN );
	
	REQUIRE( BigInt(255) == BigInt::fromUint64(0xFF) );
	REQUIRE( BigInt(255) <= BigInt::fromUint64(0xFF) );
	REQUIRE( BigInt(255) >= BigInt::fromUint64(0xFF) );
	
	REQUIRE( BigInt(0) 		<  BigInt(255) );
	REQUIRE( BigInt(0) 		<= BigInt(255) );
	REQUIRE( BigInt(255) 	>  BigInt(0) );
	REQUIRE( BigInt(255) 	>= BigInt(0) );
	
	REQUIRE( BigInt(1) 		<  BigInt(255) );
	REQUIRE( BigInt(1) 		<= BigInt(255) );
	REQUIRE( BigInt(255) 	>  BigInt(1) );
	REQUIRE( BigInt(255) 	>= BigInt(1) );
	
	REQUIRE( BigInt(245) 	<  BigInt(255) );
	REQUIRE( BigInt(245) 	<= BigInt(255) );
	REQUIRE( BigInt(255) 	>  BigInt(245) );
	REQUIRE( BigInt(255) 	>= BigInt(245) );
	
	// 2 Bytes (16 bit)
	REQUIRE( BigInt(255) 				<  BigInt::fromUint64(0x0100) );
	REQUIRE( BigInt(255) 				<= BigInt::fromUint64(0x0100) );
	REQUIRE( BigInt::fromUint64(0x0100) >  BigInt(255) );
	REQUIRE( BigInt::fromUint64(0x0100) >= BigInt(255) );
	
	REQUIRE( BigInt::fromUint64(0x0100) == BigInt::fromUint64(0x0100) );
	REQUIRE( BigInt::fromUint64(0x0100) <= BigInt::fromUint64(0x0100) );
	REQUIRE( BigInt::fromUint64(0x0100) >= BigInt::fromUint64(0x0100) );
	
	REQUIRE( BigInt::fromUint64(0x0101) >  BigInt::fromUint64(0x0100) );
	REQUIRE( BigInt::fromUint64(0x0101) >= BigInt::fromUint64(0x0100) );
	REQUIRE( BigInt::fromUint64(0x0101) <  BigInt::fromUint64(0x0102) );
	REQUIRE( BigInt::fromUint64(0x0101) <= BigInt::fromUint64(0x0102) );
	
	// 8 Bytes (64bit)
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFE) != BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( BigInt::fromUint64(0xEFFFFFFFFFFFFFFF) != BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) == BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) <= BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) >= BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFE) <  BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) >  BigInt::fromUint64(0xFFFFFFFFFFFFFFFE) );
	
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFF00) >  BigInt(1) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFF00) >= BigInt::ONE );
	REQUIRE( BigInt::ONE 							<  BigInt::fromUint64(0xFFFFFFFFFFFFFF00) );
	REQUIRE( BigInt(1) 								<= BigInt::fromUint64(0xFFFFFFFFFFFFFF00) );
	
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFF01) != BigInt::fromUint64(0x01) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFF01) >  BigInt::fromUint64(0x01) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFF01) >= BigInt::fromUint64(0x01) );
	REQUIRE( BigInt::fromUint64(0x01) 				<  BigInt::fromUint64(0xFFFFFFFFFFFFFF01) );
	REQUIRE( BigInt::fromUint64(0x01) 				<= BigInt::fromUint64(0xFFFFFFFFFFFFFF01) );
	
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFF01) != BigInt::fromUint64(0xFF01) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFF01) >  BigInt::fromUint64(0xFF01) );
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFF01) >= BigInt::fromUint64(0xFF01) );
	REQUIRE( BigInt::fromUint64(0xFF01) 			<  BigInt::fromUint64(0xFFFFFFFFFFFFFF01) );
	REQUIRE( BigInt::fromUint64(0xFF01) 			<= BigInt::fromUint64(0xFFFFFFFFFFFFFF01) );
	
	//REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFF01) != BigInt::fromUint64(0xFFFFFFFFFFFFFF01) );
	
	// 9 Bytes (65bit)
	REQUIRE(  BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 					!= (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(1)) );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt::ONE) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(1)) );
	REQUIRE(  BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 					<  (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(1)) );
	REQUIRE(  BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 					<= (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(1)) );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(1)) 		>   BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(1)) 		>=  BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) );
	
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt::TEN) 	!= (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(11)) );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt::TEN) 	== (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(10)) );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt::TEN)		<  (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(11)) );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt::TEN)		<= (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(11)) );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(11)) 		>  (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(10)) );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(11)) 		>= (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(10)) );
	
	//REQUIRE( (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(11)) 		!=  (BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt(11)) );
}

TEST_CASE( "big integer shift left", "[bigint]" ) {
	/*
	// 1 Byte (8bit)
	REQUIRE( BigInt::fromString("1", 2) <<  0 == BigInt::fromString("1", 2) );
	REQUIRE( BigInt::fromString("1", 2) <<  1 == BigInt::fromString("10", 2) );
	REQUIRE( BigInt::fromString("1", 2) <<  2 == BigInt::fromString("100", 2) );
	REQUIRE( BigInt::fromString("1", 2) <<  3 == BigInt::fromString("1000", 2) );
	REQUIRE( BigInt::fromString("1", 2) <<  4 == BigInt::fromString("10000", 2) );
	REQUIRE( BigInt::fromString("1", 2) <<  5 == BigInt::fromString("100000", 2) );
	REQUIRE( BigInt::fromString("1", 2) <<  6 == BigInt::fromString("1000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) <<  7 == BigInt::fromString("10000000", 2) );
	
	// 2 Byte (16bit)
	REQUIRE( BigInt::fromString("1", 2) <<  8 == BigInt::fromString("10000000 0", 2) );
	REQUIRE( BigInt::fromString("1", 2) <<  9 == BigInt::fromString("10000000 00", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 10 == BigInt::fromString("10000000 000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 11 == BigInt::fromString("10000000 0000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 12 == BigInt::fromString("10000000 00000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 13 == BigInt::fromString("10000000 000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 14 == BigInt::fromString("10000000 0000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 15 == BigInt::fromString("10000000 00000000", 2) );
	*/
	REQUIRE( BigInt::fromString("10000000", 2) <<  0 == BigInt::fromString("10000000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) <<  1 == BigInt::fromString("10000000 0", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) <<  2 == BigInt::fromString("10000000 00", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) <<  3 == BigInt::fromString("10000000 000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) <<  4 == BigInt::fromString("10000000 0000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) <<  5 == BigInt::fromString("10000000 00000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) <<  6 == BigInt::fromString("10000000 000000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) <<  7 == BigInt::fromString("10000000 0000000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) <<  8 == BigInt::fromString("10000000 00000000", 2) );
	
	// 3 Byte (24bit)
	REQUIRE( BigInt::fromString("1", 2) << 16 == BigInt::fromString("10000000 00000000 0", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 17 == BigInt::fromString("10000000 00000000 00", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 18 == BigInt::fromString("10000000 00000000 000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 19 == BigInt::fromString("10000000 00000000 0000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 20 == BigInt::fromString("10000000 00000000 00000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 21 == BigInt::fromString("10000000 00000000 000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 22 == BigInt::fromString("10000000 00000000 0000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 23 == BigInt::fromString("10000000 00000000 00000000", 2) );
	
	REQUIRE( BigInt::fromString("10000000 00000000", 2) <<  0 == BigInt::fromString("10000000 00000000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000", 2) <<  1 == BigInt::fromString("10000000 00000000 0", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000", 2) <<  2 == BigInt::fromString("10000000 00000000 00", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000", 2) <<  3 == BigInt::fromString("10000000 00000000 000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000", 2) <<  4 == BigInt::fromString("10000000 00000000 0000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000", 2) <<  5 == BigInt::fromString("10000000 00000000 00000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000", 2) <<  6 == BigInt::fromString("10000000 00000000 000000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000", 2) <<  7 == BigInt::fromString("10000000 00000000 0000000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000", 2) <<  8 == BigInt::fromString("10000000 00000000 00000000", 2) );
	
	// 4 Byte (32bit)
	REQUIRE( BigInt::fromString("1", 2) << 24 == BigInt::fromString("10000000 00000000 00000000 0", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 25 == BigInt::fromString("10000000 00000000 00000000 00", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 26 == BigInt::fromString("10000000 00000000 00000000 000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 27 == BigInt::fromString("10000000 00000000 00000000 0000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 28 == BigInt::fromString("10000000 00000000 00000000 00000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 29 == BigInt::fromString("10000000 00000000 00000000 000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 30 == BigInt::fromString("10000000 00000000 00000000 0000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 31 == BigInt::fromString("10000000 00000000 00000000 00000000", 2) );
	
	REQUIRE( BigInt::fromString("10000000 00000000 00000000", 2) <<  0 == BigInt::fromString("10000000 00000000 00000000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 00000000", 2) <<  1 == BigInt::fromString("10000000 00000000 00000000 0", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 00000000", 2) <<  2 == BigInt::fromString("10000000 00000000 00000000 00", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 00000000", 2) <<  3 == BigInt::fromString("10000000 00000000 00000000 000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 00000000", 2) <<  4 == BigInt::fromString("10000000 00000000 00000000 0000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 00000000", 2) <<  5 == BigInt::fromString("10000000 00000000 00000000 00000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 00000000", 2) <<  6 == BigInt::fromString("10000000 00000000 00000000 000000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 00000000", 2) <<  7 == BigInt::fromString("10000000 00000000 00000000 0000000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 00000000", 2) <<  8 == BigInt::fromString("10000000 00000000 00000000 00000000", 2) );
	
	// 5 Byte (40bit)
	REQUIRE( BigInt::fromString("1", 2) << 32 == BigInt::fromString("10000000 00000000 00000000 00000000 0", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 33 == BigInt::fromString("10000000 00000000 00000000 00000000 00", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 34 == BigInt::fromString("10000000 00000000 00000000 00000000 000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 35 == BigInt::fromString("10000000 00000000 00000000 00000000 0000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 36 == BigInt::fromString("10000000 00000000 00000000 00000000 00000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 37 == BigInt::fromString("10000000 00000000 00000000 00000000 000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 38 == BigInt::fromString("10000000 00000000 00000000 00000000 0000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 39 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000", 2) );
	
	REQUIRE( BigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  0 == BigInt::fromString("10000000 00000000 10110111 00000000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  1 == BigInt::fromString("10000000 00000000 10110111 00000000 0", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  2 == BigInt::fromString("10000000 00000000 10110111 00000000 00", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  3 == BigInt::fromString("10000000 00000000 10110111 00000000 000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  4 == BigInt::fromString("10000000 00000000 10110111 00000000 0000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  5 == BigInt::fromString("10000000 00000000 10110111 00000000 00000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  6 == BigInt::fromString("10000000 00000000 10110111 00000000 000000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  7 == BigInt::fromString("10000000 00000000 10110111 00000000 0000000", 2) );
	REQUIRE( BigInt::fromString("10000000 00000000 10110111 00000000", 2) <<  8 == BigInt::fromString("10000000 00000000 10110111 00000000 00000000", 2) );
	
	// 8 Byte (64bit)
	REQUIRE( BigInt::fromString("1", 2) << 56 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 0", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 57 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 58 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 59 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 0000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 60 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 61 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 62 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 0000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 63 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) );
	
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  0 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  1 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 0", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  2 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 00", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  3 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  4 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 0000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  5 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 00000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  6 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 000000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  7 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 0000000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000", 2) <<  8 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 00000000", 2) );
	
	// 9 Byte (72bit)
	REQUIRE( BigInt::fromString("1", 2) << 64 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 65 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 66 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 67 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 68 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 69 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 70 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000000", 2) );
	REQUIRE( BigInt::fromString("1", 2) << 71 == BigInt::fromString("10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000", 2) );
	
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  0 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  1 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 0", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  2 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 00", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  3 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  4 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 0000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  5 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 00000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  6 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 000000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  7 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 0000000", 2) );
	REQUIRE( BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101", 2) <<  8 == BigInt::fromString("10000000 01010101 00000000 10110111 00000000 11111101 00000000 10111101 00000000", 2) );
	
	
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   0 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                       1) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   1 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                       2) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   2 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                       4) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   3 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                       8) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   4 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                      16) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   5 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                      32) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   6 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                      64) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   7 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                     128) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   8 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                     256) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<   9 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                     512) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  10 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                    1024) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  11 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                    2048) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  12 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                    4096) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  13 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                    8192) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  14 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                   16384) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  15 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                   32768) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  16 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                   65536) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  17 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                                  131072) );
	
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  63 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromUint64(                     9223372036854775808ull) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  64 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                   "18446744073709551616", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  65 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                   "36893488147419103232", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  66 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                   "73786976294838206464", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  67 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                  "147573952589676412928", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  68 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                  "295147905179352825856", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  69 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                  "590295810358705651712", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  70 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                 "1180591620717411303424", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  71 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                 "2361183241434822606848", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  72 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                 "4722366482869645213696", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) <<  73 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString(                 "9444732965739290427392", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) << 127 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString("170141183460469231731687303715884105728", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) << 128 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString("340282366920938463463374607431768211456", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) << 129 == BigInt::fromString("3529260907631713815077", 10) * BigInt::fromString("680564733841876926926749214863536422912", 10) );
}

TEST_CASE( "big integer shift right", "[bigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( BigInt::fromString("10000000", 2) >>  0 == BigInt::fromString("10000000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >>  1 == BigInt::fromString( "1000000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >>  2 == BigInt::fromString(  "100000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >>  3 == BigInt::fromString(   "10000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >>  4 == BigInt::fromString(    "1000", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >>  5 == BigInt::fromString(     "100", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >>  6 == BigInt::fromString(      "10", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >>  7 == BigInt::fromString(       "1", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >>  8 == BigInt::fromString(       "0", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >>  9 == BigInt::fromString(       "0", 2) );
	REQUIRE( BigInt::fromString("10000000", 2) >> 16 == BigInt::fromString(       "0", 2) );
	
	// 2 Byte (16bit)
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  0 == BigInt::fromString("1000001100101101", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  1 == BigInt::fromString("0100000110010110", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  2 == BigInt::fromString("0010000011001011", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  3 == BigInt::fromString("0001000001100101", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  4 == BigInt::fromString("0000100000110010", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  5 == BigInt::fromString("0000010000011001", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  6 == BigInt::fromString("0000001000001100", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  7 == BigInt::fromString("0000000100000110", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  8 == BigInt::fromString("0000000010000011", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >>  9 == BigInt::fromString("0000000001000001", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >> 10 == BigInt::fromString("0000000000100000", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >> 11 == BigInt::fromString("0000000000010000", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >> 12 == BigInt::fromString("0000000000001000", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >> 13 == BigInt::fromString("0000000000000100", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >> 14 == BigInt::fromString("0000000000000010", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >> 15 == BigInt::fromString("0000000000000001", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >> 16 == BigInt::fromString("0000000000000000", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >> 17 == BigInt::fromString("0000000000000000", 2) );
	REQUIRE( BigInt::fromString("10000011 00101101", 2) >> 32 == BigInt::fromString("0000000000000000", 2) );
	
	// 8 Byte (64bit)
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   0 == BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   1 == BigInt::fromString("0000000010000110110000000101010100101010100011000100100111000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   2 == BigInt::fromString("0000000001000011011000000010101010010101010001100010010011100000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   3 == BigInt::fromString("0000000000100001101100000001010101001010101000110001001001110000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   4 == BigInt::fromString("0000000000010000110110000000101010100101010100011000100100111000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   5 == BigInt::fromString("0000000000001000011011000000010101010010101010001100010010011100", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   6 == BigInt::fromString("0000000000000100001101100000001010101001010101000110001001001110", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   7 == BigInt::fromString("0000000000000010000110110000000101010100101010100011000100100111", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   8 == BigInt::fromString("0000000000000001000011011000000010101010010101010001100010010011", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>   9 == BigInt::fromString("0000000000000000100001101100000001010101001010101000110001001001", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  10 == BigInt::fromString("0000000000000000010000110110000000101010100101010100011000100100", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  11 == BigInt::fromString("0000000000000000001000011011000000010101010010101010001100010010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  12 == BigInt::fromString("0000000000000000000100001101100000001010101001010101000110001001", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  13 == BigInt::fromString("0000000000000000000010000110110000000101010100101010100011000100", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  14 == BigInt::fromString("0000000000000000000001000011011000000010101010010101010001100010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  15 == BigInt::fromString("0000000000000000000000100001101100000001010101001010101000110001", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  16 == BigInt::fromString("0000000000000000000000010000110110000000101010100101010100011000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  17 == BigInt::fromString("0000000000000000000000001000011011000000010101010010101010001100", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  18 == BigInt::fromString("0000000000000000000000000100001101100000001010101001010101000110", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  19 == BigInt::fromString("0000000000000000000000000010000110110000000101010100101010100011", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  20 == BigInt::fromString("0000000000000000000000000001000011011000000010101010010101010001", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  21 == BigInt::fromString("0000000000000000000000000000100001101100000001010101001010101000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  22 == BigInt::fromString("0000000000000000000000000000010000110110000000101010100101010100", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  23 == BigInt::fromString("0000000000000000000000000000001000011011000000010101010010101010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  24 == BigInt::fromString("0000000000000000000000000000000100001101100000001010101001010101", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  25 == BigInt::fromString("0000000000000000000000000000000010000110110000000101010100101010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  26 == BigInt::fromString("0000000000000000000000000000000001000011011000000010101010010101", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  27 == BigInt::fromString("0000000000000000000000000000000000100001101100000001010101001010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  28 == BigInt::fromString("0000000000000000000000000000000000010000110110000000101010100101", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  29 == BigInt::fromString("0000000000000000000000000000000000001000011011000000010101010010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  30 == BigInt::fromString("0000000000000000000000000000000000000100001101100000001010101001", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  31 == BigInt::fromString("0000000000000000000000000000000000000010000110110000000101010100", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  32 == BigInt::fromString("0000000000000000000000000000000000000001000011011000000010101010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  33 == BigInt::fromString("0000000000000000000000000000000000000000100001101100000001010101", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  34 == BigInt::fromString("0000000000000000000000000000000000000000010000110110000000101010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  35 == BigInt::fromString("0000000000000000000000000000000000000000001000011011000000010101", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  36 == BigInt::fromString("0000000000000000000000000000000000000000000100001101100000001010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  37 == BigInt::fromString("0000000000000000000000000000000000000000000010000110110000000101", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  38 == BigInt::fromString("0000000000000000000000000000000000000000000001000011011000000010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  39 == BigInt::fromString("0000000000000000000000000000000000000000000000100001101100000001", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  40 == BigInt::fromString("0000000000000000000000000000000000000000000000010000110110000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  41 == BigInt::fromString("0000000000000000000000000000000000000000000000001000011011000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  42 == BigInt::fromString("0000000000000000000000000000000000000000000000000100001101100000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  43 == BigInt::fromString("0000000000000000000000000000000000000000000000000010000110110000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  44 == BigInt::fromString("0000000000000000000000000000000000000000000000000001000011011000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  45 == BigInt::fromString("0000000000000000000000000000000000000000000000000000100001101100", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  46 == BigInt::fromString("0000000000000000000000000000000000000000000000000000010000110110", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  47 == BigInt::fromString("0000000000000000000000000000000000000000000000000000001000011011", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  48 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000100001101", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  49 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000010000110", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  50 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000001000011", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  51 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000100001", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  52 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000010000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  53 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000001000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  54 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000100", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  55 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000010", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  56 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000001", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  57 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  58 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  59 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  60 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  61 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  62 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  63 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  64 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  65 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  66 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >>  67 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	REQUIRE( BigInt::fromString("00000001 00001101 10000000 10101010 01010101 00011000 10010011 10000001", 2) >> 127 == BigInt::fromString("0000000000000000000000000000000000000000000000000000000000000000", 2) );
	
	
	// 9 Byte (72bit)
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   0 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                      1) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   1 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                      2) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   2 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                      4) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   3 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                      8) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   4 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                     16) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   5 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                     32) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   6 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                     64) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   7 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                    128) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   8 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                    256) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>   9 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                    512) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  10 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                   1024) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  11 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                   2048) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  12 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                   4096) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  13 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                   8192) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  14 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                  16384) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  15 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                  32768) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  16 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(                  65536) );
	
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  63 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromUint64(    9223372036854775808ull) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  64 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromString(  "18446744073709551616", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  65 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromString(  "36893488147419103232", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  66 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromString(  "73786976294838206464", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  67 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromString( "147573952589676412928", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  68 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromString( "295147905179352825856", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  69 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromString( "590295810358705651712", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  70 == BigInt::fromString("3529260907631713815077", 10) / BigInt::fromString("1180591620717411303424", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  71 == BigInt::fromString("1", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  72 == BigInt::fromString("0", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >>  73 == BigInt::fromString("0", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >> 127 == BigInt::fromString("0", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >> 128 == BigInt::fromString("0", 10) );
	REQUIRE( BigInt::fromString("10111111 01010010 01010101 10000000 10101010 01010101 00000001 10001010 00100101", 2) >> 129 == BigInt::fromString("0", 10) );
}

TEST_CASE( "big integer addition", "[bigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( (BigInt(  0) + BigInt(  0)).toUint64()	==   0 );
	REQUIRE( (BigInt(  1) + BigInt(  0)).toUint64()	==   1 );
	REQUIRE( (BigInt(  0) + BigInt(  1)).toUint64()	==   1 );
	REQUIRE( (BigInt(  1) + BigInt(  1)).toUint64()	==   2 );
	REQUIRE( (BigInt(  2) + BigInt(  1)).toUint64()	==   3 );
	REQUIRE( (BigInt(  1) + BigInt(  2)).toUint64()	==   3 );
	REQUIRE( (BigInt( 10) + BigInt(  1)).toUint64()	==  11 );
	REQUIRE( (BigInt(128) + BigInt(127)).toUint64()	== 255 );
	
	// 2 Bytes (16 bit)
	REQUIRE( (BigInt(128) + BigInt(128).toUint64()).toUint64()	== 0x0100ull );
	REQUIRE( (BigInt(255) + BigInt(  1).toUint64()).toUint64()	== 0x0100ull );
	REQUIRE( (BigInt(  1) + BigInt(255).toUint64()).toUint64()	== 0x0100ull );
	REQUIRE( (BigInt(255) + BigInt(255).toUint64()).toUint64()	== 0x01FEull );
	
	REQUIRE( (BigInt::fromUint64(0x7FFF) + BigInt::fromUint64(0x7FFF) 				).toUint64() == 0xFFFEull );
	REQUIRE( (BigInt::fromUint64(0x7FFF) + BigInt::fromUint64(0x7FFF) + BigInt(0)	).toUint64() == 0xFFFEull );
	REQUIRE( (BigInt::fromUint64(0x7FFF) + BigInt::fromUint64(0x7FFF) + BigInt(1) 	).toUint64() == 0xFFFFull );
	REQUIRE( (BigInt(1) + BigInt::fromUint64(0x7FFF) + BigInt::fromUint64(0x7FFF) 	).toUint64() == 0xFFFFull );
	
	// 4 Bytes (32bit)
	REQUIRE( (BigInt::fromUint64(0x8000) + BigInt::fromUint64(0x8000)).toUint64() 	== 0x010000ull );
	REQUIRE( (BigInt::fromUint64(0xFFFF) + BigInt::fromUint64(  0x01)).toUint64() 	== 0x010000ull );
	REQUIRE( (BigInt::fromUint64(  0x01) + BigInt::fromUint64(0xFFFF)).toUint64() 	== 0x010000ull );
	REQUIRE( (BigInt::fromUint64(0xFFFF) + BigInt::fromUint64(0xFFFF)).toUint64() 	== 0x01FFFEull );
	
	REQUIRE( (BigInt::fromUint64(0x7FFFFFFF) + BigInt::fromUint64(0x7FFFFFFF) 				).toUint64() == 0xFFFFFFFEull );
	REQUIRE( (BigInt::fromUint64(0x7FFFFFFF) + BigInt::fromUint64(0x7FFFFFFF) + BigInt(0) 	).toUint64() == 0xFFFFFFFEull );
	REQUIRE( (BigInt::fromUint64(0x7FFFFFFF) + BigInt::fromUint64(0x7FFFFFFF) + BigInt(1) 	).toUint64() == 0xFFFFFFFFull );
	REQUIRE( (BigInt(1) + BigInt::fromUint64(0x7FFFFFFF) + BigInt::fromUint64(0x7FFFFFFF) 	).toUint64() == 0xFFFFFFFFull );
	
	// 8 Bytes (64bit)
	REQUIRE( (BigInt::fromUint64(0x80000000) + BigInt::fromUint64(0x80000000)).toUint64() 	== 0x0100000000ull );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFF) + BigInt::fromUint64(      0x01)).toUint64() 	== 0x0100000000ull );
	REQUIRE( (BigInt::fromUint64(      0x01) + BigInt::fromUint64(0xFFFFFFFF)).toUint64() 	== 0x0100000000ull );
	REQUIRE( (BigInt::fromUint64(0xFFFFFFFF) + BigInt::fromUint64(0xFFFFFFFF)).toUint64() 	== 0x01FFFFFFFEull );
	
	REQUIRE( (BigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + BigInt::fromUint64(0x7FFFFFFFFFFFFFFF) 				).toUint64() == 0xFFFFFFFFFFFFFFFEull );
	REQUIRE( (BigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + BigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + BigInt(0)	).toUint64() == 0xFFFFFFFFFFFFFFFEull );
	REQUIRE( (BigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + BigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + BigInt(1)	).toUint64() == 0xFFFFFFFFFFFFFFFFull );
	REQUIRE( (BigInt(1) + BigInt::fromUint64(0x7FFFFFFFFFFFFFFF) + BigInt::fromUint64(0x7FFFFFFFFFFFFFFF)	).toUint64() == 0xFFFFFFFFFFFFFFFFull );
	
	// 16 Bytes (128bit)
	REQUIRE( BigInt::fromString("18446744073709551616", 10) == (BigInt::fromUint64(0xFFFFFFFFFFFFFFFFull) + BigInt::ONE) ); // 2^64
	
	REQUIRE( BigInt::fromUint64(0x8000000000000000) + BigInt::fromUint64(0x8000000000000000) 	== BigInt::fromString("18446744073709551616", 10) ); // 2^64
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt::fromUint64(              0x01) 	== BigInt::fromString("010000000000000000", 16) ); // 2^64
	REQUIRE( BigInt::fromUint64(              0x01) + BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 	== BigInt::fromString("010000000000000000", 16) ); // 2^64
	REQUIRE( BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) + BigInt::fromUint64(0xFFFFFFFFFFFFFFFF) 	== BigInt::fromString("01FFFFFFFFFFFFFFFE", 16) );
	
	REQUIRE( BigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + BigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) 				== BigInt::fromString("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE", 16) );
	REQUIRE( BigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + BigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + BigInt(0)	== BigInt::fromString("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE", 16) );
	REQUIRE( BigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + BigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + BigInt(1)	== BigInt::fromString("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) );
	REQUIRE( BigInt(1) + BigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) + BigInt::fromString("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16)	== BigInt::fromString("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16) );
	
	
	REQUIRE( BigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) + BigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) == BigInt::fromString("ffffffffffffffff0000000000000011111111111111100", 16) );
	REQUIRE( BigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) + BigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) == BigInt::fromString("FFFFFFFFFFFFFFFF0000000000000011111111111111100", 16) );
	
	REQUIRE( BigInt::fromString("123456789000000000000000000000000000001234567890", 10) + BigInt::fromString("987654321000000000000000000000000000009876543210", 10) == BigInt::fromString("1111111110000000000000000000000000000011111111100", 10) );
	REQUIRE( BigInt::fromString("987654321000000000000000000000000000009876543210", 10) + BigInt::fromString("123456789000000000000000000000000000001234567890", 10) == BigInt::fromString("1111111110000000000000000000000000000011111111100", 10) );
}

TEST_CASE( "big integer subtraction", "[bigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( (BigInt(  0) - BigInt(  0)).toUint64() ==   0 );
	REQUIRE( (BigInt(  1) - BigInt(  0)).toUint64() ==   1 );
	REQUIRE( (BigInt(  1) - BigInt(  1)).toUint64() ==   0 );
	
	REQUIRE( (BigInt(  9) - BigInt(  1)).toUint64() ==   8 );
	REQUIRE( (BigInt(  9) - BigInt(  9)).toUint64() ==   0 );
	REQUIRE( (BigInt( 10) - BigInt(  9)).toUint64() ==   1 );
	REQUIRE( (BigInt(255) - BigInt(  0)).toUint64() == 255 );
	REQUIRE( (BigInt(255) - BigInt(255)).toUint64() ==   0 );
	REQUIRE( (BigInt(255) - BigInt( 1)).toUint64() 	== 254 );
	
	// 2 Bytes (16 bit)
	REQUIRE( (BigInt::fromUint64(0x0100ull) - BigInt::fromUint64(0x0100ull)).toUint64() ==   0x00ull ); // 256 - 256 = 0
	REQUIRE( (BigInt::fromUint64(0x0101ull) - BigInt::fromUint64(0x0100ull)).toUint64() ==   0x01ull ); // 257 - 256 = 1
	REQUIRE( (BigInt::fromUint64(0x0101ull) - BigInt::fromUint64(  0x01ull)).toUint64() == 0x0100ull ); // 257 - 1 = 256
	REQUIRE( (BigInt::fromUint64(0x0101ull) - BigInt::fromUint64(  0x02ull)).toUint64() ==   0xFFull ); // 257 - 2 = 255
	
	// 4 Bytes (32bit)
	REQUIRE( (BigInt::fromUint64(0x010000ull) - BigInt::fromUint64(0x010000ull)).toUint64() ==     0x00ull ); // 2^16 - 2^16 = 0
	REQUIRE( (BigInt::fromUint64(0x010001ull) - BigInt::fromUint64(0x010000ull)).toUint64() ==     0x01ull ); // (2^16 + 1) - 2^16 = 1
	REQUIRE( (BigInt::fromUint64(0x010001ull) - BigInt::fromUint64(    0x01ull)).toUint64() == 0x010000ull ); // (2^16 + 1) - 1 = 2^16
	REQUIRE( (BigInt::fromUint64(0x010001ull) - BigInt::fromUint64(    0x02ull)).toUint64() == 0x00FFFFull ); // (2^16 + 1) - 2 = 2^16 - 1
	
	// 8 Bytes (64bit)
	REQUIRE( (BigInt::fromUint64(0x0100000000ull) - BigInt::fromUint64(0x0100000000ull)).toUint64() 	==         0x00ull ); // 2^32 - 2^32 = 0
	REQUIRE( (BigInt::fromUint64(0x0100000001ull) - BigInt::fromUint64(0x0100000000ull)).toUint64() 	==         0x01ull ); // (2^32 + 1) - 2^32 = 1
	REQUIRE( (BigInt::fromUint64(0x0100000001ull) - BigInt::fromUint64(        0x01ull)).toUint64() 	== 0x0100000000ull ); // (2^32 + 1) - 1 = 2^32
	REQUIRE( (BigInt::fromUint64(0x0100000001ull) - BigInt::fromUint64(        0x02ull)).toUint64() 	== 0x00FFFFFFFFull ); // (2^32 + 1) - 2 = 2^32 - 1
	
	// 16 Bytes (128bit)
	REQUIRE( BigInt::fromString("010000000000000000", 16) - BigInt::fromString("010000000000000000", 16) 	== 							  BigInt(0x00)      ); // 2^64 - 2^64 = 0
	REQUIRE( BigInt::fromString("010000000000000001", 16) - BigInt::fromString("010000000000000000", 16) 	==                            BigInt(0x01)      ); // (2^64 + 1) - 2^64 = 1
	REQUIRE( BigInt::fromString("010000000000000001", 16) - BigInt::fromUint64(               0x01ull)	 	== BigInt::fromString("010000000000000000", 16) ); // (2^64 + 1) - 1 = 2^64
	REQUIRE( BigInt::fromString("010000000000000001", 16) - BigInt::fromUint64(               0x02ull)		== BigInt::fromUint64( 0xFFFFFFFFFFFFFFFFull)   ); // (2^64 + 1) - 2 = 2^64 - 1
	
	REQUIRE( BigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) - BigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) == BigInt::fromString("fdb97530eca86421000000000000000eca8641fdb975320", 16) );
	REQUIRE( BigInt::fromString("987654321000000000000000000000000000009876543210", 10) - BigInt::fromString("123456789000000000000000000000000000001234567890", 10) == BigInt::fromString("864197532000000000000000000000000000008641975320", 10) );
}

TEST_CASE( "big integer multiplication", "[bigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( (BigInt(  0) * BigInt(0)).toUint64() ==   0 );
	REQUIRE( (BigInt(  1) * BigInt(0)).toUint64() ==   0 );
	REQUIRE( (BigInt(  1) * BigInt(1)).toUint64() ==   1 );
	REQUIRE( (BigInt(  2) * BigInt(1)).toUint64() ==   2 );
	REQUIRE( (BigInt(  1) * BigInt(2)).toUint64() ==   2 );
	REQUIRE( (BigInt( 10) * BigInt(0)).toUint64() ==   0 );
	REQUIRE( (BigInt( 11) * BigInt(2)).toUint64() ==  22 );
	REQUIRE( (BigInt(127) * BigInt(2)).toUint64() == 254 );
	
	// 2 Bytes (16 bit)
	REQUIRE( (BigInt(128) * BigInt(              2)).toUint64() == 0x0100ull );
	REQUIRE( (BigInt(128) * BigInt(              4)).toUint64() == 0x0200ull );
	REQUIRE( (BigInt(123) * BigInt::fromUint64(532)).toUint64() == 0xFF9Cull );
	REQUIRE( (BigInt( 98) * BigInt::fromUint64(571)).toUint64() == 0xDA96ull );
	
	REQUIRE( (BigInt::fromUint64(0x0100ull) * BigInt::fromUint64(0x0FFull)).toUint64() == 0xFF00ull );
	REQUIRE( (BigInt::fromUint64(0x0011ull) * BigInt::fromUint64(0x0FFull)).toUint64() == 0x10EFull );
	
	// 4 Bytes (32bit)
	REQUIRE( (BigInt::fromUint64(    0xFFFFull) * BigInt::fromUint64( 0xFFFFull)).toUint64() == 0xFFFE0001ull );
	
	REQUIRE( (BigInt::fromUint64(    0x0100ull) * BigInt::fromUint64( 0x0100ull)).toUint64() ==   0x010000ull );
	REQUIRE( (BigInt::fromUint64(    0x0100ull) * BigInt::fromUint64( 0x0F00ull)).toUint64() ==   0x0F0000ull );
	
	REQUIRE( (BigInt::fromUint64(0x55555555ull) * BigInt::fromUint64(  0x003ull)).toUint64() == 0xFFFFFFFFull );
	REQUIRE( (BigInt::fromUint64(    0xEFEFull) * BigInt::fromUint64(   0xEFull)).toUint64() ==   0xE00021ull );
	REQUIRE( (BigInt::fromUint64(    0xEFEFull) * BigInt::fromUint64( 0xEFEFull)).toUint64() == 0xE0E02121ull );
	
	REQUIRE( (BigInt::fromUint64(0xff9Cull) * BigInt::fromUint64(  0x7Bull)).toUint64() == 0x7ACFF4ull ); // 65436 * 123 = 8048628
	
	// 8 Bytes (64bit)
	REQUIRE( (BigInt::fromUint64(    0xFFFFFFFFull) * BigInt::fromUint64( 0xFFFFFFFFull)).toUint64() == 0xFFFFFFFE00000001ull );
	REQUIRE( (BigInt::fromUint64(    0xFFFFFFFFull) * BigInt::fromUint64(       0x02ull)).toUint64() ==        0x1FFFFFFFEull );
	REQUIRE( (BigInt::fromUint64(    0xFEDCBA98ull) * BigInt::fromUint64( 0x12345678ull)).toUint64() == 0x121FA00A35068740ull );
	REQUIRE( (BigInt::fromUint64(    0xFEDCBA98ull) * BigInt::fromUint64( 0x12345678ull)).toUint64() == 0xFEDCBA98ull * 0x12345678ull);
	
	// 16 Bytes (128bit)
	REQUIRE( BigInt::fromUint64(    0xFFFFFFFFFFFFFFFFull) * BigInt::fromUint64( 0xFFFFFFFFFFFFFFFFull) == BigInt::fromString("FFFFFFFFFFFFFFFE0000000000000001", 16) );
	REQUIRE( BigInt::fromUint64(    0xFFFFFFFFFFFFFFFFull) * BigInt::fromUint64(               0x02ull) == BigInt::fromString(               "1FFFFFFFFFFFFFFFE", 16) );
	REQUIRE( BigInt::fromUint64(    0xFEDCBA9876543210ull) * BigInt::fromUint64( 0x123456789ABCDEF0ull) == BigInt::fromString("24090311171252216041959356964269510400", 10) ); // 18364758544493064720 * 1311768467463790320 = 24090311171252216041959356964269510400
	REQUIRE( BigInt::fromUint64(    0xFEDCBA9876543210ull) * BigInt::fromUint64( 0x123456789ABCDEF0ull) == BigInt::fromString("121fa00ad77d7422236d88fe5618cf00", 16) ); // 18364758544493064720 * 1311768467463790320 = 24090311171252216041959356964269510400
	REQUIRE( (BigInt::fromUint64(    0xFEDCBA9876543210ull) * BigInt::fromUint64( 0x123456789ABCDEF0ull)).toStringDec() == std::string("24090311171252216041959356964269510400") ); // 18364758544493064720 * 1311768467463790320 = 24090311171252216041959356964269510400
	
	// -------
	REQUIRE( BigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) *  BigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) == BigInt::fromString("121fa00ad77d7422236d88fe5618cf13419a0b84f54b6445a4618e3b7a5bf121fa00ad77d7422236d88fe5618cf00", 16) );
	REQUIRE( BigInt::fromString("fedcba9876543210000000000000000fedcba9876543210", 16) *  BigInt::fromString("123456789abcdef000000000000000123456789abcdef0", 16) == BigInt::fromString("121fa00ad77d7422236d88fe5618cf13419a0b84f54b6445a4618e3b7a5bf121fa00ad77d7422236d88fe5618cf00", 16) );
	
	REQUIRE( BigInt::fromString("123456789000000000000000000000000000001234567890", 10) *  BigInt::fromString("987654321000000000000000000000000000009876543210", 10) == BigInt::fromString("121932631112635269000000000000000000002438652622252705380000000000000000000012193263111263526900", 10) );
	REQUIRE( BigInt::fromString("987654321000000000000000000000000000009876543210", 10) *  BigInt::fromString("123456789000000000000000000000000000001234567890", 10) == BigInt::fromString("121932631112635269000000000000000000002438652622252705380000000000000000000012193263111263526900", 10) );
}

TEST_CASE( "big integer division", "[bigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( (BigInt(  0) / BigInt(  1)).toUint64() ==   0 );
	REQUIRE( (BigInt(  0) % BigInt(  1)).toUint64() ==   0 );
	REQUIRE( (BigInt(  1) / BigInt(  1)).toUint64() ==   1 );
	REQUIRE( (BigInt(  1) % BigInt(  1)).toUint64() ==   0 );
	REQUIRE( (BigInt(  1) / BigInt(  2)).toUint64() ==   0 );
	REQUIRE( (BigInt(  1) % BigInt(  2)).toUint64() ==   1 );
	REQUIRE( (BigInt(  2) / BigInt(  1)).toUint64() ==   2 );
	REQUIRE( (BigInt(  2) % BigInt(  1)).toUint64() ==   0 );
	REQUIRE( (BigInt(  2) / BigInt(  2)).toUint64() ==   1 );
	REQUIRE( (BigInt(  2) % BigInt(  2)).toUint64() ==   0 );
	REQUIRE( (BigInt(  4) / BigInt(  2)).toUint64() ==   2 );
	REQUIRE( (BigInt(  4) % BigInt(  2)).toUint64() ==   0 );
	REQUIRE( (BigInt( 10) / BigInt(  1)).toUint64() ==  10 );
	REQUIRE( (BigInt( 10) % BigInt(  1)).toUint64() ==   0 );
	REQUIRE( (BigInt( 10) / BigInt(  2)).toUint64() ==   5 );
	REQUIRE( (BigInt( 10) % BigInt(  2)).toUint64() ==   0 );
	REQUIRE( (BigInt( 10) / BigInt(  3)).toUint64() ==   3 );
	REQUIRE( (BigInt( 10) % BigInt(  3)).toUint64() ==   1 );
	REQUIRE( (BigInt( 10) / BigInt(  5)).toUint64() ==   2 );
	REQUIRE( (BigInt( 10) % BigInt(  5)).toUint64() ==   0 );
	REQUIRE( (BigInt( 11) / BigInt(  2)).toUint64() ==   5 );
	REQUIRE( (BigInt( 11) % BigInt(  2)).toUint64() ==   1 );
	REQUIRE( (BigInt( 12) / BigInt(  2)).toUint64() ==   6 );
	REQUIRE( (BigInt( 12) % BigInt(  2)).toUint64() ==   0 );
	REQUIRE( (BigInt(252) / BigInt(  2)).toUint64() == 126 );
	REQUIRE( (BigInt(252) % BigInt(  2)).toUint64() ==   0 );
	REQUIRE( (BigInt(253) / BigInt(  2)).toUint64() == 126 );
	REQUIRE( (BigInt(253) % BigInt(  2)).toUint64() ==   1 );
	REQUIRE( (BigInt(254) / BigInt(  2)).toUint64() == 127 );
	REQUIRE( (BigInt(254) % BigInt(  2)).toUint64() ==   0 );
	REQUIRE( (BigInt(255) / BigInt(  2)).toUint64() == 127 );
	REQUIRE( (BigInt(255) % BigInt(  2)).toUint64() ==   1 );
	REQUIRE( (BigInt(255) / BigInt(255)).toUint64() ==   1 );
	REQUIRE( (BigInt(255) % BigInt(255)).toUint64() ==   0 );
	REQUIRE( (BigInt(254) / BigInt(127)).toUint64() ==   2 );
	REQUIRE( (BigInt(254) % BigInt(127)).toUint64() ==   0 );
	REQUIRE( (BigInt(255) / BigInt(127)).toUint64() ==   2 );
	REQUIRE( (BigInt(255) % BigInt(127)).toUint64() ==   1 );
	
	
	// 2 Bytes (16 bit)
	REQUIRE( (BigInt::fromUint64(0x0100ull) / BigInt(                2)).toUint64() ==   128);
	REQUIRE( (BigInt::fromUint64(0x0100ull) % BigInt(                2)).toUint64() ==     0);
	REQUIRE( (BigInt::fromUint64(0x0200ull) / BigInt(                4)).toUint64() ==   128);
	REQUIRE( (BigInt::fromUint64(0x0200ull) % BigInt(                4)).toUint64() ==     0);
	REQUIRE( (BigInt::fromUint64(0x0100ull) / BigInt::fromUint64(0x100)).toUint64() ==     1);
	REQUIRE( (BigInt::fromUint64(0x0100ull) % BigInt::fromUint64(0x100)).toUint64() ==     0);
	REQUIRE( (BigInt::fromUint64(0x0200ull) / BigInt::fromUint64(0x100)).toUint64() ==     2);
	REQUIRE( (BigInt::fromUint64(0x0200ull) % BigInt::fromUint64(0x100)).toUint64() ==     0);
	REQUIRE( (BigInt::fromUint64(0x0200ull) / BigInt::fromUint64(0x200)).toUint64() ==     1);
	REQUIRE( (BigInt::fromUint64(0x0200ull) % BigInt::fromUint64(0x200)).toUint64() ==     0);
	REQUIRE( (BigInt::fromUint64(0x0300ull) / BigInt::fromUint64(0x200)).toUint64() ==     1);
	REQUIRE( (BigInt::fromUint64(0x0300ull) % BigInt::fromUint64(0x200)).toUint64() == 0x100);
	REQUIRE( (BigInt::fromUint64(0x0400ull) / BigInt::fromUint64(0x200)).toUint64() ==     2);
	REQUIRE( (BigInt::fromUint64(0x0400ull) % BigInt::fromUint64(0x200)).toUint64() ==     0);
	REQUIRE( (BigInt::fromUint64(0xFF9Cull) / BigInt::fromUint64(0x100)).toUint64() ==  0xff);
	REQUIRE( (BigInt::fromUint64(0xFF9Cull) % BigInt::fromUint64(0x100)).toUint64() ==  0x9C);
	REQUIRE( (BigInt::fromUint64(0xFF9Cull) / BigInt::fromUint64(  532)).toUint64() ==   123);
	REQUIRE( (BigInt::fromUint64(0xFF9Cull) % BigInt::fromUint64(  532)).toUint64() ==     0);
	REQUIRE( (BigInt::fromUint64(0xDA96ull) / BigInt::fromUint64(  571)).toUint64() ==    98);
	REQUIRE( (BigInt::fromUint64(0xDA96ull) % BigInt::fromUint64(  571)).toUint64() ==     0);
	
	REQUIRE( (BigInt::fromUint64(0xFF00ull) / BigInt::fromUint64(0x0FFull)).toUint64() == 0x0100ull );
	REQUIRE( (BigInt::fromUint64(0xFF00ull) % BigInt::fromUint64(0x0FFull)).toUint64() ==      0ull );
	REQUIRE( (BigInt::fromUint64(0x10EFull) / BigInt::fromUint64(0x0FFull)).toUint64() == 0x0011ull );
	REQUIRE( (BigInt::fromUint64(0x10EFull) % BigInt::fromUint64(0x0FFull)).toUint64() ==      0ull );
	
	// 4 Bytes (32bit)
	REQUIRE( (BigInt::fromUint64( 0xFFFE0001ull) / BigInt::fromUint64( 0xFFFFull)).toUint64() ==     0xFFFFull ); // first test of D5. [Test Remainder] and D6. [add back] (at 8bit words)
	REQUIRE( (BigInt::fromUint64( 0xFFFE0001ull) % BigInt::fromUint64( 0xFFFFull)).toUint64() ==          0ull );
	
	REQUIRE( (BigInt::fromUint64(   0x010000ull) / BigInt::fromUint64( 0x0100ull)).toUint64() ==     0x0100ull );
	REQUIRE( (BigInt::fromUint64(   0x010000ull) % BigInt::fromUint64( 0x0100ull)).toUint64() ==          0ull );
	REQUIRE( (BigInt::fromUint64(   0x0F0000ull) / BigInt::fromUint64( 0x0F00ull)).toUint64() ==     0x0100ull );
	REQUIRE( (BigInt::fromUint64(   0x0F0000ull) % BigInt::fromUint64( 0x0F00ull)).toUint64() ==          0ull );
	
	REQUIRE( (BigInt::fromUint64( 0xFFFFFFFFull) / BigInt::fromUint64(  0x003ull)).toUint64() == 0x55555555ull );
	REQUIRE( (BigInt::fromUint64( 0xFFFFFFFFull) % BigInt::fromUint64(  0x003ull)).toUint64() ==          0ull );
	REQUIRE( (BigInt::fromUint64(   0xE00021ull) / BigInt::fromUint64(   0xEFull)).toUint64() ==     0xEFEFull );
	REQUIRE( (BigInt::fromUint64(   0xE00021ull) % BigInt::fromUint64(   0xEFull)).toUint64() ==          0ull );
	REQUIRE( (BigInt::fromUint64( 0xE0E02121ull) / BigInt::fromUint64( 0xEFEFull)).toUint64() ==     0xEFEFull );
	REQUIRE( (BigInt::fromUint64( 0xE0E02121ull) % BigInt::fromUint64( 0xEFEFull)).toUint64() ==          0ull );
	
	// 8 Bytes (64bit)
	REQUIRE( (BigInt::fromUint64(          0xFFFFFFFE00000001ull) / BigInt::fromUint64( 0xFFFFFFFFull)).toUint64() == 0xFFFFFFFFull ); // test of D5. [Test Remainder] and D6. [add back] (at 8bit words)
	REQUIRE( (BigInt::fromUint64(          0xFFFFFFFE00000001ull) % BigInt::fromUint64( 0xFFFFFFFFull)).toUint64() ==          0ull );
	
	REQUIRE( (BigInt::fromUint64(                 0x1FFFFFFFEull) / BigInt::fromUint64(       0x02ull)).toUint64() == 0xFFFFFFFFull );
	REQUIRE( (BigInt::fromUint64(                 0x1FFFFFFFEull) % BigInt::fromUint64(       0x02ull)).toUint64() ==          0ull );
	REQUIRE( (BigInt::fromUint64(          0x121FA00A35068740ull) / BigInt::fromUint64( 0x12345678ull)).toUint64() == 0xFEDCBA98ull );
	REQUIRE( (BigInt::fromUint64(          0x121FA00A35068740ull) % BigInt::fromUint64( 0x12345678ull)).toUint64() ==          0ull );
	REQUIRE( (BigInt::fromUint64(  0xFEDCBA98ull * 0x12345678ull) / BigInt::fromUint64( 0x12345678ull)).toUint64() == 0xFEDCBA98ull );
	REQUIRE( (BigInt::fromUint64(  0xFEDCBA98ull * 0x12345678ull) % BigInt::fromUint64( 0x12345678ull)).toUint64() ==          0ull );
	
	// 16 Bytes (128bit)
	REQUIRE( BigInt::fromString(       "FFFFFFFFFFFFFFFE0000000000000001", 16) / BigInt::fromUint64( 0xFFFFFFFFFFFFFFFFull) == BigInt::fromUint64(    0xFFFFFFFFFFFFFFFFull)); // test of D5. [Test Remainder] and D6. [add back] (at 8bit words)
	REQUIRE( BigInt::fromString(       "FFFFFFFFFFFFFFFE0000000000000001", 16) % BigInt::fromUint64( 0xFFFFFFFFFFFFFFFFull) == BigInt::fromUint64(                     0ull));
	
	REQUIRE( BigInt::fromString(                      "1FFFFFFFFFFFFFFFE", 16) / BigInt::fromUint64(               0x02ull) == BigInt::fromUint64(    0xFFFFFFFFFFFFFFFFull));
	REQUIRE( BigInt::fromString(                      "1FFFFFFFFFFFFFFFE", 16) % BigInt::fromUint64(               0x02ull) == BigInt::fromUint64(                     0ull));
	REQUIRE( BigInt::fromString( "24090311171252216041959356964269510400", 10) / BigInt::fromUint64( 0x123456789ABCDEF0ull) == BigInt::fromUint64(    0xFEDCBA9876543210ull)); // 24090311171252216041959356964269510400 / 1311768467463790320 = 18364758544493064720
	REQUIRE( BigInt::fromString( "24090311171252216041959356964269510400", 10) % BigInt::fromUint64( 0x123456789ABCDEF0ull) == BigInt::fromUint64(                     0ull));
	REQUIRE( BigInt::fromString(       "121fa00ad77d7422236d88fe5618cf00", 16) / BigInt::fromUint64( 0x123456789ABCDEF0ull) == BigInt::fromUint64(    0xFEDCBA9876543210ull)); // 24090311171252216041959356964269510400 / 1311768467463790320 = 18364758544493064720
	REQUIRE( BigInt::fromString(       "121fa00ad77d7422236d88fe5618cf00", 16) % BigInt::fromUint64( 0x123456789ABCDEF0ull) == BigInt::fromUint64(                     0ull));
	
	// -------
	REQUIRE( BigInt::fromString(    "121fa00ad77d7422236d88fe5618cf13419a0b84f54b6445a4618e3b7a5bf121fa00ad77d7422236d88fe5618cf00", 16) / BigInt::fromString( "fedcba9876543210000000000000000fedcba9876543210", 16) == BigInt::fromString(  "123456789abcdef000000000000000123456789abcdef0", 16));
	REQUIRE( BigInt::fromString(    "121fa00ad77d7422236d88fe5618cf13419a0b84f54b6445a4618e3b7a5bf121fa00ad77d7422236d88fe5618cf00", 16) % BigInt::fromString( "fedcba9876543210000000000000000fedcba9876543210", 16) == BigInt::fromString(                                               "0", 16));
	REQUIRE( BigInt::fromString( "121932631112635269000000000000000000002438652622252705380000000000000000000012193263111263526900", 10) / BigInt::fromString("987654321000000000000000000000000000009876543210", 10) == BigInt::fromString("123456789000000000000000000000000000001234567890", 10));
	REQUIRE( BigInt::fromString( "121932631112635269000000000000000000002438652622252705380000000000000000000012193263111263526900", 10) % BigInt::fromString("987654321000000000000000000000000000009876543210", 10) == BigInt::fromString(                                               "0", 10));
	
	// ------
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / BigInt::fromString("1", 10) == BigInt::fromString("6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10));
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % BigInt::fromString("1", 10) == BigInt::fromString(                                                                                                         "0", 10));
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / BigInt::fromString("2", 10) == BigInt::fromString("3282327327325825708273258273273258263263232825825739394992080780749242493932813447459093582582732732572788", 10));
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % BigInt::fromString("2", 10) == BigInt::fromString(                                                                                                         "1", 10));
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / BigInt::fromString("147", 10) == BigInt::fromString("44657514657494227323445690792833445758683439807152916938667765724479489713371611530055695001125615409153", 10));
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % BigInt::fromString("147", 10) == BigInt::fromString(                                                                                                      "86", 10));
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / BigInt::fromString("6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) == BigInt::fromString("1", 10));
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % BigInt::fromString("6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) == BigInt::fromString("0", 10));
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) / BigInt::fromString("5555555555555544455555555555555555444441122235654445554547555", 10) == BigInt::fromString("1181637837837299615890772977303005548172635842", 10));
	REQUIRE( BigInt::fromString( "6564654654651651416546516546546516526526465651651478789984161561498484987865626894918187165165465465145577", 10) % BigInt::fromString("5555555555555544455555555555555555444441122235654445554547555", 10) == BigInt::fromString("102256964850719633725637788587322669027978740977851378679267", 10));
	
	REQUIRE( BigInt::fromString( "121212121121212454564757645640000000000000000000546424465744466464313145643", 10) / BigInt::fromString("46464644515442612", 10) == BigInt::fromString("2608695759652855584042902602291341403871593244214364153233", 10));
	REQUIRE( BigInt::fromString( "121212121121212454564757645640000000000000000000546424465744466464313145643", 10) % BigInt::fromString("46464644515442612", 10) == BigInt::fromString("5925350727381047", 10));
	REQUIRE( BigInt::fromString( "AEDBBBBBDDDFFFFFFFFFFF65156895651516500000000000000000F", 16) / BigInt::fromString("FFFFFFFFFF56556165465466546546546546122222222F", 16) == BigInt::fromString("aedbbbbbd", 16));
	REQUIRE( BigInt::fromString( "AEDBBBBBDDDFFFFFFFFFFF65156895651516500000000000000000F", 16) % BigInt::fromString("FFFFFFFFFF56556165465466546546546546122222222F", 16) == BigInt::fromString("e53e3992ef3e65ed83201fbc921bdf68de2743627f6e5c", 16));
	
	REQUIRE( BigInt::fromString( "15485863", 10) / BigInt::fromString("17", 10) == BigInt::fromString("910933", 10));
	REQUIRE( BigInt::fromString( "15485863", 10) % BigInt::fromString("17", 10) == BigInt::fromString("2", 10));
	
}

TEST_CASE( "big integer pow", "[bigint]" ) {
	// 1 Byte (8bit)
	REQUIRE( BigInt(  1).pow(BigInt(  1)).toUint64() ==   1 );
	REQUIRE( BigInt(  0).pow(BigInt(  1)).toUint64() ==   0 );
	REQUIRE( BigInt(  0).pow(BigInt(  2)).toUint64() ==   0 );
	REQUIRE( BigInt(  0).pow(BigInt(  3)).toUint64() ==   0 );
	REQUIRE( BigInt(  0).pow(BigInt(255)).toUint64() ==   0 );
	REQUIRE( BigInt(  1).pow(BigInt(  0)).toUint64() ==   1 );
	REQUIRE( BigInt(  2).pow(BigInt(  0)).toUint64() ==   1 );
	REQUIRE( BigInt(  3).pow(BigInt(  0)).toUint64() ==   1 );
	REQUIRE( BigInt(255).pow(BigInt(  0)).toUint64() ==   1 );
	
	
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(0)).toUint64() ==   1 );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(1)) == BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(2)) ==   BigInt::fromString("1524048626526185117008148645329708998795770321794318911442256140455458946053172210513801777413097237329246447244122385285308414454789711324787960475901495579519924778756", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(3)) == BigInt::fromString("1881474063392538580104293111393515179649632793959103295994811562361294554161939745982608133564565542204073242684988356858761198894560865302229744629701298307382732414852446913292026698808738732944827521756186090834642278871507135064538602803625789936904", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(4)) == BigInt::fromString("2322724216016351285472707124797887713981534093719739103213407334702107425041932730777326153711532379822978430798408976244316601438139655559996863723159199445623538286148496267102069962655433997187047023578211999563638238190873223997008007371192667094663558359643750680318859643251894423390770637182150347047660358392496015012475548907536", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(5)) == BigInt::fromString("2867457962158038971853938647659375320115494383219896161741583092210829444699615500326588552418737089216037940156999920949940166545191462082581253155295134695870831145921714817833094876533390847748267009204859527832933060930612590727989929106335206340916340073313189287861119834506233261329926851146364423475764872904013979979647627788807185431063573845274690387283341162568066853325074114840393511798145094976543399611424", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(6)) == BigInt::fromString("3539944651218830283540237184943231733526400651356915543005999830870728064470946236962840236630958805963468880528581970518426253453126552935135702339291798727869826342947189921425668475204474360928826722707549964601043918911967378559821737176530807786999546527891889398340508787606662886034686369292655165825645593194777876820396404402099390250401340029154647740647755879072938227342165972233945850036459828750018220652089900824625252564384949798192695376327532441052506514246293241314988128954312301105216", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(7)) == BigInt::fromString("4370145368848532993242523075480569474139689185243537323461489922215230490555285155220171557274942547946391227642834796084203294700211008420494777946537074472184785618953558877240196071108329207824554743163383909448668325710116607092261566917692365671156479943140409928293640801157769626295637371165926498441822931984045867370978011530469809936350130402824887833172879161880272854103993910122813147049672068271585034130216078042298280565291016527870287491535160333187558206060681978142740974783641780486905910766479698398585528176367347217326798941738259976825918154594987947097719570108544", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(8)) == BigInt::fromString("5395047783668773709460639056224185760889235717278209951617981537996864826581460683682501318938815681656151958366140465272884649876381694772498596841934270041178306976885452204765063226273182513141163415617476121267278772677860029973492021040065556863907996371801937962087527374769987283177425267845426325078540447496795491526579513442194482548092077099751401641305494953304352311309669493975681079008283809834498665401746908842008129396834776449030813934294217884594751428876570388384142266037241163723638366407733503102721783079433521192695271104586599752841392843737198696981062031279116702499649000416708580359920953881420098099346685016780778222606258624322683077591296", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(9)) == BigInt::fromString("6660314047113375362717118830937150418894822047689175393373261671094594020566478309787317394536511654440334145396014118250585775607229382517821857691572311721610361814315339092248604034789677002480899646574438926664785599408420949268895302251058514364940634764862382757544044760638210705868384389235211642594541458339214544495817772551070071638986276284136919611246439790071468861836483776797120826186998385040118047655817351174172012988433608066340201003365144512395679567507777521535751903610199604821667817269481414854081548331738516698573839760290854730756066914126892758698199224637074055449072973410012335191441628122431795002240207292069084514744712983684809263796595352722062614488551975275543914901720954495344443353023118414301445927792170105291264", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(10)) == BigInt::fromString("8222315164743533660322716869205426863298595939614360305442998688209230822741081065880621484469343806415355099455827992366204650030477782349786805802611371198385552114729607612922493857084859636592884607302472143286667576151286304509748792169775990414683086310499759210086314636846142836598831338179359936823353371796102561138300730509971405941785043312353445877831136983874954344159228211618775469143483738566408548893667340467692018161874545230032443789619494305274302301113989109668836113826465977227815031287792805790862002225986391995444892842504718408666055595037262539997469969697387246472169537858751674998655549656461006006174519707063523399279679397216139896950840488719823220059762423870515397663615757747330968399275746884748859378061652915318561679597724441030415446783066798052540826374335278428786048844155232349343754191307776", 10) );
	
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(127)) == BigInt::fromString("", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(128)) == BigInt::fromString("", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt(129)) == BigInt::fromString("", 10) );
	
	// REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt::fromUint64(255)) == BigInt::fromString("", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt::fromUint64(255)) == BigInt::fromString("", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt::fromUint64(256)) == BigInt::fromString("", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt::fromUint64(257)) == BigInt::fromString("", 10) );
	REQUIRE( BigInt::fromString("1234523643567098765433100593754267268387411043985640123642389767832457568567546743234", 10).pow(BigInt::fromString("321", 10)) == BigInt::fromString("", 10) );
	
	
	//REQUIRE( BigInt::fromString("321", 10).pow(BigInt::fromString("721", 10)) == BigInt::fromString("", 10)
	
	REQUIRE( BigInt::fromString("1234523643567098765433567268387411043985640123642389767832457568567546743234", 10).pow(BigInt(  0)).toUint64() ==   1 );
	REQUIRE( BigInt(  0).pow(BigInt::fromString("1234523643567098765433567268387411043985640123642389767832457568567546743234", 10)).toUint64() ==   0 );
}
